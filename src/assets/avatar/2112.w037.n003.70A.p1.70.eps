%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/13/2021
%%BoundingBox: 0 0 672 400
%%HiResBoundingBox: 0 0 671.0806 400
%%CropBox: 0 0 671.0806 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 21677 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA8
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1CAA7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CFA8FFCACFA8CAA8A8A7CAA8CAA7CAA8CAA7CAA8A8A7CAA8FF
%CAFFCACAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8A8FFCAFFA8FFCACAA8CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8A8A8CAA8CFA8FFCACAA8CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8A8A8CFCACFA8FFA8CFA8CAA8CAA7CAA8CAA7CAA8CAA7A1
%A8A1A8A1A8A1A8A1A8A1A8A8CFA8FFCAFFA8CAA8CAA7A8A1A8A1A8A1A8A1
%A8A1A8A7CAA8FF7D7652A8CACAA8CAA1A8A1A8A1A8A1A8A1A8A1A8A8CA52
%52A7CFA8FFA8CAA8A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8FFCACFA8FFA8
%CAA8A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8FFA8CFA8C3A1CAA8A8A1A8A1
%A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CFCAFFCACA522752FFCAFFCACF
%A8CAA8CAA8CAA8CAA8CAA8FFCAFF76FD04F8A8CAFFCACFA8CAA8CAA8CAA8
%CAA8CAA8FF76F8F827A8FFA1CACAFFCACAA8CAA8CAA8CAA8CAA8CAA8FFCA
%FF7D7D2752A8CACAFFCACAA8CAA8CAA8CAA8CAA8CACAFFA8CAC3C3A7C993
%BBA7FFA8CAA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A1CAA8CACA7DFD04
%F827FFA8CFA8CAA1A8A7A8A1A8A7A8A1CFA8CF7D2020F8F8F827FFA8CFA8
%CAA1A8A7A8A1A8A7A8A7CFCA4BF8F8F827F8F827CFA8CFA8A8A1A8A7A8A1
%A8A7A8A8CFA8CFA8FD06F8CAA8CFA8A8A1A8A7A8A1A8A7A8A8CFA8C393BB
%93BBA0BC99CAA8CFA8A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA8FFCA
%FF52F8754BF8F852FFA8FFCACAA7CAA8CAA7CAA8CAA8FFFF52F89AFD04F8
%A8FFA8FFCACAA7CAA8CAA7CAA8CFA8FF7DFD05F82027A8FFA8FFCACAA7CA
%A8CAA7CAA8CFA8FFCAFF274B20F8F8F8A7FFA8FFA8A8A7CAA8CAA7CAA8FF
%A8CF99BC99BC99C2A0C9CACFA8FFA8A8A7CAA8CAA7CAA8A1A8A1A8A1A8A1
%A8A8CAA8CAA8A84B9A994BF84BA8CAA8CFA8A8A1A8A1A8A1A8A8CAA8FF27
%279A762720F87DCACFA8CFA8A8A1A8A1A8A1CAA8CAA8FF76FD04F89AF87D
%CACAA8CFA8A8A1A8A1A8A1CAA8CAA8CAA8A89A76F8F8F87DCACAA8CAA7A8
%A1A8A1A8A1CAA8CAA8A0999999BB99BC9ACAA8CAA8CAA1A8A1A8A1A8A1A8
%CAA8CAA8CAA8CAA8FFCAFFCAFFA19A9A9ABC9A6FCFCAFFCAFFA8CAA8CAA8
%CAA8FFA8FFCF524BA1C3CA7676F84BA1FFCAFFA8CAA8CAA8CAA8FFA8FFCA
%FF524B2676994B7DFFA8FFCACFA8CAA8CAA8CACAFFA8FFCAFFC9A0C3A04B
%4B7DFFA8FFCACAA8CAA8CAA8CACAFFA8FF76A076C9C2BC99BBC3FFA8FFCA
%CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1CAA8CAA8CFA8A899C26F9A9AC3A8CA
%A8CFA8CAA1A8A7A8A1CAA8CAA8FF27769A76C3C34BF8F8F87DFFA8A8A1A8
%A7A8A1CFA8CAA8CFCA9A6FC29A759ACFA8CAA8CFA8A8A1A8A7A8A7CFA8CA
%A8CFA8CA9AA1C39A76FFA8CAA8CFA8A8A1A8A7A8A8CFA8CAA8A176C3A176
%9ABB93C3A8CAA8CFA8A8A1A8A7A8A1A8CAA8CAA7CAA8A8A8FFCACFA8FFCA
%CABCC299C9CFFFCAFFA8FFA8A8A7CAA8A8A8FFCAFF76F827A176C327FD04
%F827A8FFA8A8A7CAA8CAA8FFCACFA8FFA1C2BCC299C3A8FFCACFA8FFA8CA
%A7CAA8CAA8FFCACFA8FFCAC3A0C3C9FFA8FFCACFA8CFA8CAA7CAA8CAA8FF
%CACFC39A76C9A0C299BB9AFFCACFA8CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1
%A8A8CAA8CAA8CFA89A6F757DA8A1A8A8CAA8CAA1A8A1A8A1CAA8CACA52F8
%20279AA1762020F8F8F8A1A8CAA1A8A1A8A7CAA8CAA8CAA8FFA1996F9AA8
%CAA8CAA8CAA8A8A1A8A1A8A7CAA8CAA8CAA8CF76769ACAA8CAA8CFA8CAA8
%A8A1A8A1A8A8CAA8CAA8CAA09A9ABC93BC99BB9ACAA8CAA7A8A1A8A1A8A1
%A8CAA8CAA8CAA8CAA8FFCAFFCAFFCACA7C7651765176527676A8A8CAA8CA
%A8CAA8FFCAFF7C99BBC39BC3BCC2BB9A20F87DFFA8CAA8CAA8CAA8FFCAFF
%A8CFC9C9BC9A76CFCAFFCAFFCAFFA8CAA8CAA8CAA8FFCAFFA8A152A0C3C9
%767676A7CAFFCACFA8CAA8CAA8CACAFFCAFFA8A19AC3547E789B99BB9ACF
%A8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7A8A8CFA8CFA17C4B7D7C7651524B
%7651514BA8A8A8A1A8A7A8A8FFA1BCBBC2BBBBBBBCBBBCBBC24BA1A8A8A7
%A8A1A8A7CAA8FFA7C9C2C8A0A2A1A8C2C9A7FFA8CAA8A8A7A8A1A8A7CAA8
%FFA8764B765176517651524B7DA8CAA7A8A7A8A1A8A8CAA8CFA854539A53
%FD04547899BBA1CAA1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CACAFF7D764B
%765176517652765176517DA8CAA8CAA7CAA8CFC3C2BBC2BBC2BBC2BBC2BB
%C2BBC2C3CAA7CAA8CAA7CAA8CFC9FD04C8C9547F54C9C8C8C9FFCACAA7CA
%A8CAA7CAA8FFA87D517651765176517652764BA1A8CAA7CAA8CAA7CAA8FF
%7E7F54532854547E547F547899CFA8A8A7CAA8CAA7CAA8A1A8A1A8A1A8A1
%A8A7CA76514B524B7651524B7651524B76A1A8A1A8A1A8A1A8A1BC999B99
%BC99BC99BC99BC99BC99C2A7A8A1A8A1A8A1A8A7C8C2C8C2C8A05454547D
%C8C2C8A7CAA1A8A1A8A1A8A1A8A8A14B7651524B7651524B7651524BA8A7
%A8A1A8A1A8A1CA7E54545428295378FD0554A2A8A8A1A8A1A8A1A8A1A8CA
%A8CAA8CAA8CAA8CAA176517651765276517652765176A1CAA8CAA8CAA8CA
%A8CAA1C29AC2BBC2BBC2BBC2BBC2BBC2A7CAA8CAA8CAA8CAA8CAFD05C8A7
%547F54A2C8C8C8C9A8CAA8CAA8CAA8CAA8CA767652765176527651765276
%51A7A8CAA8CAA8CAA8CAA8A8547F5353297F547E547F54557ECFA8CAA8CA
%A8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A17C4B524B7651764B764B767DCAA7
%A8A1A8A7A8A1A8A7A8A1C2BBBC99BCBBBC99BCBBC2A1A8A7A8A1A8A7A8A1
%A8A8A8A0C8C2C87D55545453C8C2C9A1A8A7A8A1A8A7A8A1A8A8A852524B
%524B7651524B5251A1A8A8A7A8A1A8A7A8A1A8A77E545328535478FD0554
%A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CAA8A176764B765176
%52A1A7CAA7CAA8CAA7CAA8CAA7CAA8A8A1C3BCBCBBBCBBBCBBC3A8A8A7CA
%A8CAA7CAA8CAA7CAA8A8A7C9C8A15479547EA0CAA8A8A7CAA8CAA7CAA8CA
%A7CAA8CA7D7C51764B76517676A8A8CAA7CAA8CAA7CAA8CAA7CAA8A85353
%53555479547E7ECAA8CAA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1A8A1
%A8A7A8A1A17CA17DA8A7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1C3A0
%C3A1A8A7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A17E7DA2A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A7A8A1A77DA17CA7A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A7A8A1A27EA27DA2A1A8A1A8A1A8A1A8A1A8A1A8A1A8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CFA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7A8A1CAA8CAA8FFA8CAA8CFA8A8A1
%A8A7A8A1A8A7A8A1A8A7A8A1CAA8CAA8FFCACFA8CFA8A8A1A8A7A8A1A8A7
%A8A1A8A7A8A1CAA8CFA8FFCACFA8CAA8A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%CAA8CFCAFFA8CAA8CAA8A8A1A8A7A8A1A8A7A8A1A8A7A8A7CAA8CFA8FFA8
%CAA8CAA7A8A1A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CAA8FFCAFF
%A8BC99C3A8FFCACAA7CAA8CAA7CAA8CAA7CAA8CAA8FFCAFF52277DFFA8FF
%CACAA7CAA8CAA7CAA8CAA7CAA8CAA8CFA8A87DA8A8FFA8FFA8CAA7CAA8CA
%A7CAA8CAA7CAA8CFA8FFA8A7A8FFCFFFA8FFA8A8A7CAA8CAA7CAA8CAA7CA
%A8CFA8FFA8A8A8FFCFFFA8FFA8A8A7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1
%A8A1A8A8CAA8CFA7C293BB99CAA8CFA8A8A1A8A1A8A1A8A1A8A1CAA8CAA8
%FF52F8F8F852FFA8CFA8A8A1A8A1A8A1A8A1A8A1CAA8CAA827FD04F87DFF
%A8CFA8A8A1A8A1A8A1A8A1A8A1CAA8CAA8F8F8F8277DA8CAA8CFA8A8A1A8
%A1A8A1A8A1A8A7CFA8CF52F8F8F827527DFFA8CFA7A8A1A8A1A8A1A8A1A8
%CAA8CAA8CAA8CAA8CACAFFA8FFCAC293BC99C3A8FFCAFFCACAA8CAA8CAA8
%CAA8CACAFFCAFF7DF8F827F87DCFFFCAFFA8CAA8CAA8CAA8CAA8CFCAFFA8
%FF7D9A27F8F827A8FFCAFFA8CAA8CAA8CAA8CAA8FFCAFFCAA1F84BF8F8F8
%7DCFFFCAFFA8CAA8CAA8CAA8CAA8FFCAFFA800FD06F852FFCAFFA8CAA8CA
%A8CAA8CAA8A1A8A7A8A1A8A7A8A8CFA8CAA8C393999AA1A8CFA8CFA8CAA8
%A8A7A8A1A8A7A8A8CFA8FF52F8F8F86F277DCFA8CFA8CAA8A8A7A8A1A8A7
%A8A8CFA8CAA8CAA076F8F8F852CACFA8CAA7A8A7A8A1A8A7CAA8CFA8FF51
%2675F8F8F852FFA8CFA8CAA1A8A7A8A1A8A7CAA8CFCAA1274B27FD05F87C
%FFA8CAA1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CFA8FFCACF9AC9CACAA8FF
%FFCFA8FFCACFA8CAA8CAA7CAA8CFA8FFCF52F8274BC24BA1CACFA8FFCACF
%A7CAA8CAA7CAA8FFA8FFCAFFA1A0C3764B4B76FFA8FFCACAA7CAA8CAA7CA
%CACFA8FFCFA14B9A994B4AA7CFCFA8FFCACAA7CAA8CAA7CACACFA8FFA876
%9AC9764BF8F8F852CAFFCACAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A8CAA8
%CFA8A176CAA7A1A7FFA8CAA8CAA8A8A1A8A1A8A1CAA8CAA8FFA14B75C26F
%9975CFA8CAA8CFA8A8A1A8A1A8A1CAA8CAA8CFA8C376C3C3A076CAA8CAA8
%CFA8A8A1A8A1A8A1CAA8CAA8FFA19A4B9ABC994BA8A8CAA8CFA8A8A1A8A1
%A8A7CFA8CAA8CA769AA0C39A27F8F8F8CAA8CAA7A8A1A8A1A8A1A8CAA8CA
%A8CAA8CAA8FFA8FFCAFFA1A1C3C39ACACAFFA8FFCAFFA8CAA8CAA8CAA8FF
%A8FFCACA9AC2BC9ABCCACAFFA8FFCAFFA8CAA8CAA8CACAFFA8FFCAFFC3C3
%C3C9A0CACAFFA8FFCAFFA8CAA8CAA8CACAFFA8FFA82799C29AC24BF852FF
%CAFFCACFA8CAA8CAA8CFCAFFA8FFCAC9A0C9A152F8F8F827A8FFCACAA8CA
%A8CAA8CAA8A7A8A1A8A7A8A1CAA8CAA8CFA8FFCAC39AA1A8FFA8CAA8CFA8
%CAA1A8A7A8A1CAA8CAA8CFA8CFA0BC9AC2A8CFA8CAA8CFA8A8A1A8A7A8A1
%CFA8CAA8FFCACF9A769AA17DCAA8FFA8CFA8A8A1A8A7A8A7CFA8CACA52F8
%204B9A4BF8F827A8CFA8CFA8A8A1A8A7A8A8CFA8CAA8CFC9A07676FD05F8
%A8A8CFA8A8A1A8A7A8A1A8CAA8CAA7CAA8A8A8FFCACFCAFFA8A8C39A76A8
%A8FFCACFA8FFA8A8A7CAA8A8A8FFCACFA8FFCFCA9975A0A9A8FFCACFA8FF
%A8A8A7CAA8CAA8FFCAFFA783587C9ACA7C2D2D587DCFCAFFA8CAA7CAA8CA
%A8FFCACAF826269ABC76F8F8F8FFCACFA8CFA8CAA7CAA8CAA8FFCAFFCAFF
%2D587C27F8F8F827A8FFA8CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A8CFCA
%A8512D2DA7A1CA52527DCFA8CAA8CAA1A8A1A8A1A8A8CAA8CA7E7E77A099
%A15454547EA8CFA8A8A1A8A1A8A1CAA8A8522D2D2D7CC9C27C2D512D2D2D
%A7A8A8A1A8A1A8A7CAA8FFA7759FC8C9C975F8F820A0CAA8CAA7A8A1A8A1
%A8A8CAA8FFA87D51582D582D2D04F8F8CAA8CAA1A8A1A8A1A8A1A8CAA8CA
%A8CAA8CAA8FFCFA82D5851582D582D582D587CFFCAFFA8CAA8CAA8CAA8FF
%CACB7E7F547F547F547F547F547EA8CFA8CAA8CAA8CAA8A851582D582DA0
%BBC275582D5851582DA8A8CAA8CAA8CAA8FFC9C8C8C8C2C8C2C84B2775C8
%C2CAA8CAA8CAA8CAA8CAA8FFA8582D5851582D5851582D52CAFFA8CAA8CA
%A8CAA8CAA8A1A8A7A8A1A8A7A8A8A82D2D2D582D512D582D512D2D7DFFA8
%A8A7A8A1A8A7A8A8CF785454785454547854545478547EA7A8A7A8A1A8A7
%A8522D2D512D5899BCBB7C2D512D582D58A1CAA7A8A1A8A7A8A0C8C1C8C1
%C8C1C8C1C8C2C8C1C8C1C9A1A8A7A8A1A8A7CA7D582D512D582D512D582D
%512DA8CAA8A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CA7C572D582D582D58
%2D582D582D58A8CAA7CAA8CAA7CAA8CA7E55547E547F547E547F547E5479
%7ECAA7CAA8CAA7CAA8A82D582D582DC2BBC275582D582D58A7CAA7CAA8CA
%A7CAA8C9C1C8C2C8C2C8C2C8C2C8C2C8C1C9A8A8A7CAA8CAA7CAA87C2D58
%2D582D582D582D582D5158CFA8CAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A7
%A8582D2D512D582D512D582D2D52A8A7A8A1A8A1A8A1A8A7A8FD0C547DCA
%A7A8A1A8A1A8A1A8A8A72D2D2D5199BCBB9A2D522D527DCAA1A8A1A8A1A8
%A1A8A7C9C1C8C1C89FC8C1C89FC8C1C8A1A8A1A8A1A8A1A8A1A8A1582D51
%2D512D582D512D512D7DA1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8
%CA7D582D582D582D582D587CCAA8CAA8CAA8CAA8CAA8CAA8CA7E7E547F54
%7F547F547EA2CAA8CAA8CAA8CAA8CAA8CAA8A8585851C2BBC275582D7CA7
%CAA8CAA8CAA8CAA8CAA8CAA8CAC8C8C1C8C2C8C1C8C2C9A8CAA8CAA8CAA8
%CAA8CAA8CAA88351582D582D582D5852A7A8CAA8CAA8CAA8CAA8CAA8A7A8
%A1A8A7A8A1A8A7A8A1CAA77D52585158527DA1CAA1A8A7A8A1A8A7A8A1A8
%A7A8A1CAA1A2547E547E78A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A7CA7D7C
%9AC2BCA058A8A8A8A1A8A7A8A1A8A7A8A1A8A7A8A1CAA1C9A0C8C2C8A0CA
%A8A8A1A8A7A8A1A8A7A8A1A8A7A8A8A87C585158527C7DA8A8A8A1A8A7A8
%A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA8CAA8CAA8CAA8CAA7
%CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8
%CAA7CAA8CAA7CAA8A8A7CAA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA8
%CAA8A8A7CAA8A8A8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA8CAA8CAA7CAA8
%CAA8CAA8CAA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1A8A7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8
%A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8
%A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8
%A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8
%A1A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8CAA8CAA8A8A7
%CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8A7CAA8CAA8CAA8A8A7CAA8CAA7CAA8
%CAA7CAA8CAA7CAA8A8A7CAA8CAA8CAA8A8A7CAA8CAA7CAA8CAA7CAA8CAA7
%CAA8A8A7CAA8CAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8A8A8CAA8
%CAA8CAA8CAA7CAA8CAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A1A8A1A8A7CA
%A8FFA8CFA8CAA8A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8CAA8CAA8CA
%A7A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A8CAA8CFA8CAA8CAA7A8A1A8A1A8
%A1A8A1A8A1A8A1A8A1A8A8CAA8CFA8CAA8CAA7A8A1A8A1A8A1A8A1A8A1A8
%A1A8A1CAA8CAA8CFA8CAA8CAA1A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8
%CAA8CAA8CAA8FFCAFFA7A1A1FFCAFFA8CAA8CAA8CAA8CAA8CAA8CAA8CACA
%FFCAFFCAFFA8CFCAFFA8CAA8CAA8CAA8CAA8CAA8CAA8CACAFFCAFFCAFFCA
%FFCAFFA8CAA8CAA8CAA8CAA8CAA8CAA8CFCAFFA8FFA8FFCAFFCAFFA8CAA8
%CAA8CAA8CAA8CAA8CAA8FFCAFFCAFFA8A9A8FFCACFA8CAA8CAA8CAA8CAA8
%CAA8A7A8A1A8A7A8A1A8A7A8A8CFA8CA76524B517DFFA8CAA8CAA7A8A1A8
%A7A8A1A8A7A8A8FFA8CFA8C99ABC99C2A1CFA8CAA7A8A1A8A7A8A1A8A7A8
%A8CFCAA852272752A8FFA8CAA8A8A7A8A1A8A7A8A1A8A7CAA8CFA8A87DA8
%7EA8A8CFA8CAA7A8A7A8A1A8A7A8A1A8A7CAA8CFA8A8FD04547ECFA8CAA7
%A8A7A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CAA8FFA8FF7D5251764B51A7FF
%CACFA8CAA8CAA7CAA8CAA7CACAFFA1C3A0C399BC99BC93C9CFFFA8CAA8CA
%A7CAA8CAA7CACACFA8FF27FD04F827A8FFCAFFA8CAA8CAA7CAA8CAA7CACA
%CFA8FFA1C29AA27EA8A8FFCACFA8CAA8CAA7CAA8CAA7CFCACFA27E545454
%7F547EA8FFCACFA7CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1CFA8CAA8A1
%5152F8279AA1A8CAA8CAA8A8A1A8A1A8A1A8A7FFA0BB93BB93BB93BB9A9A
%A1FFA8CAA7A8A1A8A1A8A1A8A8CFA8FFA1F82075F8F8F827A8CFA8CAA1A8
%A1A8A1A8A1A8A8CFA8CAA89A6F9A9A847ECAA8CAA8CAA1A8A1A8A1A8A1A8
%A8CAA8CA7E777628295454CAA8CAA8A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8
%CAA8FFCAFFA8FFA8764B279A9AA1FFCAFFA8FFA8CAA8CAA8CAA8FFCABC99
%BC99BC99C2999A76CACAFFCAFFA8CAA8CAA8CAA8FFCAFFA82720759A4B26
%4BF8A8CAFFCACFA8CAA8CAA8CAA8FFCAFFCAFF759A9AA87DA1CAFFCAFFCA
%CAA8CAA8CAA8CAA8FFCAFFCAFF76C24B27287DCAFFCAFFA8CAA8CAA8CAA8
%CAA8A1A8A7A8A1A8A7A8A8CFA8CAA8CF7675C3C376A1A8CFA8CAA8CAA7A8
%A1A8A7A8A8CA99BB99BC999A75C3A176A1FFA8CAA8CAA7A8A1A8A7CAA8CF
%CA52F8759A7599C26F277DFFA8CAA8A8A7A8A1A8A7CAA8CFA8CFA87D52A2
%7D769ACFA8CFA8CAA8A8A7A8A1A8A8CAA8CFA8CACA9A76C39A4B7CFFA8CF
%A8CAA7A8A7A8A1A8A7A8CAA7CAA8CAA7CAA8CFA8FFCACFA8CFC3C3A1C3C3
%FFA8FFCAFFA8CAA8CAA7CAA8FFA1BC99BC99C39A9AC37676CAA8FFCACFA8
%CAA8CAA7CAA8CFA8FF27F820C2759ABC75F8277DFFCACFA8CAA8CAA7CACA
%CFA8FFCACA7EA87EA8A0CACACFA8FFCACAA7CAA8CAA7CACACFA8FFCACAC2
%A0C2C3A0FFCACFA8FFCACAA7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A8CAA8CA
%A8CFA8CA9A9A9ACAA8CAA8CAA8CAA1A8A1A8A1CAA8BC93BB99BB99CAC3C3
%76C3CACAA8CAA8A8A1A8A1A8A1CAA8CFCA52F8F820C29A6FFD04F87DFFA8
%A8A1A8A1A8A1CAA8CAA8CFA8A8597D76CAA8FFA8CAA8CFA8A8A1A8A1A8A7
%CFA8CAA8CFA8C99A9AA0FFA8CFA8CAA8CFA8A8A1A8A1A8A1A8CAA8CAA8CA
%A8CAA8FFA8FFCAFF7D7E77C9A0A17EA8CAFFCAFFA8CAA8CAA8CAA8CA99BC
%99BC99BCA7A8C39AA1FFCAFFCAFFA8CAA8CAA8CACAFFA752F8F8F84C6F99
%4B27F8F8F852CFFFA8CAA8CAA8CACAFFA8FFCFCF7D7675C37C7DA1CACAFF
%CACFA8CAA8CAA8CFCAFFA8FFCACAA19A9AC3C3CACAFFA8FFCACAA8CAA8CA
%A8CAA8A7A8A1A8A7A8A1A8A8CAA8CA5328284D52A176292853A8FFA8CAA1
%A8A7A8A1CAA8BB93BC99BC762D2DA7A17D58A8A8CFA8A8A1A8A7A8A1CAA8
%27F8274D54547776785478292820CFA8A8A1A8A7A8A1CFA8CAA8A15176A1
%C37C524B5251A1A8FFA8A8A1A8A7A8A7CFA8CAA8C3BBBC76A19ABB99C2A8
%CFA8CFA8A8A1A8A7A8A1A8CAA8CAA7CAA8CAA7CFCAFF53292853282F282F
%28532853A8FFA8A8A7CAA8CAA8FFA1BB93BCC3A12D582D582D5158FFA8FF
%A8CAA7CAFD04A8F828547F547E547F547E547F54547ECFA8CAA7CAA8A8A8
%FFCAA14B765276517652765176517CA8CAA8CAA7CAA8CAA8FFCAC9BBC2BB
%BCBBC2BBC2BBC3CAFFA8CAA8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1FF7D28
%2853282928532829282F287DA8A8A1A8A1A8A1A8A8CFA1C2A0C3A0512D58
%2D512D51A1CFA7A8A1A8A1A8A1A87D53FD0E54A1A8A1A8A1A8A1A8A8A14B
%524B7651524B7651524B764B7DA7A8A1A8A1A8A1A8A8CA99BB99BC99BC99
%BC99BC99CAA8A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA85328532853
%285328532853525328CAA8CAA8CAA8CAA8CACAFFC9C9C3C3515851582D58
%2DA1CACAA8CAA8CAA8CAA8A8547F547F547E547F547E547F54557ECAA8CA
%A8CAA8CAA8CA5276517652765176527651765176A1CAA8CAA8CAA8CAA8FF
%C3BCBBC2BBC2BBC2BBC2BBC2C2FFA8CAA8CAA8CAA8CAA8A1A8A7A8A1A8A7
%A8A1A8532828532829285328292876287DA7A8A7A8A1A8A7A8A1CAA7FD04
%C3522D582D512D2D76CAA1A8A7A8A1A8A7A8A7A25454547854545478FD04
%547EA8A1A8A7A8A1A8A7A8A17D4B524B7651764B7651764B767DA8A1A8A7
%A8A1A8A7A8A7C2BBBC99BCBBBC99BCBBBCBBC2A7A8A1A8A7A8A1A8A7A8CA
%A7CAA8CAA7CAA8CAA8CA532928532853285328294CA8A8CAA7CAA8CAA7CA
%A8CAA8CAC3C3C3C951582D582D5152A8A8CAA7CAA8CAA7CAA8CAA7A85454
%547F547E547F54787ECAA8CAA7CAA8CAA7CAA8CAA8A15176517652765176
%51767DCAA8CAA7CAA8CAA7CAA8A8A1C2BBBCBBC2BBC2BBC2BBC2A1CAA8CA
%A7CAA8CAA7CAA8A1A8A1A8A1A8A1A8A1A8A1CA7D5328292828285353A8A7
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1C3A0522D2D2D587DA8A1A8A1A8A1A8A1
%A8A1A8A1A8A7A87E7EFD05547EA1A8A1A8A1A8A1A8A1A8A1A8A1A8A7A776
%764B524B52517DA1A8A1A8A1A8A1A8A1A8A1A8A1A8A1C39ABC99BCBBBC9A
%C3A7A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA1A2
%7DA8A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA1A7A1A8A8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8A8A2A8A2CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA7A8A1A8A1CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA7CAA1CAA7CAA8CAA8CAA8CAA8CAA8CAA8CAA8A7A8A1A8A7A8A1A8A7
%A8A1A8A7A8A7CAA8A8A7CAA7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1
%CAA8A8A7A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A7CAA7A8A1A8A7
%A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8A7A8A7CAA8A8A1A8A7A8A1A8A7A8A1
%A8A7A8A1A8A7A8A1A8A7A8A7A8A8A8A1A8A7A8A1A8A7A8A1A8A7A8A1A8CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CA
%A7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CAA8CAA7CA
%A8CAA7CAA8CAA7A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1A8A1
%A8FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFD7FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-13T14:57:44+03:00"
   xmp:ModifyDate="2021-12-13T14:57:44+03:00"
   xmp:MetadataDate="2021-12-13T14:57:44+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:754e5ff0-34fe-194e-8a5d-012112ee2186"
   xmpMM:InstanceID="xmp.iid:754e5ff0-34fe-194e-8a5d-012112ee2186"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2112.w037.n003.70A.p1.70</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="156"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7HlDluxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVwBJoBUno&#xA;BiqKj02dhViE9jucVte2lyAfC4J8DtitoSWKSJuLrQ4qtxV2KtqrMQqipPQDFVaW2S3hM95PHbQr&#xA;9qSRgqj5kkD8cVtuG1iuYFntLiO5havGSNgymhoaMtRitqMkbxtxccTiq3FXYq2iO7cVBJPYYqus&#xA;haXjzR295BNLbtwuI4pFkaNv5XCn4T88UWiX0yUCqsG9umKbQjo6NxYEEdjirWKuxVdHG8jcUHI4&#xA;qil0yUj4nC+w3xW2pNNmUVUh/bocVtCsrKSrChHUHFWsVdiq6KKSVuKLU4qi10uQj4nAPgN8VtRk&#xA;tQsphSWN5gKmIMOdPHjg4hdMuE1dbKBBBoRQjqDhYuxV2KuxV2KppY2wjQSMP3jCvyGKHj358eZv&#xA;zMttd03y35YnTTtN1ezdpdT+NJUlSULJxmSrJxV4wOA5fFglMRFlljwyyS4YvN/yz/Ojz35O82nQ&#xA;fO017qumTzfVnM5a4uIpmNEeGWRuToxIqvL7O677GYMZCw1zhPHIxkH1hNCkqFHG3Y+ByLJJpY2j&#xA;kZG6qaYpW4qm1nbCGMEj9432j4e2KHyP+b9z5m8/6t5n1KBppdM8r3j2lhYIV9IQWp9O6n4VDtIW&#xA;ZHrxNEJBIooyXEAQO9RhM4mQ6fgqf/OMHnHUtF/MOPy5NI66drSyRS2z1Cx3MSGSOQKejHgYz89+&#xA;mSkNmmBo0+wJ4EmjKt1/ZPgcrbkmdSrFW6g0OKWgCSAOp6Yqt82aXq83kzWrPRHMes3NlPHZyq3B&#xA;vWaMhOLn7Jr0PbrhDEvhbyx5o81eQvNK6jY87PVbJ2iubS5V1Vh0eG4iJRiPEbEHcUIrlpFuOCQ9&#xA;7/Kf87/zA1jzrpFt5nkgOieYFmjsVhhRSk0fLjup9QBmjI+Kta/dVY3A5hyOGQAkeUn0RdWyzR0/&#xA;bH2TgSk5BBoeo64pbRSzBV6k0GKpzBAkMYVev7R8Tih87fn1f/nVB5k1iDR76eDylHYRXo+q8IWW&#xA;GLiJx6ygS8/UVmYBvse2SEoirR4U5WRyCRfkh+enn3UPOug+WNXv1v8ASrn1bd3uFBuC3B3jZpz8&#xA;TsGULv1HvvkpRaoyNvqK8thNGSB+8X7J8fbK25KcUroo2kkVF6saYqiNbvH0jQ7m6tow8kKjiD0J&#xA;ZgvI08K1yrNMxgSHI0eEZcojI0C82fzd5mSf1GvpA+zcaLx33+zSn4ZqDqcl83qx2dpyK4Qm/lq0&#xA;GoeaINUW4ADq1zLG7r6okJdDGAKEio5dPs5fp48WQSvzcLXZPD05x15Dbatt/wAdWeX1sJEMij94&#xA;or8xm1eYSvFLsVdircY5OoPcgYqnuKGG+fNAa4lj1hp2aC2jWJ7NqemD6okWYdwwYAHx28MxNXAk&#xA;WHbdlZoiXCev4/Qwjy75KXX/AEbC8JtZ7CWK5eeNw0kvoBYklkU8qeqI6ceR+Hbl1GY+KJlLbk5+&#xA;rnHHjHEN7HxrqefOntIFAB1982bzSWamoE4Pior95xSFC3UNPGD0LCv34qjta1W10jR7/Vrvl9V0&#xA;63lu7jiKt6cCGR6Dx4rixL5i/LHz3oOoQ3jCeHT9bl1K8nNncwS3SS2mozRySqiw8C0ihOCn71+L&#xA;avNA35Ofoc0eGrqV+/Ypb+ffmrT7bVZbGwgurfWLn6rdyXZKQqixKfSdFVVm9UjYs5qq7ewdPE1a&#xA;O0ssb4QNzTJv+cdPzy17Utbh8neZ7lr83St+itRlNZlkjQuYZXP2wyqSrN8Vdt67Xyi62Euj3/UF&#xA;AuWp3AP4ZBuC2yUNdRg+NfuFcVTjFDxb81vyu0bWvN/6c1awjksZYoY2uhNNHIZUqqRkKfT4sD7N&#xA;Wm5zFz5ckOTtNDpsGUDiq/eb/sXeRfI9nceZ7GWW2e3sfL7tNpVuGUorfvAXBU14N6iUVtwVPY71&#xA;aaZMvfzcntLCI4+4A+kfO3s+Z7oknvFC3UgHjX7xXFK7TwDcrXsCfwxUptihhf5g2Nq0tpfXbW6Q&#xA;RJJbk3bhIOM44yhv5qxg0QkA/RlGW7dnojHhN1d9e4sa8ufk95OuNes/MVlaWcOm2ssd3Zw20Cox&#xA;uoH5xyicHkY60IRQEO3XbJYpSPNq1kMcdogfL9L1nLXBSW4ULPIB0DGn34pV9MUGcnwU0+/FS35l&#xA;svr/AJf1CxJZRdQSQsyGjBZF4sQR0IByEzQbdOAZgHq8wtLOdNI1H1rSOy1NzFE894E+ryzQwxxP&#xA;PBHCSwiovwr8JPgMw8nCefJ3+DjF8O0vv2Q+n3MVvrlvcRN6cMdwrBjXZA/f245r4SAmCOVu2zwM&#xA;sRidyY/oezxSxTRiSJ1kjYVV1IZSPYjN8CDyeFlEg0dikjji7AdiRhVrFXYq4EggjqMVR2q6/pml&#xA;aadQvpRHAB8I6szH9hF7tgJUB5P5i/NO81YTWS2aJpEwKSwlmE0iHbeQbL40oR2PIbZAybBGmERf&#xA;VLKVzpETWELb8EZeVaAGrRpED0/lwMkdaeZPMFm/O21G5jPgJXofmpND9ONooPYvL11q91otpcas&#xA;/qXsicmPEKeJJKVCgCvHrtlgaymUblHVx1Ug/dhQgfPGtae2k3Wjui3A1C3eC6RiQogmQo4JBBqy&#xA;scw9RqTE8Md5l2nZ/Z3ijjntjH2/sedaPoulaLGE0i1jsQF4kwLwZh/lMPibp3OawarIDd7+YB+9&#xA;6UaLEBQjQ8tvu5oi6tbW7jaO7hS4jeodJlEgIPWoata5CeecpcRO7bHBAR4aFMc0f8svLVh580Xz&#xA;Hp3+442V0stzboKwupBB4r+wRX9nb2zN0+vkPTPcd7pdf2LAjjxCpDp0P6nuV1IJJ3YdK0HyG2bV&#xA;5tbBJ6cyP2B3+WKphc6gkR4xgO3j2GazV9oxxnhjvL7nLwaQzFnYMZ836lH+h5BfRfWLV2VHgBVa&#xA;hturK/3EYOyjk1ufw5SoUTt5OTkMdNHjiLPLdKPy+utEsJry20e2e3jlCzSxuRxJX4fgQVCcajp1&#xA;8M2Ha2ly6GEZ3xiRo/o/S0Y80NTIjh4aD0O3uo5oy42p9oHtlWm1Uc0bHPucfNhOM0Upnk9SZ37E&#xA;7fLMlqXWkojuEY9Oh+R2xVAee/OcXluwURAS6jc1FtEeigdZG9h4d8BNJjG3kI84atLem71IrqbV&#xA;5Rx3VWjjYdGjjBCIfcDKJgy605OKfAbAC2884eYLi8F1HdPaOAAEtmeNaDxAO/04wjwjmuXIZmy9&#xA;F/L38xm1IjStYcfXgCbe5oAJQBUq1KDmB08fn1ujJx5RZM7F3Zz1Yk/fkmKtYyiO4WvRvhP04qUr&#xA;83eebfR+VpZhZ9Q/bDfYiHX4qdT7ff77TQ9mnL6pbQ+9pyZa5c3j+n+aTf3F4kNmkM10Wkvb8szy&#xA;y1flxBP2F5bhF+EdAMyNN2TA5jKXqhvUa2+N3bfLtEiHDEcMv517/opFLI69yfnvmbqextNljXAI&#xA;nvjt936UaftbUY5XxGXkd3on5ZT3It792r9TXgVr09TeoX6KV+jOQjpJ6fLLHLkOXm7btHU488IT&#xA;j9Ru/wAfcn5JJJPU5c6l2KuxV2Ksd85eVm160i9KYx3NtyMKsT6bcqVBHY7dRkSLZA08r1HQtX01&#xA;2W8tJIgv+7OJKH5OKqfvyFNgKGtrS6upPTtoXnk/kjUsfuFcCs58p/l5P60d9rKhI0IaOzNCWI6e&#xA;p2A9vvyYiwMno2TYOxVJtd0EXw9aAhLkU5V2DgHoffMeeAcXGPqo/cQHZ6PXmEfDl9Fj4b2fgxm4&#xA;sru3YieJkp3I2+g9M0c8co8w9Xi1EMguJBWRQTSmkUbOTtRQT+rBGJPIM55IxFyIDING8uuki3F4&#xA;KFd44eu/Yt/TNlptEQeKfyef7Q7WBBhj68z+r9bIs2bzzsVaIrmo13ZxmeOHPuc7T6rhHDLkxnz4&#xA;9NHRRuTOtR4Di2+Z3spglHVniBHoP3xR2lkBxCje/wCtIvJPrLrIdUYxNG6u4BIG3LenuM6T2nw+&#xA;JpaH1CQI+79Lr+zp8OSzyp6IpKg0JHIUPyzkNBoTiPFLn3Ow1OoE9hydm0cJ2KsK8+eTtQ1a5GpW&#xA;UhmnSNY2tnNPhWtPTJ279DkZBnEvN7qxvbRzHdQSQONqSKV/XlbNfY6Tqd+4WztZZyxpVFJUdt26&#xA;D6cNLb0zyZ5JXSKX19R9RYUVRusQPUA928T92TEWsyZdkmLsVef+d/KOpsl3e6VGbkzqxeBT+8Vm&#xA;ryZan4h3p19s3+k7TjwcE9iBQLjZMRuwwPy7p9xZpcC6ieC4L8WikUo4CjupoRuc2mloxsNBCf2d&#xA;heXsvpWsLzPUA8RUCv8AMeij3OW5c8MYuRpREnk9J8taVPpWmG1kl5tI/qyKPsqxAFB49M5XX6oZ&#xA;p2BsNnMxw4QmmYLY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FV8UMkr8UFT38BiqN+oQRRtJPJ8KAs7dFAG5OAmlAJNBKNL1zy&#xA;/qt49naNKsyglC4orgdSvX8aZRj1MJmg52o7Py4YcUqr7kdc2ckO/wBpP5h/HMhwVDFXYqqQwSTN&#xA;xQfMnoMVXanLo2jabPqer3aWtjbLznuJWCIo6feSaAdziglB+WNf8pebNMGpeXdQF5aFnjEih0YP&#xA;HTkGjlVHFOQ6juPHCQolaMuLWSA/Fup6MMCVHFXYqqwW0kzUUUA6segxVTvNR8r6byGpata2rIeL&#xA;+vcRQ0O2xDMKdcaRavYvomqQNPpd9DeRKeJlt5UmQMN6EoSK/TitrJ7aSFqMKg9GHQ4pUsVdiqtb&#xA;2sk522UdWOKtTXnlu1vVsLrUreK/ehS1knjSU16UjJDb4otGyaZER8DFT77jFbQM0EkLcXHyI6HF&#xA;KnirsVV7azkm3+yn8x/hiq+V9Etp0trm8ijuZKcIZJUR2rsKKSCa4otESaZGR+7YqffcYraAlhki&#xA;fi4oe3gcUrMVdirsVdiqcWsAhiAp8R3Y++KGJ+cZvMGoXR0rSLW4ZYQPrUsZKxsJV+FXbZVWla8j&#xA;TMDUmcjwRB8/i7zs2GLHDxchFnkOu3d5teSfJ9xa3q6jcPH8NuGgEbtIrsyAyEEolAiuKV3NfbJa&#xA;fScEuK2PaHafiQ4AK338vJmbKGBBFQdiMzXSpLcRelMydh0+RxSpgEkAdT0xVOoIVhiCDr+0fE4o&#xA;fHv53/mB5t8++ZX8vWmnzW+k6RdXEEVtHzcTSwytCbiUhQBTjQD9nfffJ8UYjcsPDnM0Azn/AJx4&#xA;8hQeW/zG1sy3P1kxWQh0+VaBX9R0ecMAftxgJt4NXbKYZxOPm5Oo0ZwzI5x730Y6K6lWFVOxGTaU&#xA;kljMcjIf2TTFLSIXcKOrGg+nFU7ijWOMIvQYoeKfnN+WXlfX9fvLt7SuuXem/uJ1llT99AfTRzGi&#xA;OHoJED1PQKKd8rllMS5eDSxnEk8+jyP8nIvzN8iefLZRo9wlnqFzDp2pW04ZI3SWdYhMn8wjZvhl&#xA;UFRWlfiy/jieRcLwMkOYp9jyxLLGUbocgySR1KOVPVTQ/RiluGMySKg/aOKp2iKihVFFGwGKHx3+&#xA;ZnlDW/MXm/zhqUtu7a2dSKaZAOSmSztGNrVRx4tVBEa1FPpyEs4jIA8urkY9EcmMyH1dPdyP6Gaf&#xA;84tz/mFBr9/peuG/XQ49PLWtvfGXhFLHOiIIUl+wCrPXjStPbLDOJ5Fx/AyQ3kCB5vo2eFZoih6/&#xA;snwOBUlIIJB6jrilUt4vVmVOx6/IYqmty7wWkrwpzeKNmjj6VKioX6cUAW+Itb/Kbz3qcd75iNzF&#xA;rFxKq3d2UaUzvLM7I8aq6DlJHIjKyVqCKUrthGeN02S0OSuIbpd5f/Mf8y/IesxiPULqMw+m8ul3&#xA;btLbyRsAygxsStGQ7MtDTocs2LiHiiaL7a0LWLPzP5Y07W7QcYtQt47mJSalC6glCdt1PwnKi3Aq&#xA;WLJ2KuxVdHT1Fr0qK/fiqeYoYzr2nRwav+m4Lqb69HCI1sY5eIcKeQYRsyrzB6NtTxplGUdXY6LM&#xA;D6COh+PwQvkrVzf6lqEr3F+J2KpJFqEb25ZRUokKlI1kjj5N8Q5UrStKYcZJO5RqzjjHhA38x9zM&#xA;Mudelmp09dfHiK/ecUhQtqfWI6/zD9eKp1ih515u8oabpdxf+YlloL1/9JWWpii5CpcLXiAWFXO3&#xA;udtsDU4jzDvezdVE+kijXPp8vvUvytsdBIbVFuLee4heZIbqJgI2kun9W49P4mqvLiOppSlajLNL&#xA;ikSTRau0s0RERiQbsk+89Pi9KzLdOlWo0+sn5CuKQtsqfWo6+J/UcVTWWWKKNpJXWONRVnYgKB7k&#xA;4sSWA+b9a0Ke8t57BpdWvlIi9DTJEMqoWDsWcyRIIy0SBvi8B0JzHyCzduw0OqifQLMvJDW2teWt&#xA;K8wR6hrkaWmpPbIsZEBllRCzmjzpy5L/AJCrQNU1bbBiIHNh2lrIxlwHbbf9TPNL1rSdVhM2nXUd&#xA;yg+1wO61/mX7S/SMyAQXBjMS5FCXtPrUlPEfqws1+nU+sj5GmKlDeffNcHlLyfqvmKZBINPhLxxE&#xA;0DyuRHEhPYNI6jCBbEmg+cfInnXzD5tiN1q9jqF3qkN16/6UtTFBE8UjFxDI8jRfulK09NOXwgbZ&#xA;g6qIEibG/R3fZeYygI8MrieYoee/kxbV/wA3fMGi/mYb61WK3j0q+9O7ig5VuUhrDJHK7H4xx5qu&#xA;ygVrSuZOmwgRB7w67tHVynkMdgAfu2fauWOMktzT6xJT+Y/rxSr6ZT128eO33jFSmTKGUqehBH34&#xA;CoNG3lGrXUWn6vqWg6fYz3N4yt6kIBNqDMDcOyxxEys0jTkuQvXqwzFMDbs5dpYRY69z4+8x6/d6&#xA;9q0up3UUFu8gREt7WP0oI0jQIiRpU8VVV8c2EY0KdLlyGcrL7Q/5xyd3/Jjy6XNSBdqCfBb2cAfQ&#xA;BkJc2cOTLZKeo1OlTT78i2LcVdirsVY7+Ynn250q2i0/Tqx39ynOW4I2jSpX4K/tEj6PnlWSdbOJ&#xA;qcxjsObye01bU7S9+vW11JHeEktOGPJq9eRP2ge4PXKbdfGcomwd0VqnmjXdUWNb265pE3ONUSOI&#xA;BgKcqRKm/vjbZl1GTJ9RJp6J+WPny6vZv0Jqsplm4lrO5c/EwQVaNz3IXcH55bjn0Lk6bOT6SzG6&#xA;m9WdnH2ei/IZc5ykpKsCOoNRiqC84+cTpNpDHZ8TfXIJBbcRqNixHjXpmz7O0IzEmX0j7WnLPhea&#xA;za5q81wbie6eaXcVko4APgrVUfQM3+Ts/BOHAYjh+X3btWPUThLiiaKhdX11dFTO/Lh9lQAqivX4&#xA;VAGHS6HDpwRjjw38ftK59Rkym5m068peZtU0zUIYIi9xaysEe0rUbmlUr9kj/byrXaTHkgSdiOv6&#xA;2OOZBejzyerKz+J2+XbORc1qNyjq46qa4q8g8/eY9b1PWZ7a+5W9vauVhswTwAHRz/MWG/L7sxpy&#xA;JLqdRkkZUVHyZdXdreXEtvK0RMYRuJ6gsDv/AMDmHqchiBTvvZnBGeWZkLqP3n9ij5vuJ7jVVmnk&#xA;aWVol5O5LHZmA3OOmkZRs97X7S44w1EREUOAffJCeXpNXTWLYaRI8V87BY3Q069eXitPtV2pmVG7&#xA;2dDj4uIcPN7oWkb4pDyc/aIFAT32zLd0F8EnpSq/gd/l3xVCa3LDqkL2V3bxzWTMpa3lVZFYxsHQ&#xA;sGBHwsoYe+czrO0MkpGI9IHzdzp9JAAE+oqMbtGnBDxTb4B9n4em3TbMCGWUeRpzDEF5Xr/5AeX9&#xA;b86S+ZLvULhorqYXN5p7BWEj9WHqk8gjEbih9j4bKHa+SOPhrfvcCfZsJT4r27nsljqlwjcJKypT&#xA;v1H05Ps7W5DMQPqH3Lq9NARMhsVrEsxJ6k1OdA6lVtZvSnVz9no3yOKvO/PP5m3813LpuiyNa20T&#xA;GOW5AKyuw2PGu6LX6conk7nXZ9SbqLzySWWV2kkdndvtOxJJ+ZOVOHaWat5f0jVYmjvbZJGIoJQA&#xA;JF91cb5KMyOTKMyOT3L8mV0/S/y1sNLtZTI2mtPFIG2bnLM8wrueokrmSJ8W7tMExKLI8Le7FXYq&#xA;7FUt13QNP1qz+r3a7rvFMuzo3iD+sZGUQWvLiExRecaj+W3mG3mItFS9h6q6MqNT/KVyN/kTlJxl&#xA;189JMct0Pbfl95qmkCtaiBe8ksicR9Clm/DAMZYjSzPRnPlXyLZ6LILud/rN/SivSiR1FDwB7+5y&#xA;2GOnNw6YQ3O5ZRljkuxVLda0Gy1aELMOEqf3Uy/aX29x7Zl6TWTwnbl3MJ4xJh9/5J1eFwLaNbiM&#xA;AAsrAEnuSHI/DN5p+1cZB4zRv8cmieE9FC38ma/K4DwrCvd5HWn3KWOWz7VwRHO/cGIwyZdoPlez&#xA;0r96T692RQykUC16hB2+eaPWdoyzbco9363Ix4hH3p3mvbHYqkXmbylp+uxKZD6F3GKRXKipp/Kw&#xA;25LkJQBac2AT97F9L8ka1pr3AZUnVyvB42G4FezcSOua7VaecqoW7jsCePTcfiSoyrv6X+tT1PyL&#xA;ruo3kRVUgiC0eSRhtv2C8j3yelwTiKIpo7eMdRljLGbAjX2ss8s+UtP0KImM+tdyCktywoafyqN+&#xA;IzOjAB12HAIe9Pcm3OxVTkhV/Y+Oa/V9nxzb8pOXp9VLHtzCgbeQHah+n+uaWfZmaPS3Yx1uM9ab&#xA;FtIetBksfZeaXMUieuxjlurxxqgoOvc5vdJo44Rtue91mfUSyHfkvzLcd2KsW80+RLPWXN3buLW/&#xA;I+J6VSSnTmB3/wArK5Y7cbNphPcbFg1z+X3mqGQqtqJ17SRyIQfoYq34ZUcZcI6WY6IrTfy08wXL&#xA;j63wsov2izB3p7KhI+8jCMRZw0kzz2ejaFoNhotn9WtFPxHlLK27O3if4DLoxAc/FiEBQTLJNjsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVV7W1advBB1b+AxVLfNXm/RPK8aRyRG5vpV5RW6kA8enJ2NeIJ9vowE0kC0D5R/MfTfM&#xA;F39Qu7VbO8evoLy5pJQVIBotG9sAlamNMoutPFC8Pbqn9Mki0BirsVRFpZtMeR+GMd/H5YqrzXmj&#xA;2VtJcSSxrFD/AHjVDEe21TX2yEskQLJbceCc5CIBssfb8xPLzycGtpzH09Tgn305VzF/PwvkXZ/y&#xA;JmrnG/j+pOmt4praO7tCWhlRZFBrXiwqDv7HMyJBFh1M4mMjE8whsLF2Koq0sjL8b7R9vE4qxvz1&#xA;+bP5feQ5I7bWbo/X5UEkdjbxmacoTTk3RVG23JhXthEbYGQC3yL+bv5fee5pLTR7krqCKXNhdR+j&#xA;OUHVk3KsB34sad8TGlEgWUXdj6YMke6dx3GBnaDxV2Koy0sfUAkk2Q9B3OK2oajrdjptyLb0QzcQ&#xA;xIIHX55OMYnmQCvBMixEkK1pqmlX5EYHGZq0RhQ7CuzDb8clPERv0YCTV3ZGH403j7+IypmhcVdi&#xA;qMt7JBGZrg8YwORBNAAN6se2IFqSletedvL+koggKXsziqpbsrADxZxUDNhpuzcmXn6R5tUsoDXl&#xA;3zbpXmCd7X6sbe5VS4ViCCAafCwpvv4Y6zs6WEcV2Fhl4kxu7NoDyHxRnofD55r21D4q7FXYq7FU&#xA;7giEUSoOw3+ffFDzD849Av5Xt9SsbYy8lMdxIkckzK4IEZZIlklKfESeCnoTlUxvbfhiZbBi/kvy&#xA;dqPlrV9O/SN3Bq2t3V7Hc3Eip8VvbIkwb0OVG9Pl6amlN237ZDxLNjYOcNJwxo0ZH7Of7HvWZDqk&#xA;pv4hHcGnRhyGKQoKpZgo6k0GKpJ+Yuo3NrBaafbyGOGVWaYKaFgpAANO3X55r9dkIoDq73sTBGRl&#xA;MiyOTA44ZJPsqeNQpeh4gmtKn6DmtjEnk9FKYjzbZJRoz6ratDd2M9lcTQvEQ8heMoY+Ar/rl/hJ&#xA;FKUrtmZi029SdbqNaTEHHyq3temqF061T+WJF+5QM2kPpDy2e/ElfeUvu4hHcMo+z1H05JrU4k5y&#xA;Kn8xAxVGa9rNloGg3+sXdRaabbyXMqr9orEhbivuaUGIYkvkvTbU+ftf1X8wNdt454rpTy01FcrG&#xA;io1uojkb4WkRIl+VeVBtlGozGPpGxdhoNIJg5Jbju/HVI9Z/LTXPJTDX7PU3iuLF2uLOaKNvgMUl&#xA;E9SYEIhdSOIoan4aZLFqxM1TDU9lywxMr+z7y+09H1O01bSbXULWeK5t7qJXWaBg8bchvxYFgd/f&#xA;LXCCCuI/TmdOwO3yO4xZOt4/UmRD0J3+Q3xVOgABQdMUPKvNMOoT+dbg+q8dnKIRAEj5fHAH9USO&#xA;FPBSAlCx3rQb5Xk0c57inZaTX48UalfTl8f2Jx5VuZW8zLZG0kEUEBkF5VfTLkcSgFeWwPUj5d8v&#xA;nm4axdwDizwcYOboZH7/AHs8ZQylSKg7EZBx0kkQpIyH9kkYpVLOISXCqfsjc/RiqbuiOjI6hkYF&#xA;WUioIOxBBwg0h4l5x8sQrrWo6VpMyaRLMYJNMuSOY5cZDNEqODzoY6sAdlYdMul2xqBO+K6c/D2f&#xA;CeOuUpbg/NW/KOx82J5peLV4oHFhFIbi9thMkLM1FREEyJzrUksvwilNzWmVm7XOfHwEOFk0UsJ3&#xA;L2aRFkRkbowpmuYpGwKsVPUGhxS7FXYq2powPgcVTme4gt4JLieRYoIlMkkrGiqqipYk9gMIF7BD&#xA;yvWPz50cXDW1hpsl1bcuLXUriMUrQssfFyfEVIzPHZ0jHc7tcNQIyBQK/mHpNhdR6lHqX6QsAatp&#xA;LRAXFTsCktUoqdaOpJ/mzX4NBkM6lEjz6O41WsjwEwmD5dXoPlD8wfL3mr1Y9PaSK6hUPJazgLJx&#xA;rTkvEsGWvgfnl+bTSx8+TqIzEkz1Qj1UHcLv9JyhsCGhIE0ZPQMCfvxVgXnqWZ/M10Ja0jCLED2T&#xA;gDt9JJzS6wnxC9h2TEDTxrrf3pbpuoR6U66jdwPPp3L0p1SlWLAlaVK7hgDUHbBpo3K+jV2zqxhw&#xA;3vxXtSYXeo+X9Vaw1JZtPFrZTrcSWN8nO6hYGrNbuzJ+8414kK2/cZsAB8HQR7UxyxiRI4x0I6+T&#xA;0rQtX0rVNPjuNMmE1sPg7hlIH2WB3BzJjVbOD4viervU9RINzTwAB/XkmQUrQgXMZPjT78VeN/n1&#xA;+cbJdah+W+haUNU1C8tzb6jM/IrEZ4wwWJUILOqsG5FuKnqDvS3FiMjQ3LTOdbPM/wAvvJfmjy7N&#xA;cT3bWxtb2Aw3GnSc5kapBHqcAadCOS8qV6UzL1XY+UwuvUOg5/qcjs/VjHM39Mh15Irz/wCTfMXm&#xA;ZrI2dza29nY24hi09RLDCjA/7rqtSOIValV6dKY6PsbKIEnaRPXmy7R1gySAifTEdOTIP+cbJvOf&#xA;lfzpJ5X1SGUaNqsMskIr6kKXUK8w6spKqXjVgRsTt4ZXqdLkx/UHDxy3fRF8Qbp6dqD8Mw3IDdgQ&#xA;LpK96j8MVKN1LUrHTbOS8vplgtohV5G/AADck+AxQA8u1jzcmtXxn0ae002BGIuZdSJZ5AAOLRQo&#xA;8dPf4j8vGQ1UoigLbIaeEj6pcPwtuy/M600SX6pDCNUg6y3y1hdmPUKGX4lG1Kqv8cpE5E3LmW3M&#xA;InaFiI72f+XPN+h+YIybCYidByltZBxlUeNNwR7gnJg245FN3RBuJCP5j+GFVXTSBcU8VIH68VKO&#xA;vLy3s7d7i4cJEgqzH9Q98hOYiLPJnixSySEYiyXmXmnXjfajHLYS/UYSrC4JtXuJ5OnExurelEdt&#xA;+atXMEZYZLPL3kD7HoYaXLhiIk37ok/by+af6D5x0u2s4oJraWFujykIxO/V+J8PnjDWQjt9oatR&#xA;2VmyHiB+B/BDMo5EljWSNg0bgMjDoQdwc2ANiw6CUTE0eYSWYgzOR0LEj78KrcVdirsVYP8AnRrW&#xA;px+V7Wwt43FtcS0vbhfshY6GONv9dt/9jmf2fEGZJ5hpzk08PzcuK7FU+8oLrcOuabd6GC+oeswR&#xA;Oi0QLz5kfsFXo3tmNmnE8UZcqH23+puECAJDqT9lfrfRssrSyGRhQnsN6ZoHKWYqp6zp2i6nZ+tf&#xA;RcrqIcEkUlXPhuOo+eY+oxQkLIdh2fnyxlwwO3Vh3nO2hj8qXEcahEhMRRQP+LFH8cxoCm/tn1ae&#xA;RPl94eX5a8Wz38odVmtdZurXdraeHm6joGjYBT/wxyeMm3P0FEyB7relSO0js7dWNcyXOWgkGo6j&#xA;FXlfmvy3b2Xm7U9bFvxuNXZJHuT8VRHEkfFTT4R8FSP7M6fsgY/DuP1dfx3OHmBtLs2zU7FUy0DT&#xA;b2/1GNLVmiMZDvcKSDGAeoI7+GYus1EMUCZb+XezhEk7PU6k9SWPcnqc4wuc2rFWDDYg1GKvMfzV&#xA;1bVbvW0t50aHT4VBtEr8Dkj45Pc1PH2GVybIBhGRZOxVkfkLTdTutft7mzd4EtGEk9wvQKP2PAl+&#xA;lPDJRCJF7CTXfLGpdHI0ciuvVTXFWP8AnfVXuLmK0SqwRKJDUU5Ow/HiNvvzUdoZCZcPQPT9h6cC&#xA;BydTt7vx+pjGa93rsVZt5R1aY6TLbOCTC3GFz04tvSv+T/HNxoMhMaPR5TtvBGOUSH8XNH5numdi&#xA;rsVdiqncW8FzA8FxGssMoKyRuAysp6gg4QSDYUhgWsfk1oV1K0un3MmnljUx09aMf6oJVh/wWZ2P&#xA;tCQ5i2mWAdEtt/yPQODcauWSvxLHBQkezFzT7ssPaXdH7WIwebO/LnlTRvL9sYdPiIZv72eQ8pH+&#xA;Z2HboABmDlzSyGy3xjQoJxlSXYq0QCKHceGAi2UZGJsJTr2gDVdNmskm+rrNxq/HnTi4bpyX+XKT&#xA;gF7N2o1MsuIwPXr8bYxa/lRbq4N3qDyJ3SKMIf8AgmL/AKsIxOpjoh1LMNJ0XTNJg9CxgESnd26s&#xA;xHdmO5ywRAcyGMRFBHZJk7FVG7s7a7haC5jWWJuqt+seGWY8soG4miggHmxm7/L+zdi1rcvCDvwd&#xA;RIPkDVTm3x9tSA9Ub+xpOnHQtWv5fWysDc3byr/IihPxJbDk7bkR6Y19qBp+8slsrC0sYBBaxCKM&#xA;dh1J8SepOajNmnklcjZb4xA5IjKkuxVCanpWn6nbG2voRNEdwDsQfFWG4PywEJBYbd/lRaMxNpfv&#xA;Ev8AJKgk/wCGUp+rI8DLjVLH8qtPjcNe3klwoNfTjURA+xNXP3Ux4V4mY2NhZ2NsttZxLDAn2UUf&#xA;ifE+5ybFEYodiqhd2Vtdx+nOgcDoehHyIyvJijMVIORp9TPEbgaSaXylEWrFcFV8GUN+IK5gS7OH&#xA;Qu4h28f4o/Iqlt5UtEYGeVpqfsgcB9PU/jk4dnxHM215e3MhFRAj9qcxRRxRiONQiLsFAoBmdGIA&#xA;oOmnOUzcjZX5Jg7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FWc/7hf8Al2/5J5ds43qd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb&#xA;/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J&#xA;47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy&#xA;+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd&#xA;/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7h&#xA;f+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p3+4X/l&#xA;2/5J47L6nf7hf+Xb/knjsvqd/uF/5dv+SeOy+p//2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:4a6e14c8-973d-be46-b06d-4f2755db1090"
    stRef:documentID="xmp.did:4a6e14c8-973d-be46-b06d-4f2755db1090"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:4a6e14c8-973d-be46-b06d-4f2755db1090"
      stEvt:when="2021-12-13T14:57:41+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:754e5ff0-34fe-194e-8a5d-012112ee2186"
      stEvt:when="2021-12-13T14:57:44+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="671.080483"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
671.081 400 li
671.081 0 li
cp
clp
671.08 400 mo
-7.36225e-06 400 li
-7.36225e-06 0 li
671.08 0 li
671.08 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.847059 .772549 .74902 rgb
f
133.786 79.0498 mo
133.786 83.1899 133.246 87.21 132.226 91.0298 cv
126.946 110.98 108.775 125.67 87.1655 125.67 cv
72.6255 125.67 59.6455 119.02 51.0957 108.6 cv
44.5054 100.55 40.5454 90.2598 40.5454 79.0498 cv
40.5454 53.2998 61.4155 32.4302 87.1655 32.4302 cv
112.916 32.4302 133.786 53.2998 133.786 79.0498 cv
cp
.929412 .866667 .839216 rgb
f
257.966 79.0498 mo
257.966 87.5601 255.686 95.54 251.696 102.41 cv
251.545 102.67 251.386 102.93 251.226 103.19 cv
250.855 103.81 250.466 104.43 250.056 105.03 cv
249.886 105.28 249.716 105.53 249.525 105.78 cv
243.446 114.49 234.446 120.99 223.966 123.94 cv
223.746 124 223.516 124.06 223.295 124.12 cv
219.486 125.13 215.476 125.67 211.346 125.67 cv
195.236 125.67 181.025 117.5 172.676 105.07 cv
171.886 103.92 171.156 102.72 170.486 101.5 cv
166.815 94.8398 164.726 87.1899 164.726 79.0498 cv
164.726 53.2998 185.596 32.4302 211.346 32.4302 cv
237.096 32.4302 257.966 53.2998 257.966 79.0498 cv
cp
f
382.146 79.0498 mo
382.146 90.5 378.016 100.99 371.176 109.1 cv
370.315 110.12 369.405 111.11 368.466 112.05 cv
366.945 113.57 365.315 114.99 363.586 116.28 cv
362.746 116.92 361.876 117.53 360.985 118.11 cv
360.886 118.18 360.785 118.24 360.676 118.3 cv
359.416 119.12 358.105 119.88 356.756 120.56 cv
356.445 120.72 356.136 120.88 355.815 121.03 cv
354.365 121.73 352.876 122.36 351.355 122.91 cv
349.336 123.64 347.256 124.24 345.115 124.68 cv
342.016 125.33 338.815 125.67 335.525 125.67 cv
334.116 125.67 332.716 125.61 331.335 125.48 cv
329.896 125.35 328.476 125.16 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
322.545 123.89 320.396 123.21 318.315 122.37 cv
316.466 121.64 314.676 120.79 312.946 119.83 cv
312.746 119.72 312.545 119.61 312.355 119.49 cv
311.176 118.83 310.036 118.12 308.936 117.34 cv
307.986 116.69 307.056 115.99 306.156 115.25 cv
306.045 115.17 305.946 115.09 305.835 115 cv
304.565 113.94 303.346 112.82 302.186 111.64 cv
301.855 111.31 301.536 110.97 301.226 110.63 cv
300.335 109.67 299.486 108.67 298.686 107.64 cv
297.896 106.62 297.146 105.57 296.446 104.49 cv
291.676 97.1699 288.896 88.4399 288.896 79.0498 cv
288.896 53.2998 309.775 32.4302 335.525 32.4302 cv
361.275 32.4302 382.146 53.2998 382.146 79.0498 cv
cp
f
506.325 79.0498 mo
506.325 88.2598 503.655 96.8501 499.035 104.09 cv
495.706 109.31 491.365 113.82 486.285 117.35 cv
483.565 119.24 480.636 120.85 477.535 122.14 cv
472.046 124.41 466.025 125.67 459.706 125.67 cv
459.346 125.67 458.976 125.67 458.605 125.66 cv
447.386 125.4 437.146 121.18 429.235 114.34 cv
427.855 113.15 426.556 111.88 425.325 110.54 cv
417.716 102.25 413.075 91.1899 413.075 79.0498 cv
413.075 53.2998 433.956 32.4302 459.706 32.4302 cv
485.445 32.4302 506.325 53.2998 506.325 79.0498 cv
cp
f
630.504 79.0513 mo
630.504 104.8 609.63 125.673 583.882 125.673 cv
558.133 125.673 537.26 104.8 537.26 79.0513 cv
537.26 53.3027 558.133 32.4292 583.882 32.4292 cv
609.63 32.4292 630.504 53.3027 630.504 79.0513 cv
cp
f
133.786 200.09 mo
133.786 204.96 133.045 209.66 131.656 214.07 cv
129.536 220.81 125.936 226.89 121.226 231.92 cv
121.125 232.04 121.025 232.15 120.916 232.26 cv
120.775 232.41 120.625 232.56 120.486 232.7 cv
112.025 241.34 100.226 246.71 87.1655 246.71 cv
85.1455 246.71 83.1357 246.58 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
76.3354 245.7 71.7554 244.35 67.5254 242.38 cv
67.1758 242.22 66.8257 242.05 66.4756 241.88 cv
59.5854 238.47 53.6655 233.39 49.2353 227.18 cv
48.8555 226.64 48.4756 226.1 48.1157 225.54 cv
47.2158 224.18 46.3955 222.77 45.6558 221.32 cv
42.3857 214.95 40.5454 207.74 40.5454 200.09 cv
40.5454 174.34 61.4155 153.47 87.1655 153.47 cv
112.916 153.47 133.786 174.34 133.786 200.09 cv
cp
f
257.966 200.09 mo
257.966 208.99 255.466 217.31 251.146 224.39 cv
242.956 237.78 228.196 246.71 211.346 246.71 cv
197.295 246.71 184.696 240.49 176.156 230.66 cv
169.036 222.48 164.726 211.78 164.726 200.09 cv
164.726 174.34 185.596 153.47 211.346 153.47 cv
237.096 153.47 257.966 174.34 257.966 200.09 cv
cp
f
382.146 200.09 mo
382.146 206.35 380.916 212.32 378.676 217.77 cv
373.266 230.96 361.976 241.13 348.065 245 cv
347.115 245.27 346.146 245.51 345.166 245.71 cv
342.056 246.37 338.825 246.71 335.525 246.71 cv
333.875 246.71 332.246 246.63 330.636 246.46 cv
329.585 246.35 328.545 246.2 327.516 246.02 cv
326.156 245.78 324.826 245.49 323.505 245.14 cv
321.726 244.67 319.976 244.09 318.286 243.41 cv
314.375 241.86 310.726 239.79 307.416 237.29 cv
302.146 233.31 297.755 228.23 294.576 222.4 cv
290.956 215.77 288.896 208.17 288.896 200.09 cv
288.896 174.34 309.775 153.47 335.525 153.47 cv
361.275 153.47 382.146 174.34 382.146 200.09 cv
cp
f
506.325 200.09 mo
506.325 208.46 504.115 216.32 500.246 223.12 cv
497.525 227.9 493.976 232.16 489.796 235.69 cv
485.365 239.44 480.226 242.38 474.605 244.28 cv
469.926 245.85 464.916 246.71 459.706 246.71 cv
445.896 246.71 433.476 240.7 424.945 231.16 cv
424.436 230.6 423.945 230.02 423.466 229.43 cv
422.086 227.73 420.825 225.93 419.695 224.05 cv
415.496 217.04 413.075 208.85 413.075 200.09 cv
413.075 174.34 433.956 153.47 459.706 153.47 cv
485.445 153.47 506.325 174.34 506.325 200.09 cv
cp
f
630.506 200.09 mo
630.506 212.44 625.706 223.67 617.855 232.01 cv
609.355 241.06 597.275 246.71 583.886 246.71 cv
568.466 246.71 554.796 239.23 546.315 227.7 cv
540.615 219.97 537.256 210.42 537.256 200.09 cv
537.256 174.34 558.136 153.47 583.886 153.47 cv
609.626 153.47 630.506 174.34 630.506 200.09 cv
cp
f
134.516 320.46 mo
134.516 330.37 131.426 339.56 126.146 347.11 cv
123.236 351.3 119.636 354.99 115.525 358 cv
115.505 358.03 115.476 358.04 115.456 358.06 cv
115.186 358.26 114.916 358.46 114.636 358.64 cv
109.576 362.2 103.775 364.77 97.5156 366.08 cv
94.4155 366.74 91.1958 367.08 87.8955 367.08 cv
80.3257 367.08 73.1855 365.28 66.8657 362.07 cv
63.2158 360.23 59.8457 357.92 56.8257 355.22 cv
55.2056 353.76 53.6758 352.2 52.2656 350.53 cv
49.9556 347.8 47.9556 344.81 46.3154 341.6 cv
43.0854 335.25 41.2656 328.07 41.2656 320.46 cv
41.2656 294.71 62.1455 273.83 87.8955 273.83 cv
113.636 273.83 134.516 294.71 134.516 320.46 cv
cp
f
258.696 320.46 mo
258.696 331.66 254.746 341.93 248.166 349.97 cv
246.966 351.44 245.676 352.83 244.306 354.14 cv
241.576 356.76 238.536 359.04 235.226 360.93 cv
228.406 364.84 220.505 367.08 212.076 367.08 cv
209.275 367.08 206.536 366.83 203.875 366.36 cv
201.766 365.99 199.706 365.47 197.706 364.81 cv
191.545 362.83 185.946 359.59 181.206 355.39 cv
171.536 346.86 165.446 334.37 165.446 320.46 cv
165.446 294.71 186.326 273.83 212.076 273.83 cv
237.815 273.83 258.696 294.71 258.696 320.46 cv
cp
f
382.876 320.46 mo
382.876 327.54 381.296 334.24 378.476 340.25 cv
371.035 356.1 354.926 367.08 336.255 367.08 cv
320.206 367.08 306.056 358.98 297.666 346.64 cv
292.596 339.18 289.625 330.17 289.625 320.46 cv
289.625 294.71 310.505 273.83 336.255 273.83 cv
361.996 273.83 382.876 294.71 382.876 320.46 cv
cp
f
507.056 320.46 mo
507.056 328.34 505.105 335.76 501.646 342.27 cv
493.825 357.03 478.296 367.08 460.426 367.08 cv
454.716 367.08 449.256 366.05 444.206 364.17 cv
441.655 363.23 439.216 362.07 436.896 360.7 cv
431.806 357.73 427.336 353.82 423.726 349.21 cv
417.506 341.29 413.806 331.31 413.806 320.46 cv
413.806 294.71 434.686 273.83 460.426 273.83 cv
486.176 273.83 507.056 294.71 507.056 320.46 cv
cp
f
631.235 320.46 mo
631.235 326.47 630.096 332.22 628.025 337.5 cv
626.416 341.62 624.226 345.44 621.546 348.89 cv
621.075 349.51 620.586 350.11 620.065 350.7 cv
619.706 351.13 619.336 351.55 618.956 351.97 cv
616.325 354.84 613.346 357.39 610.065 359.52 cv
609.065 360.17 608.046 360.79 606.996 361.36 cv
600.346 365.01 592.726 367.08 584.605 367.08 cv
575.065 367.08 566.206 364.21 558.815 359.3 cv
558.626 359.17 558.436 359.04 558.246 358.9 cv
556.546 357.75 554.926 356.48 553.405 355.09 cv
553.235 354.94 553.065 354.79 552.905 354.63 cv
552.206 353.99 551.535 353.33 550.886 352.65 cv
550.556 352.3 550.226 351.95 549.905 351.59 cv
549.865 351.54 549.815 351.49 549.775 351.44 cv
542.445 343.21 537.985 332.36 537.985 320.46 cv
537.985 294.71 558.865 273.83 584.605 273.83 cv
610.355 273.83 631.235 294.71 631.235 320.46 cv
cp
f
561.28 119.833 mo
555.74 116.783 550.89 112.613 547.02 107.644 cv
551.483 101.17 563.061 91.7954 569.36 89.7036 cv
577.363 87.0459 565.57 105.454 561.28 119.833 cv
cp
.466667 .447059 .827451 rgb
f
477.195 345.89 mo
444.206 364.17 li
441.655 363.23 439.216 362.07 436.896 360.7 cv
431.806 357.73 427.336 353.82 423.726 349.21 cv
427.186 341.87 435.396 329.12 451.916 325.09 cv
455.256 324.28 458.206 324.36 460.785 325.07 cv
473.126 328.44 477.195 345.89 477.195 345.89 cv
cp
.486275 .376471 .32549 rgb
f
447.365 190.149 mo
447.365 190.149 436.525 198.325 435.718 208.255 cv
434.497 223.284 451.593 216.709 453.471 207.128 cv
455.35 197.547 447.365 190.149 447.365 190.149 cv
cp
0 0 0 rgb
f
489.796 235.69 mo
485.365 239.44 480.226 242.38 474.605 244.28 cv
469.926 245.85 464.916 246.71 459.706 246.71 cv
445.896 246.71 433.476 240.7 424.945 231.16 cv
424.436 230.6 423.945 230.02 423.466 229.43 cv
452.976 208.05 li
452.996 208.04 454.115 207.22 454.115 207.22 cv
465.706 208.16 li
470.516 208.55 li
489.796 235.69 li
cp
.988235 .701961 .356863 rgb
f
446.394 189.125 mo
446.394 189.125 442.481 184.803 443.608 178.104 cv
444.373 173.562 446.394 172.092 446.394 172.092 cv
446.394 172.092 443.315 165.893 452.479 166.268 cv
461.644 166.644 467.035 171.143 467.035 171.143 cv
467.035 171.143 471.224 169.086 473.103 173.971 cv
474.981 178.855 473.103 186.061 473.103 186.061 cv
446.394 189.125 li
cp
0 0 0 rgb
f
454.115 207.97 mo
424.945 231.16 li
424.436 230.6 423.945 230.02 423.466 229.43 cv
422.086 227.73 420.825 225.93 419.695 224.05 cv
420.596 223.24 421.535 222.43 422.506 221.62 cv
435.876 210.47 449.096 208.42 452.976 208.05 cv
453.726 207.98 454.115 207.97 454.115 207.97 cv
cp
.988235 .701961 .356863 rgb
f
466.512 196.677 mo
466.286 208.632 li
466.286 208.632 464.203 212.004 457.646 212.364 cv
452.76 212.633 451.266 209.908 451.266 209.908 cv
452.644 199.484 li
464.519 197.083 li
466.512 196.677 li
cp
.94902 .494118 .392157 rgb
f
500.246 223.12 mo
497.525 227.9 493.976 232.16 489.796 235.69 cv
485.365 239.44 480.226 242.38 474.605 244.28 cv
482.146 235.09 li
465.706 208.16 li
465.586 207.97 li
465.586 207.97 467.476 208.04 470.516 208.55 cv
477.436 209.7 490.296 213.11 500.246 223.12 cv
cp
.988235 .701961 .356863 rgb
f
466.512 195.994 mo
466.476 196.299 466.351 196.657 466.159 197.065 cv
463.516 202.591 454.648 204.695 451.827 204.877 cv
452.636 199.368 li
466.512 195.994 li
cp
0 0 0 rgb
f
450.781 173.807 mo
450.781 173.807 444.558 187.686 446.677 195.537 cv
448.796 203.387 455.941 202.224 460.224 200.75 cv
464.507 199.278 466.513 196.679 466.513 196.679 cv
466.513 196.679 470.486 198.069 473.189 194.387 cv
475.892 190.706 474.29 186.432 472.023 185.435 cv
469.756 184.437 467.033 186.055 467.033 186.055 cv
469.193 182.025 li
469.193 182.025 460.464 161.356 450.781 173.807 cv
cp
.94902 .494118 .392157 rgb
f
467.033 186.055 mo
467.033 186.055 461.04 187.265 456.876 180.595 cv
452.713 173.925 453.095 171.187 453.095 171.187 cv
448.947 178.072 li
448.947 178.072 448.02 173.297 449.929 170.254 cv
451.838 167.211 453.82 167.841 453.82 167.841 cv
467.035 171.143 li
470.515 181.735 li
467.033 186.055 li
cp
0 0 0 rgb
f
451.256 191.578 mo
451.042 191.578 450.844 191.439 450.777 191.224 cv
449.856 188.215 451.979 185.168 452.07 185.04 cv
452.23 184.814 452.541 184.762 452.767 184.921 cv
452.992 185.08 453.046 185.392 452.887 185.618 cv
452.867 185.645 450.958 188.397 451.734 190.931 cv
451.814 191.195 451.666 191.475 451.402 191.556 cv
451.354 191.571 451.304 191.578 451.256 191.578 cv
cp
f
467.607 192.649 mo
467.483 192.649 467.36 192.604 467.264 192.512 cv
467.063 192.322 467.055 192.005 467.245 191.805 cv
471.043 187.804 li
471.232 187.604 471.55 187.597 471.749 187.786 cv
471.95 187.976 471.958 188.292 471.768 188.493 cv
467.97 192.494 li
467.872 192.597 467.739 192.649 467.607 192.649 cv
cp
f
471.619 191.586 mo
471.594 191.586 471.567 191.584 471.542 191.58 cv
468.925 191.176 li
468.651 191.134 468.465 190.878 468.507 190.605 cv
468.549 190.333 468.809 190.149 469.077 190.188 cv
471.694 190.592 li
471.968 190.634 472.154 190.889 472.112 191.162 cv
472.074 191.409 471.861 191.586 471.619 191.586 cv
cp
f
454.588 194.114 mo
455.396 194.472 456.41 194.763 456.883 194.404 cv
457.401 194.006 457.423 193.22 457.36 192.667 cv
454.588 194.114 li
cp
456.274 195.565 mo
454.957 195.565 453.46 194.674 453.243 194.541 cv
453.091 194.447 453 194.277 453.006 194.098 cv
453.013 193.918 453.115 193.755 453.274 193.672 cv
457.494 191.469 li
457.624 191.4 457.78 191.393 457.92 191.451 cv
458.057 191.509 458.161 191.625 458.204 191.768 cv
458.233 191.864 458.894 194.124 457.49 195.198 cv
457.143 195.464 456.719 195.565 456.274 195.565 cv
cp
f
448.571 180.164 mo
448.333 180.164 448.122 179.992 448.08 179.75 cv
448.032 179.477 448.215 179.218 448.486 179.171 cv
450.961 178.74 li
451.228 178.696 451.491 178.875 451.539 179.147 cv
451.587 179.419 451.404 179.678 451.133 179.726 cv
448.658 180.156 li
448.629 180.161 448.601 180.164 448.571 180.164 cv
cp
f
458.86 181.789 mo
458.784 181.789 458.707 181.771 458.635 181.735 cv
454.575 179.679 li
454.328 179.554 454.229 179.253 454.354 179.007 cv
454.479 178.76 454.782 178.663 455.026 178.787 cv
459.086 180.842 li
459.333 180.967 459.432 181.268 459.307 181.515 cv
459.219 181.688 459.042 181.789 458.86 181.789 cv
cp
f
474.604 190.149 mo
474.604 190.149 483.247 197.641 482.026 209.852 cv
480.805 222.063 468.696 220.495 466.153 216.039 cv
462.301 209.288 466.513 196.679 466.513 196.679 cv
466.513 196.679 473.938 197.923 474.604 190.149 cv
cp
f
448.572 185.884 mo
448.523 185.884 448.475 185.877 448.426 185.862 cv
448.161 185.781 448.014 185.501 448.095 185.237 cv
448.788 182.978 li
448.186 182.24 li
448.011 182.026 448.042 181.711 448.256 181.536 cv
448.469 181.362 448.784 181.392 448.959 181.607 cv
449.731 182.552 li
449.838 182.682 449.872 182.855 449.822 183.016 cv
449.05 185.531 li
448.984 185.746 448.786 185.884 448.572 185.884 cv
cp
f
456.146 186.561 mo
456.098 186.561 456.049 186.554 456 186.539 cv
455.735 186.458 455.588 186.178 455.669 185.914 cv
456.36 183.661 li
455.472 182.624 li
455.292 182.415 455.316 182.099 455.526 181.919 cv
455.735 181.741 456.053 181.764 456.231 181.974 cv
457.299 183.219 li
457.41 183.349 457.447 183.527 457.396 183.691 cv
456.624 186.208 li
456.559 186.422 456.36 186.561 456.146 186.561 cv
cp
f
457.679 212.847 mo
453.423 212.847 450.901 210.525 450.865 210.491 cv
450.665 210.302 450.656 209.986 450.846 209.785 cv
451.035 209.586 451.351 209.576 451.552 209.764 cv
451.752 209.953 456.528 214.298 464.284 209.945 cv
464.526 209.808 464.831 209.896 464.965 210.136 cv
465.101 210.377 465.015 210.682 464.774 210.816 cv
462.076 212.331 459.685 212.847 457.679 212.847 cv
cp
1 1 1 rgb
f
371.176 109.1 mo
370.315 110.12 369.405 111.11 368.466 112.05 cv
366.945 113.57 365.315 114.99 363.586 116.28 cv
362.746 116.92 361.876 117.53 360.985 118.11 cv
360.886 118.18 360.785 118.24 360.676 118.3 cv
360.956 97.7998 li
360.956 97.7998 365.785 102.3 371.176 109.1 cv
cp
1 .74902 .411765 rgb
f
356.756 120.56 mo
356.445 120.72 356.136 120.88 355.815 121.03 cv
352.456 122.66 348.865 123.9 345.115 124.68 cv
342.016 125.33 338.815 125.67 335.525 125.67 cv
334.116 125.67 332.716 125.61 331.335 125.48 cv
329.896 125.35 328.476 125.16 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
322.545 123.89 320.396 123.21 318.315 122.37 cv
328.036 89.4102 li
328.036 89.4102 335.616 88.27 344.206 89.1699 cv
349.815 89.7598 354.306 107.97 356.756 120.56 cv
cp
.466667 .447059 .827451 rgb
f
344.206 89.1699 mo
329.426 90.1001 li
329.426 90.1001 327.946 105.46 327.076 124.89 cv
326.295 124.75 325.525 124.59 324.766 124.41 cv
320.576 123.42 316.616 121.87 312.946 119.83 cv
312.746 119.72 312.545 119.61 312.355 119.49 cv
311.176 118.83 310.036 118.12 308.936 117.34 cv
307.986 116.69 307.056 115.99 306.156 115.25 cv
306.045 115.17 305.946 115.09 305.835 115 cv
304.565 113.94 303.346 112.82 302.186 111.64 cv
301.855 111.31 301.536 110.97 301.226 110.63 cv
301.505 104.28 302.375 99.5498 304.146 97.8999 cv
312.005 90.5898 331.505 88.1499 331.505 88.1499 cv
340.626 88.02 li
340.626 88.02 342.065 88.4399 344.206 89.1699 cv
cp
1 .74902 .411765 rgb
f
363.586 116.28 mo
362.746 116.92 361.876 117.53 360.985 118.11 cv
359.626 119 358.216 119.82 356.756 120.56 cv
356.445 120.72 356.136 120.88 355.815 121.03 cv
354.365 121.73 352.876 122.36 351.355 122.91 cv
351.346 122.79 351.336 122.67 351.325 122.55 cv
348.706 95.3301 344.496 89.5298 344.235 89.1802 cv
349.865 91.1099 360.325 95.2202 362.246 99.6499 cv
362.976 101.34 363.386 107.8 363.586 116.28 cv
cp
f
334.921 54.2295 mo
334.921 54.2295 325.316 32.7852 314.351 43.6802 cv
305.177 52.7944 319.405 66.8398 327.631 62.8345 cv
335.858 58.8291 334.921 54.2295 334.921 54.2295 cv
cp
0 0 0 rgb
f
349.556 71.7285 mo
349.556 71.7285 353.507 67.2378 352.255 60.3818 cv
351.406 55.7339 349.312 54.2549 349.312 54.2549 cv
349.312 54.2549 352.381 47.8511 342.985 48.3677 cv
333.59 48.8848 328.123 53.5776 328.123 53.5776 cv
328.123 53.5776 323.797 51.5273 321.939 56.5649 cv
320.083 61.6021 322.113 68.9673 322.113 68.9673 cv
349.556 71.7285 li
cp
f
329.026 79.7632 mo
329.475 91.2349 li
329.475 91.2349 331.672 94.4517 338.405 94.7349 cv
343.42 94.9458 344.902 92.3164 344.902 92.3164 cv
343.3 82.3252 li
331.077 80.1333 li
329.026 79.7632 li
cp
.94902 .494118 .392157 rgb
f
329.017 79.063 mo
329.058 79.375 329.191 79.7402 329.394 80.1567 cv
332.185 85.7866 341.311 87.8184 344.208 87.9644 cv
343.3 82.3252 li
329.017 79.063 li
cp
0 0 0 rgb
f
344.836 56.0771 mo
344.836 56.0771 351.418 70.2251 349.357 78.3091 cv
347.296 86.3931 339.949 85.3013 335.535 83.8521 cv
331.121 82.4028 329.025 79.7656 329.025 79.7656 cv
329.025 79.7656 324.968 81.2485 322.144 77.5103 cv
319.319 73.772 320.9 69.3652 323.211 68.3096 cv
325.523 67.2539 328.339 68.8745 328.339 68.8745 cv
326.065 64.7715 li
326.065 64.7715 334.724 43.4434 344.836 56.0771 cv
cp
.94902 .494118 .392157 rgb
f
328.339 68.8745 mo
328.339 68.8745 334.505 70.0293 338.68 63.1279 cv
342.855 56.2261 342.424 53.4219 342.424 53.4219 cv
346.778 60.4258 li
346.778 60.4258 347.661 55.5151 345.658 52.4204 cv
343.656 49.3257 341.632 50.001 341.632 50.001 cv
328.123 53.5776 li
324.706 64.4932 li
328.339 68.8745 li
cp
0 0 0 rgb
f
344.596 74.3008 mo
344.55 74.3008 344.503 74.2944 344.456 74.2808 cv
344.19 74.2036 344.038 73.9263 344.115 73.6611 cv
344.877 71.0439 342.875 68.2437 342.854 68.2158 cv
342.692 67.9922 342.741 67.6797 342.965 67.5176 cv
343.188 67.355 343.499 67.4038 343.663 67.6265 cv
343.758 67.7568 345.976 70.8467 345.076 73.9404 cv
345.013 74.1592 344.813 74.3008 344.596 74.3008 cv
cp
f
327.837 75.6343 mo
327.707 75.6343 327.577 75.584 327.479 75.4834 cv
323.526 71.4336 li
323.333 71.2363 323.337 70.9194 323.534 70.7266 cv
323.733 70.5347 324.05 70.5376 324.241 70.7354 cv
328.194 74.7852 li
328.388 74.9824 328.384 75.2993 328.187 75.4922 cv
328.089 75.5869 327.963 75.6343 327.837 75.6343 cv
cp
f
323.706 74.6011 mo
323.467 74.6011 323.255 74.4282 323.214 74.1841 cv
323.168 73.9121 323.352 73.6538 323.624 73.6079 cv
326.304 73.1558 li
326.57 73.1172 326.834 73.293 326.88 73.5659 cv
326.926 73.8379 326.742 74.0962 326.47 74.1421 cv
323.79 74.5942 li
323.762 74.5986 323.734 74.6011 323.706 74.6011 cv
cp
f
347.186 62.5532 mo
347.159 62.5532 347.133 62.5513 347.105 62.5469 cv
344.561 62.1406 li
344.288 62.0972 344.103 61.8408 344.146 61.5684 cv
344.19 61.2954 344.441 61.1099 344.719 61.1533 cv
347.264 61.5596 li
347.536 61.603 347.722 61.8594 347.679 62.1318 cv
347.639 62.3779 347.427 62.5532 347.186 62.5532 cv
cp
f
336.654 64.3677 mo
336.475 64.3677 336.301 64.2705 336.211 64.0996 cv
336.083 63.855 336.178 63.5527 336.422 63.4248 cv
340.557 61.2583 li
340.803 61.1289 341.104 61.2241 341.232 61.4692 cv
341.36 61.7139 341.266 62.0161 341.021 62.144 cv
336.887 64.3105 li
336.813 64.3496 336.732 64.3677 336.654 64.3677 cv
cp
f
347.267 68.4219 mo
347.056 68.4219 346.859 68.2871 346.791 68.0752 cv
345.963 65.5054 li
345.911 65.3462 345.943 65.1719 346.047 65.041 cv
346.826 64.0601 li
346.998 63.8442 347.314 63.8096 347.528 63.9795 cv
347.745 64.1514 347.781 64.4658 347.609 64.6821 cv
346.996 65.4536 li
347.742 67.7686 li
347.827 68.0313 347.683 68.313 347.42 68.3979 cv
347.369 68.4141 347.317 68.4219 347.267 68.4219 cv
cp
f
339.054 69.2163 mo
338.843 69.2163 338.646 69.0815 338.578 68.8696 cv
337.75 66.2998 li
337.697 66.1367 337.731 65.958 337.842 65.8267 cv
338.919 64.5337 li
339.097 64.3203 339.412 64.2944 339.623 64.4692 cv
339.835 64.646 339.863 64.9614 339.687 65.1733 cv
338.786 66.2549 li
339.529 68.563 li
339.614 68.8257 339.47 69.1074 339.207 69.1924 cv
339.156 69.2085 339.104 69.2163 339.054 69.2163 cv
cp
f
342.578 78.0972 mo
340.785 78.0972 338.808 76.1895 338.548 75.9307 cv
338.352 75.7358 338.352 75.4194 338.546 75.2236 cv
338.741 75.0273 339.058 75.0273 339.253 75.2217 cv
339.909 75.8735 342.029 77.5894 343.145 76.958 cv
343.381 76.8223 343.688 76.9063 343.826 77.1465 cv
343.962 77.3867 343.877 77.6919 343.637 77.8281 cv
343.303 78.0176 342.944 78.0972 342.578 78.0972 cv
cp
f
308.936 117.34 mo
307.986 116.69 307.056 115.99 306.156 115.25 cv
306.045 115.17 305.946 115.09 305.835 115 cv
304.565 113.94 303.346 112.82 302.186 111.64 cv
300.946 110.37 299.775 109.04 298.686 107.64 cv
297.896 106.62 297.146 105.57 296.446 104.49 cv
302.726 98.48 307.926 95.1802 307.926 95.1802 cv
308.936 117.34 li
cp
1 .74902 .411765 rgb
f
339.418 95.2827 mo
339.082 95.2827 338.729 95.2671 338.358 95.2329 cv
333.854 94.8179 329.38 91.7764 329.191 91.647 cv
328.964 91.4907 328.906 91.1797 329.063 90.9521 cv
329.218 90.7266 329.527 90.665 329.758 90.8228 cv
329.802 90.8525 334.21 93.8462 338.45 94.2368 cv
342.895 94.6475 344.408 92.1709 344.47 92.0649 cv
344.61 91.8286 344.915 91.748 345.153 91.8853 cv
345.391 92.0239 345.473 92.3267 345.336 92.5654 cv
345.268 92.6841 343.724 95.2827 339.418 95.2827 cv
cp
1 1 1 rgb
f
204.974 295.492 mo
204.974 295.492 195.997 289.407 185.378 295.305 cv
174.759 301.201 178.089 312.141 178.089 312.141 cv
178.089 312.141 169.763 322.58 173.653 332.95 cv
177.544 343.32 194.842 346.27 202.524 334.574 cv
210.207 322.878 198.009 312.451 198.009 312.451 cv
198.009 312.451 207.905 312.397 204.974 295.492 cv
cp
.898039 .392157 .270588 rgb
f
248.166 349.97 mo
246.966 351.44 245.676 352.83 244.306 354.14 cv
241.576 356.76 238.536 359.04 235.226 360.93 cv
235.315 347.29 240.666 338.12 240.666 338.12 cv
241.036 338.8 243.815 343.82 248.166 349.97 cv
cp
.988235 .639216 .592157 rgb
f
229.664 304.704 mo
229.664 304.704 233.499 292.843 232.975 289.843 cv
232.452 286.844 219.869 282.971 209.871 287.632 cv
199.874 292.292 199.201 305.438 201.456 310.874 cv
207.26 324.875 219.325 318.432 219.325 318.432 cv
219.325 318.432 238.549 312.572 229.664 304.704 cv
cp
.898039 .392157 .270588 rgb
f
244.306 354.14 mo
241.576 356.76 238.536 359.04 235.226 360.93 cv
228.406 364.84 220.505 367.08 212.076 367.08 cv
209.275 367.08 206.536 366.83 203.875 366.36 cv
201.766 365.99 199.706 365.47 197.706 364.81 cv
198.216 354.92 198.886 344.72 199.716 337.86 cv
200.246 333.47 200.846 330.45 201.516 329.74 cv
202.116 329.1 203.315 328.5 204.976 328 cv
207.545 327.23 211.146 326.71 215.136 326.68 cv
219.246 326.63 223.746 327.11 227.926 328.35 cv
231.716 329.49 235.246 331.25 237.946 333.85 cv
238.986 334.85 239.896 336.3 240.666 338.12 cv
242.416 342.15 243.556 347.83 244.306 354.14 cv
cp
.313726 .470588 .286275 rgb
f
227.917 320.217 mo
227.927 320.511 li
227.92 326.06 li
227.932 330.409 li
227.932 330.409 228.327 331.404 223.491 331.279 cv
217.009 331.085 214.805 328.262 214.805 328.262 cv
214.109 318.093 li
216.084 318.401 li
227.917 320.217 li
cp
.988235 .639216 .592157 rgb
f
227.938 320.809 mo
227.922 325.932 li
224.868 325.688 219.28 324.604 216.847 319.915 cv
216.659 319.533 216.53 319.188 216.481 318.899 cv
227.916 320.731 li
227.938 320.809 li
cp
0 0 0 rgb
f
228.901 296.254 mo
228.901 296.254 235.272 309.325 233.488 316.892 cv
231.704 324.458 224.84 323.564 220.703 322.289 cv
216.565 321.013 214.568 318.591 214.568 318.591 cv
214.568 318.591 210.813 320.041 208.119 316.605 cv
205.424 313.17 206.823 309.037 208.959 308.015 cv
211.095 306.992 213.746 308.454 213.746 308.454 cv
211.558 304.67 li
211.558 304.67 219.268 284.652 228.901 296.254 cv
cp
.988235 .639216 .592157 rgb
f
228.977 313.271 mo
228.933 313.271 228.889 313.266 228.845 313.254 cv
228.579 313.182 228.421 312.907 228.494 312.641 cv
229.155 310.206 227.252 307.643 227.232 307.617 cv
227.066 307.396 227.11 307.083 227.33 306.917 cv
227.549 306.75 227.863 306.792 228.03 307.014 cv
228.121 307.134 230.25 309.989 229.458 312.902 cv
229.398 313.125 229.196 313.271 228.977 313.271 cv
cp
0 0 0 rgb
f
213.383 314.796 mo
213.256 314.796 213.129 314.748 213.032 314.651 cv
209.28 310.944 li
209.084 310.75 209.082 310.434 209.276 310.237 cv
209.47 310.042 209.787 310.038 209.983 310.233 cv
213.735 313.94 li
213.931 314.135 213.933 314.451 213.739 314.647 cv
213.641 314.746 213.512 314.796 213.383 314.796 cv
cp
f
209.518 313.902 mo
209.282 313.902 209.072 313.734 209.027 313.494 cv
208.976 313.223 209.154 312.962 209.426 312.911 cv
211.915 312.444 li
212.189 312.396 212.448 312.573 212.499 312.844 cv
212.55 313.115 212.371 313.376 212.1 313.427 cv
209.61 313.894 li
209.579 313.899 209.548 313.902 209.518 313.902 cv
cp
f
222.809 315.165 mo
223.114 315.603 223.567 316.085 224.196 316.372 cv
224.872 316.684 225.555 316.421 226.039 316.114 cv
222.809 315.165 li
cp
224.836 317.515 mo
224.499 317.515 224.143 317.447 223.78 317.282 cv
222.012 316.474 221.372 314.59 221.345 314.511 cv
221.287 314.334 221.331 314.14 221.46 314.006 cv
221.589 313.872 221.781 313.821 221.961 313.874 cv
227.228 315.422 li
227.393 315.471 227.521 315.601 227.568 315.767 cv
227.614 315.933 227.572 316.111 227.456 316.238 cv
227.398 316.302 226.271 317.515 224.836 317.515 cv
cp
f
220.291 303.839 mo
220.219 303.839 220.147 303.823 220.078 303.791 cv
219.828 303.674 219.721 303.376 219.839 303.126 cv
220.704 301.288 223 301.68 223.096 301.695 cv
223.367 301.744 223.547 302.003 223.5 302.274 cv
223.452 302.545 223.19 302.726 222.921 302.68 cv
222.854 302.667 221.28 302.411 220.743 303.552 cv
220.658 303.732 220.479 303.839 220.291 303.839 cv
cp
f
227.43 302.055 mo
227.338 302.055 227.246 302.029 227.162 301.977 cv
226.929 301.829 226.86 301.521 227.008 301.287 cv
227.366 300.723 227.862 300.375 228.442 300.283 cv
229.619 300.09 230.765 301.021 230.813 301.062 cv
231.026 301.236 231.056 301.551 230.881 301.764 cv
230.707 301.977 230.391 302.009 230.178 301.834 cv
229.945 301.644 229.216 301.177 228.597 301.271 cv
228.301 301.318 228.058 301.499 227.853 301.822 cv
227.757 301.973 227.595 302.055 227.43 302.055 cv
cp
f
230.114 307.666 mo
229.877 307.666 229.667 307.497 229.623 307.256 cv
229.172 304.794 li
229.146 304.657 229.18 304.516 229.264 304.403 cv
230.167 303.201 li
230.334 302.981 230.646 302.936 230.867 303.103 cv
231.088 303.269 231.132 303.582 230.967 303.803 cv
230.195 304.829 li
230.606 307.076 li
230.656 307.348 230.476 307.608 230.204 307.658 cv
230.174 307.663 230.144 307.666 230.114 307.666 cv
cp
f
221.742 308.515 mo
221.501 308.515 221.289 308.341 221.249 308.095 cv
220.846 305.624 li
220.821 305.471 220.87 305.313 220.977 305.2 cv
222.313 303.79 li
222.502 303.589 222.819 303.582 223.02 303.771 cv
223.22 303.961 223.229 304.277 223.039 304.478 cv
221.873 305.708 li
222.236 307.935 li
222.281 308.207 222.096 308.464 221.823 308.508 cv
221.796 308.513 221.769 308.515 221.742 308.515 cv
cp
f
213.746 308.454 mo
213.746 308.454 219.454 305.272 221.41 301.014 cv
223.366 296.754 223.371 294.652 223.371 294.652 cv
223.371 294.652 224.318 297.367 226.459 297.939 cv
228.601 298.512 229.921 298.538 229.921 298.538 cv
231.41 302.394 li
230.205 293.12 li
230.205 293.12 224.354 290.252 223.586 290.278 cv
222.817 290.306 213.18 292.383 212.64 292.986 cv
212.099 293.59 209.306 301.229 209.306 301.229 cv
209.212 304.64 li
213.746 308.454 li
cp
.898039 .392157 .270588 rgb
f
203.875 366.36 mo
201.766 365.99 199.706 365.47 197.706 364.81 cv
191.545 362.83 185.946 359.59 181.206 355.39 cv
183.605 350.37 186.656 345.86 189.646 342.07 cv
195.676 334.44 201.516 329.74 201.516 329.74 cv
202.063 332.274 li
203.262 337.824 203.867 343.489 203.867 349.167 cv
203.867 354.867 203.875 360.349 203.875 366.36 cv
cp
.988235 .639216 .592157 rgb
f
223.314 331.754 mo
217.515 331.754 213.808 328.217 213.759 328.17 cv
213.562 327.978 213.559 327.661 213.751 327.464 cv
213.944 327.266 214.26 327.264 214.458 327.454 cv
214.695 327.684 220.357 333.056 228.774 329.644 cv
229.029 329.54 229.322 329.664 229.426 329.92 cv
229.529 330.176 229.406 330.467 229.15 330.571 cv
227.041 331.426 225.08 331.754 223.314 331.754 cv
cp
1 1 1 rgb
f
304.036 347.188 mo
304.036 347.188 296.414 344.894 298.732 333.75 cv
300.732 324.135 313.322 322.672 313.322 322.672 cv
313.322 322.672 309.361 316.727 312.399 309.533 cv
315.315 302.628 319.378 301.316 319.378 301.316 cv
319.378 301.316 319.033 295.718 323.444 291.325 cv
327.856 286.932 333.868 291.534 333.868 291.534 cv
333.868 291.534 345.273 289.052 352.311 295.107 cv
359.347 301.163 356.622 311.586 356.622 311.586 cv
356.622 311.586 367.825 315.631 370.55 327.473 cv
373.275 339.314 366.214 345.674 366.214 345.674 cv
304.036 347.188 li
cp
0 0 0 rgb
f
378.476 340.25 mo
371.035 356.1 354.926 367.08 336.255 367.08 cv
320.206 367.08 306.056 358.98 297.666 346.64 cv
305.755 335.87 315.846 328.06 328.306 326.96 cv
347.516 325.27 359.586 328.98 372.285 335.79 cv
374.226 336.83 376.325 338.35 378.476 340.25 cv
cp
.466667 .447059 .827451 rgb
f
342.42 320.751 mo
342.913 328.534 li
342.913 328.534 340.121 331.201 336.367 331.472 cv
331.298 331.839 329.265 329.161 329.265 329.161 cv
328.829 318.91 li
342.42 320.751 li
cp
.94902 .494118 .392157 rgb
f
342.42 320.739 mo
342.42 320.739 340.315 328.292 334 326.709 cv
329.439 325.566 328.893 319.741 328.893 319.741 cv
342.42 320.739 li
cp
0 0 0 rgb
f
325.469 299.431 mo
325.469 299.431 323.55 313.512 328.447 319.931 cv
333.345 326.349 339.123 324.067 341.65 321.893 cv
345.059 318.96 345.578 315.123 345.578 315.123 cv
345.578 315.123 350.524 315.827 351.936 311.747 cv
353.418 307.461 350.185 304.248 347.727 304.183 cv
345.268 304.118 345.007 304.58 345.007 304.58 cv
345.479 300.064 li
345.479 300.064 329.689 284.35 325.469 299.431 cv
cp
.94902 .494118 .392157 rgb
f
328.186 305.83 mo
328.186 305.83 320.595 303.073 320.335 308.849 cv
320.033 315.538 327.988 315.16 327.988 315.16 cv
328.186 305.83 li
cp
f
346.228 304.955 mo
346.228 304.955 343.701 306.177 338.022 302.487 cv
332.343 298.799 333.667 293.995 333.667 293.995 cv
333.667 293.995 326.459 299.081 325.108 305.018 cv
323.757 310.953 321.944 291.412 330.438 291.326 cv
338.932 291.24 351.915 296.061 346.228 304.955 cv
cp
0 0 0 rgb
f
324.799 312.086 mo
324.637 312.086 324.478 312.007 324.382 311.861 cv
321.673 307.756 li
321.521 307.525 321.584 307.215 321.814 307.063 cv
322.044 306.91 322.354 306.975 322.507 307.205 cv
325.216 311.311 li
325.368 311.541 325.305 311.852 325.074 312.003 cv
324.989 312.06 324.894 312.086 324.799 312.086 cv
cp
f
346.142 311.055 mo
346.01 311.055 345.879 311.003 345.78 310.9 cv
345.59 310.701 345.597 310.385 345.796 310.193 cv
349.394 306.746 li
349.594 306.555 349.908 306.563 350.101 306.762 cv
350.291 306.961 350.284 307.277 350.085 307.469 cv
346.487 310.916 li
346.391 311.009 346.266 311.055 346.142 311.055 cv
cp
f
349.662 311.458 mo
349.566 311.458 349.47 311.431 349.384 311.374 cv
347.063 309.821 li
346.833 309.667 346.771 309.356 346.925 309.127 cv
347.079 308.897 347.388 308.837 347.619 308.989 cv
349.94 310.542 li
350.17 310.696 350.231 311.007 350.078 311.236 cv
349.981 311.38 349.823 311.458 349.662 311.458 cv
cp
f
321.849 310.973 mo
321.589 310.973 321.37 310.771 321.351 310.509 cv
321.331 310.233 321.538 309.994 321.813 309.974 cv
323.928 309.821 li
324.201 309.795 324.442 310.009 324.463 310.284 cv
324.482 310.56 324.275 310.799 324 310.819 cv
321.886 310.972 li
321.873 310.973 321.861 310.973 321.849 310.973 cv
cp
f
333.545 313.885 mo
333.315 313.885 333.108 313.727 333.057 313.494 cv
332.212 309.708 333.351 306.588 333.399 306.457 cv
333.496 306.199 333.781 306.071 334.042 306.163 cv
334.301 306.26 334.433 306.548 334.337 306.806 cv
334.326 306.836 333.255 309.791 334.033 313.275 cv
334.093 313.545 333.923 313.813 333.654 313.873 cv
333.617 313.881 333.58 313.885 333.545 313.885 cv
cp
f
334.257 316.461 mo
334.606 316.618 335.012 316.74 335.427 316.741 cv
335.882 316.741 336.276 316.448 336.575 316.122 cv
334.257 316.461 li
cp
335.428 317.741 mo
333.886 317.738 332.574 316.583 332.52 316.534 cv
332.375 316.405 332.317 316.203 332.374 316.018 cv
332.43 315.831 332.588 315.694 332.78 315.666 cv
337.553 314.968 li
337.732 314.946 337.916 315.017 338.026 315.165 cv
338.136 315.313 338.156 315.508 338.078 315.675 cv
338.038 315.759 337.092 317.741 335.428 317.741 cv
cp
f
328.587 302.655 mo
328.451 302.655 328.316 302.601 328.218 302.492 cv
328.031 302.289 328.046 301.973 328.25 301.786 cv
329.281 300.844 331.029 300.817 331.103 300.816 cv
331.381 300.816 331.604 301.037 331.607 301.312 cv
331.61 301.587 331.389 301.813 331.112 301.816 cv
331.099 301.816 329.671 301.842 328.924 302.524 cv
328.828 302.612 328.707 302.655 328.587 302.655 cv
cp
f
339.498 303.128 mo
339.372 303.128 339.247 303.081 339.149 302.986 cv
338.425 302.281 336.998 302.212 336.984 302.212 cv
336.709 302.199 336.494 301.967 336.506 301.691 cv
336.517 301.416 336.742 301.208 337.024 301.212 cv
337.099 301.215 338.845 301.296 339.847 302.27 cv
340.045 302.462 340.049 302.778 339.856 302.977 cv
339.759 303.077 339.628 303.128 339.498 303.128 cv
cp
f
335.728 332.325 mo
335.704 332.325 335.682 332.325 335.658 332.325 cv
329.314 332.295 328.011 328.607 327.958 328.45 cv
327.871 328.188 328.013 327.905 328.274 327.817 cv
328.536 327.731 328.816 327.87 328.906 328.131 cv
328.954 328.268 330.086 331.298 335.662 331.325 cv
335.685 331.325 335.706 331.325 335.728 331.325 cv
340.701 331.325 342.587 328.632 342.665 328.517 cv
342.82 328.289 343.133 328.229 343.358 328.382 cv
343.587 328.535 343.648 328.844 343.496 329.073 cv
343.407 329.206 341.265 332.325 335.728 332.325 cv
cp
.27451 .27451 .498039 rgb
f
325.108 305.018 mo
325.108 305.018 318.427 296.544 323.444 291.325 cv
328.462 286.106 342.913 283.5 349.739 293.357 cv
354.579 300.347 346.228 304.955 346.228 304.955 cv
336.945 295.433 li
333.667 293.995 li
328.186 295.433 li
325.108 305.018 li
cp
0 0 0 rgb
f
339.086 307.94 mo
338.793 307.931 338.577 307.699 338.586 307.424 cv
338.658 305.281 li
337.326 304.29 li
337.104 304.125 337.059 303.812 337.224 303.59 cv
337.391 303.368 337.703 303.324 337.924 303.487 cv
339.466 304.635 li
339.597 304.732 339.672 304.889 339.667 305.053 cv
339.586 307.457 li
339.576 307.728 339.354 307.94 339.086 307.94 cv
cp
f
330.289 307.94 mo
329.996 307.931 329.78 307.699 329.789 307.424 cv
329.861 305.281 li
328.529 304.29 li
328.308 304.125 328.262 303.812 328.427 303.59 cv
328.593 303.368 328.906 303.324 329.127 303.487 cv
330.669 304.635 li
330.8 304.732 330.875 304.889 330.87 305.053 cv
330.789 307.457 li
330.779 307.728 330.558 307.94 330.289 307.94 cv
cp
f
594.622 60.0811 mo
596.986 59.7827 599.423 60.2798 601.364 61.6616 cv
603.065 62.8721 604.694 64.8872 605.279 68.2388 cv
606.683 76.2827 603.8 78.5068 608.398 81.5347 cv
612.998 84.562 615.596 82.707 618.5 90.1958 cv
621.404 97.6851 616.94 107.72 607.644 105.691 cv
598.348 103.662 575.806 97.5156 575.806 97.5156 cv
574.759 64.2017 li
586.04 61.165 li
594.622 60.0811 li
cp
.898039 .392157 .270588 rgb
f
609.32 118.113 mo
604.56 121.224 599.2 123.483 593.45 124.684 cv
590.35 125.333 587.15 125.673 583.86 125.673 cv
582.45 125.673 581.05 125.613 579.67 125.483 cv
577.43 125.283 575.24 124.923 573.1 124.414 cv
568.91 123.423 564.95 121.874 561.28 119.833 cv
557.3 117.644 553.68 114.874 550.52 111.644 cv
551.89 107.833 553.33 104.474 554.79 102.023 cv
561.74 90.3633 571.89 89.2637 571.89 89.2637 cv
582.76 86.0737 592.04 85.5034 601.9 90.3032 cv
606.33 92.4536 608.47 104.923 609.32 118.113 cv
cp
.466667 .447059 .827451 rgb
f
604.44 115.974 mo
604.15 121.033 li
600.79 122.664 597.2 123.903 593.45 124.684 cv
590.35 125.333 587.15 125.673 583.86 125.673 cv
582.45 125.673 581.05 125.613 579.67 125.483 cv
577.43 125.283 575.24 124.923 573.1 124.414 cv
568.91 123.423 564.95 121.874 561.28 119.833 cv
561.08 119.724 560.88 119.613 560.69 119.493 cv
558.5 118.264 556.43 116.843 554.49 115.253 cv
560.73 102.264 569.36 89.7036 569.36 89.7036 cv
582.51 86.9634 li
599.25 89.8237 li
604.44 115.974 li
cp
.27451 .27451 .498039 rgb
f
569.36 89.7036 mo
569.36 89.7036 564.13 106.713 560.69 119.493 cv
558.38 118.193 556.21 116.684 554.17 115.003 cv
565.28 92.8833 li
569.36 89.7036 li
cp
.466667 .447059 .827451 rgb
f
565.28 66.8262 mo
565.28 66.8262 560.802 59.5649 561.151 56.439 cv
562.013 48.7334 572.826 43.3921 583.624 47.022 cv
594.423 50.6519 596.629 64.0649 594.943 69.9053 cv
590.601 84.9438 577.476 79.7227 577.476 79.7227 cv
577.476 79.7227 557.069 75.9272 565.28 66.8262 cv
cp
.898039 .392157 .270588 rgb
f
568.889 82.876 mo
568.91 83.1558 li
569.517 88.4116 li
569.976 92.5337 li
569.976 92.5337 569.69 93.52 574.48 92.8691 cv
580.899 91.9717 582.783 89.0547 582.783 89.0547 cv
582.375 79.3447 li
580.446 79.855 li
568.889 82.876 li
cp
.988235 .639216 .592157 rgb
f
568.91 83.1558 mo
569.517 88.4116 li
572.624 87.8101 578.232 86.0513 580.189 80.9595 cv
580.339 80.5464 580.431 80.1777 580.447 79.875 cv
568.924 83.0742 li
568.91 83.1558 li
cp
0 0 0 rgb
f
565.088 58.0659 mo
565.088 58.0659 560.058 72.2163 562.762 79.7764 cv
565.466 87.3364 572.407 85.6274 576.506 83.8403 cv
580.605 82.0532 582.375 79.3374 582.375 79.3374 cv
582.375 79.3374 586.396 80.3926 588.766 76.5557 cv
591.135 72.7188 589.223 68.6387 586.912 67.8359 cv
584.603 67.0327 582.05 68.8398 582.05 68.8398 cv
583.858 64.7031 li
583.858 64.7031 573.638 45.0479 565.088 58.0659 cv
cp
.988235 .639216 .592157 rgb
f
566.917 75.5269 mo
566.718 75.5269 566.53 75.4072 566.452 75.2109 cv
565.307 72.3188 567.159 69.1504 567.238 69.0166 cv
567.38 68.7798 567.687 68.7036 567.923 68.8428 cv
568.16 68.9834 568.238 69.29 568.098 69.5278 cv
568.081 69.5562 566.419 72.4121 567.382 74.8428 cv
567.483 75.0996 567.357 75.3901 567.102 75.4917 cv
567.041 75.5156 566.979 75.5269 566.917 75.5269 cv
cp
0 0 0 rgb
f
583.096 75.2925 mo
582.985 75.2925 582.874 75.2563 582.781 75.1816 cv
582.566 75.0078 582.533 74.6934 582.707 74.4785 cv
586.129 70.2417 li
586.302 70.0269 586.616 69.9932 586.832 70.1665 cv
587.047 70.3403 587.08 70.6548 586.906 70.8696 cv
583.484 75.1064 li
583.386 75.229 583.241 75.2925 583.096 75.2925 cv
cp
f
586.96 73.9297 mo
586.923 73.9282 584.315 73.7368 584.315 73.7368 cv
584.04 73.7168 583.833 73.4771 583.853 73.2017 cv
583.873 72.9258 584.14 72.7217 584.388 72.7397 cv
586.995 72.9312 li
587.271 72.9512 587.478 73.1909 587.458 73.4663 cv
587.438 73.729 587.219 73.9297 586.96 73.9297 cv
cp
f
570.281 78.1167 mo
570.82 78.3843 571.573 78.5894 572.246 78.1855 cv
572.88 77.8057 573.296 77.2354 573.559 76.7393 cv
570.281 78.1167 li
cp
571.41 79.4185 mo
570.072 79.4185 568.949 78.4521 568.888 78.3979 cv
568.758 78.2847 568.695 78.1123 568.724 77.9419 cv
568.751 77.772 568.864 77.6279 569.023 77.561 cv
574.25 75.3638 li
574.419 75.291 574.619 75.3208 574.762 75.439 cv
574.905 75.5576 574.971 75.7456 574.933 75.9272 cv
574.915 76.0122 574.478 78.0127 572.762 79.043 cv
572.308 79.3154 571.848 79.4185 571.41 79.4185 cv
cp
f
574.742 64.8442 mo
574.575 64.8442 574.411 64.7598 574.316 64.6064 cv
573.627 63.4858 572.03 63.9375 571.963 63.9561 cv
571.701 64.0317 571.42 63.8823 571.343 63.6177 cv
571.265 63.3535 571.414 63.0762 571.679 62.9976 cv
571.775 62.9688 574.074 62.3071 575.168 64.082 cv
575.313 64.3169 575.239 64.625 575.005 64.77 cv
574.923 64.8203 574.832 64.8442 574.742 64.8442 cv
cp
f
564.052 64.0806 mo
563.927 64.0806 563.801 64.0337 563.704 63.9399 cv
563.506 63.7476 563.5 63.4312 563.692 63.2329 cv
563.737 63.1865 564.813 62.1162 566.023 62.1646 cv
566.625 62.1919 567.17 62.4893 567.6 63.0234 cv
567.772 63.2388 567.738 63.5537 567.523 63.7266 cv
567.308 63.8989 566.994 63.8652 566.82 63.6504 cv
566.568 63.3369 566.293 63.1777 565.978 63.1636 cv
565.197 63.1172 564.419 63.9199 564.411 63.9282 cv
564.313 64.0298 564.183 64.0806 564.052 64.0806 cv
cp
f
565.104 69.9053 mo
564.793 69.8853 564.585 69.6465 564.604 69.3711 cv
564.767 67.0103 li
563.852 66.041 li
563.662 65.8403 563.671 65.5239 563.871 65.334 cv
564.072 65.1445 564.391 65.1538 564.578 65.3545 cv
565.644 66.4829 li
565.739 66.5845 565.789 66.7212 565.779 66.8604 cv
565.602 69.4395 li
565.583 69.7036 565.363 69.9053 565.104 69.9053 cv
cp
f
573.72 69.9146 mo
573.419 69.9004 573.207 69.6655 573.221 69.3896 cv
573.337 67.0557 li
571.992 65.9214 li
571.781 65.7432 571.754 65.4277 571.933 65.2168 cv
572.111 65.0054 572.427 64.9805 572.637 65.1567 cv
574.171 66.4507 li
574.29 66.5513 574.355 66.7021 574.348 66.8579 cv
574.219 69.4395 li
574.206 69.7065 573.984 69.9146 573.72 69.9146 cv
cp
f
588.966 55.52 mo
588.966 55.52 587.097 39.0747 598.392 40.5947 cv
610.356 42.2056 599.568 61.5024 591.925 60.646 cv
588.521 60.2646 588.966 55.52 588.966 55.52 cv
cp
.898039 .392157 .270588 rgb
f
569.593 93.7808 mo
569.222 93.7808 568.996 93.771 568.948 93.7686 cv
568.672 93.7549 568.46 93.52 568.474 93.2446 cv
568.486 92.9692 568.713 92.7471 568.997 92.7695 cv
569.066 92.772 575.99 93.0679 581.618 89.728 cv
581.854 89.5879 582.162 89.6655 582.303 89.9028 cv
582.444 90.1406 582.366 90.4473 582.128 90.5884 cv
577.196 93.5156 571.494 93.7808 569.593 93.7808 cv
cp
.968627 .45098 .309804 rgb
f
616.8 112.053 mo
608.36 120.463 596.72 125.673 583.86 125.673 cv
582.45 125.673 581.05 125.613 579.67 125.483 cv
580.53 120.684 581.46 117.394 581.46 117.394 cv
593.28 87.4932 li
593.28 87.4932 605.04 87.7534 612.92 99.8135 cv
614.62 102.423 615.98 106.793 616.8 112.053 cv
cp
.466667 .447059 .827451 rgb
f
593.45 124.684 mo
590.35 125.333 587.15 125.673 583.86 125.673 cv
582.45 125.673 581.05 125.613 579.67 125.483 cv
577.43 125.283 575.24 124.923 573.1 124.414 cv
577.29 106.704 582.783 86.9766 582.783 86.9766 cv
593.28 87.4932 li
593.45 124.684 li
cp
f
594.621 60.5811 mo
594.367 60.5811 594.15 60.3882 594.124 60.1304 cv
593.417 52.9873 588.642 50.4502 588.594 50.4253 cv
588.348 50.2993 588.251 49.9976 588.378 49.752 cv
588.505 49.5059 588.807 49.4097 589.051 49.5366 cv
589.268 49.6479 594.359 52.3525 595.12 60.0317 cv
595.146 60.3066 594.946 60.5513 594.671 60.5786 cv
594.654 60.5801 594.638 60.5811 594.621 60.5811 cv
cp
1 1 1 rgb
f
572.105 52.2363 mo
572.105 52.2363 570.397 54.4341 570.166 57.9771 cv
569.934 61.52 569.934 61.52 569.934 61.52 cv
584.603 65.7954 li
584.898 58.6963 li
572.105 52.2363 li
cp
.898039 .392157 .270588 rgb
f
570.89 54.5835 mo
570.89 54.5835 569.601 55.7075 569.019 57.2134 cv
568.437 58.7188 567.826 61.708 567.826 61.708 cv
563.579 61.2324 li
564.063 53.8188 li
569.792 50.3105 li
573.253 50.6982 li
572.718 55.4736 li
570.89 54.5835 li
cp
f
348.065 245 mo
344.075 246.12 339.865 246.71 335.525 246.71 cv
332.795 246.71 330.116 246.48 327.516 246.02 cv
326.156 245.78 324.826 245.49 323.505 245.14 cv
321.726 244.67 319.976 244.09 318.286 243.41 cv
321.596 210.08 li
339.646 205.82 li
346.825 207.95 li
348.065 245 li
cp
.968627 .45098 .309804 rgb
f
324.321 176.279 mo
324.321 176.279 317.471 167.839 319.323 166.724 cv
321.174 165.609 322.926 167.311 322.926 167.311 cv
322.926 167.311 336.886 165.11 341.98 166.557 cv
347.075 168.004 350.485 176.341 350.485 176.341 cv
350.485 176.341 353.039 176.104 354.12 179.587 cv
355.201 183.071 347.686 200.205 342.885 199.308 cv
338.084 198.412 324.321 176.279 324.321 176.279 cv
cp
0 0 0 rgb
f
342.829 196.548 mo
343.064 208.205 li
343.064 208.205 341.03 211.598 334.223 212.29 cv
329.151 212.806 327.343 211.693 327.343 211.693 cv
327.932 205.775 li
328.514 200.004 li
340.772 197.047 li
342.829 196.548 li
cp
.988235 .639216 .592157 rgb
f
340.772 197.047 mo
340.749 197.366 340.636 197.744 340.456 198.179 cv
337.966 204.054 330.861 205.453 327.932 205.775 cv
328.514 200.004 li
340.772 197.047 li
cp
0 0 0 rgb
f
325.378 173.488 mo
325.378 173.488 319.556 188.226 322.132 196.297 cv
324.707 204.368 332.089 202.819 336.477 201.085 cv
340.865 199.35 342.83 196.551 342.83 196.551 cv
342.83 196.551 347.032 197.81 349.671 193.851 cv
352.31 189.891 350.441 185.519 348.035 184.588 cv
345.628 183.657 342.871 185.469 342.871 185.469 cv
344.93 181.172 li
344.93 181.172 334.869 160.072 325.378 173.488 cv
cp
.988235 .639216 .592157 rgb
f
325.378 173.488 mo
325.378 173.488 329.914 171.663 331.85 173.262 cv
333.786 174.862 336.067 188.373 342.871 185.469 cv
349.674 182.564 346.154 173.908 346.154 173.908 cv
346.154 173.908 329.042 159.255 325.378 173.488 cv
cp
0 0 0 rgb
f
327.936 205.78 mo
327.936 205.78 325.806 225.44 323.505 245.14 cv
311.036 241.83 300.625 233.48 294.576 222.4 cv
298.275 218.52 304.196 212.03 309.306 209.96 cv
318.226 206.34 327.936 205.78 327.936 205.78 cv
cp
.313726 .470588 .286275 rgb
f
501.646 342.27 mo
493.825 357.03 478.296 367.08 460.426 367.08 cv
454.716 367.08 449.256 366.05 444.206 364.17 cv
441.655 363.23 439.216 362.07 436.896 360.7 cv
438.115 346.87 439.376 335.26 440.315 333.08 cv
441.985 329.21 453.176 326.49 460.785 325.07 cv
464.865 324.31 467.916 323.92 467.916 323.92 cv
467.916 323.92 482.936 324.52 495.126 334.71 cv
497.315 336.54 499.525 339.16 501.646 342.27 cv
cp
.486275 .376471 .32549 rgb
f
449.545 287.746 mo
449.545 287.746 444.242 293.745 447.157 300.358 cv
450.072 306.972 453.199 288.345 453.199 288.345 cv
449.545 287.746 li
cp
.678431 .662745 .768627 rgb
f
467.38 314.699 mo
467.581 326.599 li
467.581 326.599 465.493 330.055 458.542 330.739 cv
453.363 331.248 451.522 330.106 451.522 330.106 cv
452.143 324.068 li
452.756 318.18 li
465.278 315.201 li
467.38 314.699 li
cp
.94902 .494118 .392157 rgb
f
465.278 315.201 mo
465.254 315.527 467.193 316.55 467.009 316.993 cv
464.447 322.981 454.902 325.992 451.912 326.311 cv
452.756 318.18 li
465.278 315.201 li
cp
0 0 0 rgb
f
451.805 288.34 mo
450.172 289.67 449.028 291.5 448.353 293.495 cv
446.797 298.088 443.658 308.81 445.715 315.384 cv
448.387 323.927 456.089 322.327 460.669 320.516 cv
465.249 318.705 467.304 315.757 467.304 315.757 cv
467.304 315.757 471.685 317.108 474.443 312.938 cv
477.203 308.766 475.263 304.136 472.754 303.14 cv
470.246 302.144 467.366 304.045 467.366 304.045 cv
469.521 299.515 li
469.521 299.515 460.849 280.977 451.805 288.34 cv
cp
.94902 .494118 .392157 rgb
f
468 309.833 mo
467.848 309.833 467.697 309.764 467.599 309.632 cv
467.434 309.41 467.479 309.097 467.701 308.932 cv
472.046 305.693 li
472.267 305.529 472.579 305.573 472.746 305.796 cv
472.91 306.018 472.865 306.331 472.644 306.496 cv
468.299 309.734 li
468.209 309.801 468.104 309.833 468 309.833 cv
cp
0 0 0 rgb
f
472.885 309.684 mo
472.847 309.684 472.808 309.68 472.769 309.67 cv
469.223 308.821 li
468.954 308.757 468.788 308.487 468.853 308.219 cv
468.916 307.95 469.182 307.781 469.455 307.849 cv
473.001 308.697 li
473.27 308.762 473.436 309.031 473.371 309.3 cv
473.316 309.529 473.111 309.684 472.885 309.684 cv
cp
f
448.303 302.208 mo
448.263 302.208 448.221 302.203 448.18 302.192 cv
447.912 302.124 447.75 301.853 447.818 301.585 cv
448.517 298.843 li
448.585 298.575 448.853 298.41 449.124 298.481 cv
449.392 298.55 449.554 298.821 449.485 299.089 cv
448.787 301.831 li
448.729 302.058 448.526 302.208 448.303 302.208 cv
cp
f
455.84 302.607 mo
455.799 302.607 455.758 302.603 455.716 302.592 cv
455.448 302.523 455.287 302.251 455.355 301.983 cv
456.055 299.242 li
456.123 298.976 456.393 298.813 456.663 298.882 cv
456.931 298.95 457.092 299.223 457.023 299.49 cv
456.324 302.231 li
456.267 302.457 456.063 302.607 455.84 302.607 cv
cp
f
447.871 296.223 mo
447.619 296.223 447.402 296.032 447.375 295.776 cv
447.346 295.502 447.544 295.255 447.818 295.226 cv
450.076 294.981 li
450.35 294.953 450.598 295.15 450.627 295.425 cv
450.656 295.699 450.458 295.946 450.184 295.976 cv
447.926 296.22 li
447.907 296.222 447.89 296.223 447.871 296.223 cv
cp
.423529 .419608 .486275 rgb
f
458.111 298.036 mo
458.047 298.036 457.981 298.023 457.918 297.997 cv
454.848 296.713 li
454.594 296.606 454.474 296.313 454.58 296.059 cv
454.687 295.804 454.979 295.684 455.234 295.791 cv
458.305 297.075 li
458.559 297.182 458.679 297.475 458.572 297.729 cv
458.492 297.921 458.307 298.036 458.111 298.036 cv
cp
f
467.366 304.045 mo
467.366 304.045 466.133 308.997 465.183 308.393 cv
464.233 307.789 463.346 300.648 464.053 297.453 cv
464.761 294.257 465.277 292.649 465.277 292.649 cv
465.277 292.649 452.279 291.494 448.853 288.405 cv
445.427 285.316 452.664 283.323 460.067 284.726 cv
467.47 286.127 470.389 288.909 470.389 288.909 cv
470.389 288.909 475.026 288.217 476.76 291.047 cv
478.493 293.876 474.548 304.627 474.548 304.627 cv
474.548 304.627 473.379 301.929 467.366 304.045 cv
cp
.678431 .662745 .768627 rgb
f
442.576 309.159 mo
442.576 309.159 446.208 305.138 448.057 305.741 cv
449.905 306.344 450.577 309.047 450.577 309.047 cv
450.577 309.047 452.771 306.01 455.19 306.864 cv
457.61 307.719 462.799 308.035 462.854 308.875 cv
462.908 309.714 461.406 310.015 461.406 310.015 cv
461.406 310.015 449.194 311.426 442.576 309.159 cv
cp
f
467.366 304.045 mo
467.366 304.045 467.148 312.075 467.304 315.757 cv
467.46 319.438 457.226 325.181 450.157 322.009 cv
443.088 318.837 445.026 309.574 445.026 309.574 cv
451.326 310.156 li
451.326 310.156 452.778 309.333 454.43 308.993 cv
456.08 308.653 458.28 309.553 458.28 309.553 cv
467.366 304.045 li
cp
f
580.323 173.149 mo
580.323 173.149 586.598 164.371 602.648 173.059 cv
618.699 181.748 611.891 221.65 611.891 221.65 cv
581.68 217.763 li
580.323 173.149 li
cp
0 0 0 rgb
f
585.581 196.456 mo
586.294 207.942 li
586.294 207.942 584.508 211.364 578.08 212.299 cv
573.292 212.994 571.609 210.516 571.609 210.516 cv
572.151 200.394 li
583.652 197.023 li
585.581 196.456 li
cp
.988235 .639216 .592157 rgb
f
585.521 195.756 mo
585.513 196.072 585.421 196.449 585.269 196.884 cv
583.153 202.771 574.605 205.681 571.841 206.106 cv
572.151 200.394 li
585.521 195.756 li
cp
0 0 0 rgb
f
568.063 174.358 mo
568.063 174.358 563.161 189.109 565.942 196.973 cv
568.724 204.838 575.659 203.038 579.748 201.165 cv
583.837 199.292 585.583 196.458 585.583 196.458 cv
585.583 196.458 589.621 197.545 591.957 193.542 cv
594.293 189.54 592.338 185.296 590.017 184.467 cv
587.695 183.638 585.156 185.527 585.156 185.527 cv
586.928 181.214 li
586.928 181.214 576.501 160.776 568.063 174.358 cv
cp
.988235 .639216 .592157 rgb
f
570.059 192.515 mo
569.858 192.515 569.67 192.395 569.593 192.197 cv
568.425 189.207 570.241 185.914 570.319 185.775 cv
570.454 185.535 570.76 185.449 570.999 185.584 cv
571.24 185.719 571.325 186.024 571.191 186.265 cv
571.175 186.295 569.53 189.288 570.524 191.833 cv
570.625 192.09 570.498 192.38 570.24 192.481 cv
570.181 192.504 570.119 192.515 570.059 192.515 cv
cp
0 0 0 rgb
f
586.261 192.223 mo
586.154 192.223 586.048 192.189 585.957 192.12 cv
585.737 191.952 585.696 191.638 585.864 191.419 cv
589.251 186.997 li
589.418 186.777 589.732 186.736 589.951 186.904 cv
590.171 187.072 590.212 187.386 590.044 187.605 cv
586.657 192.027 li
586.56 192.156 586.411 192.223 586.261 192.223 cv
cp
f
590.118 190.792 mo
590.081 190.791 587.468 190.599 587.468 190.599 cv
587.191 190.579 586.985 190.339 587.005 190.064 cv
587.025 189.788 587.282 189.575 587.54 189.602 cv
590.153 189.794 li
590.43 189.814 590.636 190.054 590.616 190.329 cv
590.597 190.592 590.377 190.792 590.118 190.792 cv
cp
f
566.405 181.047 mo
566.185 181.047 565.983 180.9 565.923 180.678 cv
565.851 180.411 566.008 180.137 566.274 180.064 cv
568.675 179.413 li
568.945 179.338 569.216 179.499 569.288 179.765 cv
569.36 180.031 569.203 180.306 568.937 180.378 cv
566.536 181.029 li
566.492 181.042 566.448 181.047 566.405 181.047 cv
cp
f
576.684 181.838 mo
576.643 181.838 576.601 181.833 576.559 181.822 cv
573.159 180.941 li
572.892 180.872 572.73 180.599 572.8 180.332 cv
572.869 180.065 573.141 179.9 573.409 179.973 cv
576.809 180.854 li
577.076 180.923 577.237 181.196 577.168 181.463 cv
577.109 181.688 576.906 181.838 576.684 181.838 cv
cp
f
566.913 186.909 mo
566.88 186.909 566.846 186.906 566.813 186.899 cv
566.542 186.844 566.367 186.58 566.422 186.31 cv
566.909 183.919 li
566.24 183.205 li
566.052 183.003 566.063 182.687 566.264 182.498 cv
566.466 182.308 566.782 182.32 566.971 182.521 cv
567.815 183.424 li
567.926 183.542 567.973 183.707 567.94 183.865 cv
567.402 186.509 li
567.354 186.746 567.146 186.909 566.913 186.909 cv
cp
f
574.488 187.003 mo
574.455 187.003 574.421 187 574.388 186.993 cv
574.117 186.938 573.942 186.674 573.997 186.403 cv
574.483 184.02 li
573.508 183.024 li
573.314 182.827 573.318 182.51 573.516 182.317 cv
573.712 182.125 574.03 182.128 574.223 182.324 cv
575.384 183.51 li
575.5 183.628 575.55 183.797 575.517 183.96 cv
574.978 186.604 li
574.929 186.84 574.721 187.003 574.488 187.003 cv
cp
f
571.47 212.578 mo
571.47 212.578 570.234 206.476 571.841 206.106 cv
573.448 205.737 575.353 206.786 579.106 205.854 cv
582.859 204.922 584.817 203.519 586.016 203.449 cv
587.213 203.379 586.842 211.064 586.842 211.064 cv
577.573 214.982 li
571.47 212.578 li
cp
.313726 .470588 .286275 rgb
f
590.673 184.811 mo
590.673 184.811 588.866 184.166 587.519 184.43 cv
586.158 184.684 585.155 185.53 585.155 185.53 cv
583.498 187.835 li
584.431 183.114 li
584.431 183.114 583.224 182.458 581.421 181.729 cv
582.04 177.656 li
580.384 181.322 li
578.662 180.68 576.595 180.067 574.539 179.843 cv
573.432 179.718 572.436 179.667 571.581 179.656 cv
572.126 175.221 li
570.463 179.657 li
568.253 179.722 567.131 180.04 567.131 180.04 cv
565.638 184.609 li
565.638 184.609 565.271 172.29 570.611 168.908 cv
575.951 165.525 585.675 165.509 590.164 171.333 cv
594.653 177.158 590.673 184.811 590.673 184.811 cv
cp
0 0 0 rgb
f
121.226 231.92 mo
121.125 232.04 121.025 232.15 120.916 232.26 cv
120.775 232.41 120.625 232.56 120.486 232.7 cv
112.025 241.34 100.226 246.71 87.1655 246.71 cv
85.1455 246.71 83.1357 246.58 81.1855 246.34 cv
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
76.3354 245.7 71.7554 244.35 67.5254 242.38 cv
67.9258 225.49 67.7554 210.71 67.7554 210.43 cv
67.9155 210.08 75.7358 208.07 86.1455 207.73 cv
102.525 207.21 116.366 216.45 121.226 231.92 cv
cp
.313726 .470588 .286275 rgb
f
81.1855 246.34 mo
81.1655 246.33 81.1558 246.33 81.1357 246.33 cv
76.3354 245.7 71.7554 244.35 67.5254 242.38 cv
67.1758 242.22 66.8257 242.05 66.4756 241.88 cv
59.5854 238.47 53.6655 233.39 49.2353 227.18 cv
58.2158 214.87 65.5557 211.28 67.7554 210.43 cv
68.2056 210.25 68.4355 210.19 68.4355 210.19 cv
81.1855 246.34 li
cp
f
87.3467 180.327 mo
87.3467 180.327 98.1103 180.84 98.7202 170.518 cv
99.3686 159.527 89.2002 158.474 84.8823 162.917 cv
80.5644 167.361 81.3638 171.88 81.3638 171.88 cv
81.3638 171.88 78.354 169.167 75.0708 172.5 cv
72.6616 174.945 73.9048 178.943 73.9048 178.943 cv
73.9048 178.943 68.353 178.729 68.8706 183.577 cv
69.3882 188.425 72.855 190.886 72.855 190.886 cv
87.3467 180.327 li
cp
.898039 .392157 .270588 rgb
f
77.5054 199.333 mo
78.624 210.771 li
78.624 210.771 81.0083 213.856 87.7529 213.746 cv
92.7768 213.663 94.4175 212.365 94.4175 212.365 cv
93.1562 206.641 li
91.9184 201.059 li
79.5762 199.583 li
77.5054 199.333 li
cp
.988235 .639216 .592157 rgb
f
79.5762 199.583 mo
79.6357 199.893 79.7905 200.25 80.0166 200.654 cv
83.1348 206.117 90.2519 206.664 93.1562 206.641 cv
91.9184 201.059 li
79.5762 199.583 li
cp
0 0 0 rgb
f
91.9184 174.739 mo
91.9184 174.739 99.3237 188.492 97.7368 196.691 cv
96.1499 204.89 88.7446 204.229 84.2485 203.038 cv
79.7524 201.849 77.5039 199.336 77.5039 199.336 cv
77.5039 199.336 73.5371 201.055 70.4951 197.484 cv
67.4536 193.914 68.7764 189.417 71.0244 188.228 cv
73.2725 187.038 76.1816 188.492 76.1816 188.492 cv
73.6689 184.525 li
73.6689 184.525 81.0747 162.705 91.9184 174.739 cv
cp
.988235 .639216 .592157 rgb
f
76.3179 194.753 mo
76.2329 194.753 76.1465 194.731 76.0674 194.686 cv
71.5317 192.053 li
71.293 191.914 71.2114 191.608 71.3501 191.369 cv
71.4878 191.13 71.7934 191.048 72.0337 191.188 cv
76.5693 193.82 li
76.8081 193.959 76.8896 194.265 76.751 194.504 cv
76.6582 194.664 76.4902 194.753 76.3179 194.753 cv
cp
0 0 0 rgb
f
72.6157 195.148 mo
72.4355 195.148 72.2612 195.051 72.1719 194.88 cv
72.0444 194.635 72.1392 194.333 72.3838 194.205 cv
74.6919 193 li
74.9355 192.872 75.2388 192.967 75.3667 193.211 cv
75.4941 193.456 75.3994 193.758 75.1548 193.886 cv
72.8467 195.092 li
72.7729 195.13 72.6938 195.148 72.6157 195.148 cv
cp
f
93.9243 180.13 mo
93.8281 180.13 93.7314 180.103 93.6455 180.045 cv
92.3677 179.185 91.1943 180 91.1455 180.036 cv
90.9224 180.196 90.6094 180.146 90.4487 179.922 cv
90.2881 179.699 90.3364 179.389 90.5581 179.227 cv
90.6309 179.175 92.3384 177.958 94.2041 179.216 cv
94.4331 179.37 94.4936 179.681 94.3393 179.91 cv
94.2432 180.053 94.085 180.13 93.9243 180.13 cv
cp
f
92.3892 193.152 mo
92.3574 193.152 92.3257 193.149 92.2934 193.143 cv
92.022 193.09 91.8452 192.828 91.8979 192.557 cv
92.7275 188.289 90.2495 185.511 90.2241 185.483 cv
90.0381 185.279 90.0527 184.963 90.2568 184.777 cv
90.4604 184.591 90.7778 184.606 90.9634 184.81 cv
91.0796 184.938 93.8042 187.992 92.8794 192.747 cv
92.833 192.986 92.6235 193.152 92.3892 193.152 cv
cp
f
93.9316 186.882 mo
93.6655 186.882 93.4438 186.672 93.4326 186.403 cv
93.3164 183.673 li
93.3047 183.397 93.5185 183.164 93.7944 183.152 cv
94.0732 183.141 94.3042 183.354 94.3154 183.63 cv
94.4316 186.36 li
94.4434 186.636 94.2295 186.87 93.9536 186.881 cv
93.9463 186.882 93.939 186.882 93.9316 186.882 cv
cp
f
86.4238 187.599 mo
86.1577 187.599 85.936 187.389 85.9248 187.121 cv
85.8081 184.391 li
85.7964 184.115 86.0102 183.881 86.2861 183.87 cv
86.563 183.852 86.7959 184.072 86.8071 184.348 cv
86.9238 187.078 li
86.9355 187.354 86.7217 187.587 86.4458 187.599 cv
86.4385 187.599 86.4311 187.599 86.4238 187.599 cv
cp
f
93.4385 177.853 mo
93.4385 177.853 91.9717 175.675 89.1167 175.935 cv
86.2617 176.194 84.792 178.367 84.792 178.367 cv
84.792 178.367 86.5137 183.049 82.8838 185.98 cv
79.2534 188.912 76.1816 188.492 76.1816 188.492 cv
73.2695 187.764 li
70.8032 183.854 li
78.0859 174.284 li
88.0786 167.692 li
93.9248 172.042 li
93.4385 177.853 li
cp
.898039 .392157 .270588 rgb
f
90.0127 196.083 mo
89.0298 196.083 87.3213 195.8 86.2705 194.031 cv
86.1294 193.794 86.2075 193.487 86.4448 193.346 cv
86.6816 193.205 86.9893 193.283 87.1299 193.521 cv
88.2759 195.448 90.4873 195.058 90.5796 195.04 cv
90.8525 194.989 91.1123 195.166 91.1641 195.437 cv
91.2158 195.707 91.04 195.969 90.77 196.021 cv
90.7329 196.029 90.4419 196.083 90.0127 196.083 cv
cp
0 0 0 rgb
f
96.9419 181.959 mo
94.8061 181.959 93.0688 183.763 93.0688 185.98 cv
93.0688 188.198 94.8061 190.001 96.9419 190.001 cv
99.0776 190.001 100.815 188.198 100.815 185.98 cv
100.815 183.763 99.0776 181.959 96.9419 181.959 cv
cp
96.9419 191.001 mo
94.2549 191.001 92.0688 188.749 92.0688 185.98 cv
92.0688 183.212 94.2549 180.959 96.9419 180.959 cv
99.6294 180.959 101.815 183.212 101.815 185.98 cv
101.815 188.749 99.6294 191.001 96.9419 191.001 cv
cp
1 1 1 rgb
f
85.3662 183.078 mo
83.1489 183.078 81.3447 184.882 81.3447 187.099 cv
81.3447 189.316 83.1489 191.12 85.3662 191.12 cv
87.5835 191.12 89.3872 189.316 89.3872 187.099 cv
89.3872 184.882 87.5835 183.078 85.3662 183.078 cv
cp
85.3662 192.12 mo
82.5972 192.12 80.3447 189.868 80.3447 187.099 cv
80.3447 184.33 82.5972 182.078 85.3662 182.078 cv
88.1348 182.078 90.3872 184.33 90.3872 187.099 cv
90.3872 189.868 88.1348 192.12 85.3662 192.12 cv
cp
f
89.4009 187.075 mo
89.1431 187.075 88.9243 186.877 88.9028 186.616 cv
88.8804 186.341 89.0854 186.099 89.3608 186.077 cv
92.896 185.788 li
93.1719 185.77 93.4126 185.97 93.4351 186.246 cv
93.4575 186.521 93.2524 186.762 92.977 186.785 cv
89.4419 187.074 li
89.4282 187.075 89.4145 187.075 89.4009 187.075 cv
cp
f
73.2695 188.264 mo
73.1465 188.264 73.0234 188.219 72.9268 188.128 cv
72.7256 187.939 72.7163 187.623 72.9053 187.421 cv
75.5947 184.564 80.8501 187.206 81.0727 187.319 cv
81.3184 187.445 81.4155 187.746 81.2895 187.992 cv
81.1645 188.238 80.8638 188.336 80.6172 188.209 cv
80.5698 188.185 75.8081 185.796 73.6338 188.107 cv
73.5351 188.211 73.4023 188.264 73.2695 188.264 cv
cp
f
87.8901 213.846 mo
84.6597 213.846 80.9062 213.026 77.2612 210.35 cv
77.0386 210.186 76.9907 209.873 77.1543 209.65 cv
77.3169 209.428 77.6304 209.379 77.853 209.543 cv
86.6826 216.029 96.2114 210.977 96.3066 210.924 cv
96.5478 210.794 96.8525 210.882 96.9849 211.124 cv
97.1167 211.366 97.0278 211.67 96.7856 211.802 cv
96.7241 211.836 92.9492 213.846 87.8901 213.846 cv
cp
f
132.226 91.0298 mo
126.946 110.98 108.775 125.67 87.1655 125.67 cv
72.6255 125.67 59.6455 119.02 51.0957 108.6 cv
64.7358 91.9102 79.4458 90.1299 79.4458 90.1299 cv
79.4458 90.1299 79.0957 87.6099 79.4458 86.9302 cv
79.6958 86.4502 80.6157 86.0098 81.1255 85.7998 cv
81.3257 85.7202 81.4556 85.6699 81.4556 85.6699 cv
81.4556 85.6699 82.1958 85.54 83.3555 85.3599 cv
85.6855 84.9902 89.7056 84.3999 92.8257 84.1699 cv
93.7754 84.0898 94.6455 84.0498 95.3555 84.0601 cv
96.1255 84.0698 96.7158 84.1401 97.0356 84.29 cv
97.4258 84.4702 97.8755 85.6699 97.8755 85.6699 cv
97.8755 85.6699 103.646 84.7798 111.616 85.6699 cv
114.966 86.0498 123.295 87.5898 132.226 91.0298 cv
cp
.486275 .376471 .32549 rgb
f
79.2812 64.8667 mo
79.2812 64.8667 71.1289 62.251 71.0845 68.3789 cv
71.0337 75.4785 79.4458 74.7593 79.4458 74.7593 cv
79.2812 64.8667 li
cp
.94902 .494118 .392157 rgb
f
75.9243 71.6006 mo
75.7685 71.6006 75.6147 71.5278 75.5171 71.3916 cv
72.4824 67.1509 li
72.3218 66.9263 72.3735 66.6138 72.5981 66.4531 cv
72.8237 66.293 73.1348 66.3442 73.2959 66.5688 cv
76.3306 70.8096 li
76.4912 71.0342 76.4394 71.3467 76.2148 71.5073 cv
76.1265 71.5703 76.0249 71.6006 75.9243 71.6006 cv
cp
0 0 0 rgb
f
72.7544 70.5396 mo
72.5024 70.5396 72.2861 70.3501 72.2578 70.0942 cv
72.2275 69.8198 72.4258 69.5728 72.7002 69.5425 cv
74.9336 69.2964 li
75.2095 69.2651 75.4546 69.4644 75.4853 69.7388 cv
75.5156 70.0132 75.3174 70.2603 75.043 70.2905 cv
72.8096 70.5366 li
72.791 70.5386 72.7725 70.5396 72.7544 70.5396 cv
cp
f
94.9756 80.271 mo
95.8096 88.4971 li
95.8096 88.4971 92.7905 90.5049 88.8242 90.9434 cv
83.4692 91.5352 81.3628 88.522 81.3628 88.522 cv
80.5024 78.8667 li
94.9756 80.271 li
cp
.94902 .494118 .392157 rgb
f
94.9741 80.2588 mo
94.9741 80.2588 93.0259 87.1626 86.852 86.8203 cv
81.875 86.5449 79.8232 79.7163 79.8232 79.7163 cv
94.9741 80.2588 li
cp
0 0 0 rgb
f
76.1606 58.3652 mo
76.1606 58.3652 74.1274 73.7534 79.0654 80.0239 cv
84.3613 86.7485 91.6157 83.917 94.2051 81.5117 cv
97.6982 78.2671 98.0947 74.1816 98.0947 74.1816 cv
98.0947 74.1816 103.363 74.729 104.694 70.3501 cv
106.093 65.75 102.538 62.4756 99.9311 62.5054 cv
97.3242 62.5356 97.0664 63.0352 97.0664 63.0352 cv
97.3843 58.2324 li
97.3843 58.2324 80.0254 42.2183 76.1606 58.3652 cv
cp
.94902 .494118 .392157 rgb
f
98.5088 69.8193 mo
98.3838 69.8193 98.2583 69.7725 98.1611 69.6787 cv
97.9629 69.4868 97.9575 69.1704 98.1494 68.9717 cv
101.822 65.1753 li
102.014 64.9775 102.331 64.9722 102.529 65.1636 cv
102.727 65.3555 102.732 65.6719 102.541 65.8706 cv
98.8682 69.667 li
98.77 69.7686 98.6396 69.8193 98.5088 69.8193 cv
cp
0 0 0 rgb
f
102.254 70.106 mo
102.165 70.106 102.074 70.082 101.992 70.0317 cv
99.4707 68.4795 li
99.2358 68.335 99.1626 68.0269 99.3071 67.7915 cv
99.4512 67.5566 99.7588 67.4819 99.9951 67.6279 cv
102.517 69.1802 li
102.751 69.3247 102.825 69.6328 102.68 69.8682 cv
102.586 70.0215 102.422 70.106 102.254 70.106 cv
cp
f
90.3379 66.3833 mo
90.0698 66.3833 89.8481 66.1704 89.8389 65.9004 cv
89.751 63.3516 li
89.7412 63.0757 89.9575 62.8442 90.2334 62.835 cv
90.5083 62.8057 90.7402 63.0415 90.75 63.3174 cv
90.8379 65.8662 li
90.8476 66.1421 90.6313 66.3735 90.3555 66.3828 cv
90.3496 66.3833 90.3437 66.3833 90.3379 66.3833 cv
cp
f
80.5854 66.7563 mo
80.3174 66.7563 80.0957 66.5439 80.0864 66.2734 cv
79.998 63.7246 li
79.9883 63.4487 80.2041 63.2173 80.4805 63.208 cv
80.7612 63.1938 80.9878 63.4141 80.9971 63.6904 cv
81.0854 66.2393 li
81.0952 66.5151 80.8794 66.7466 80.603 66.7559 cv
80.5972 66.7563 80.5913 66.7563 80.5854 66.7563 cv
cp
f
85.6914 73.063 mo
85.4756 73.063 85.2764 72.9224 85.2119 72.7051 cv
84.0464 68.77 85.0225 65.3965 85.0644 65.2549 cv
85.1435 64.9907 85.4204 64.8379 85.6855 64.9185 cv
85.9502 64.9966 86.1016 65.2749 86.0234 65.5396 cv
86.0142 65.5713 85.0928 68.7817 86.1709 72.4209 cv
86.249 72.6855 86.0981 72.9639 85.8335 73.0425 cv
85.7861 73.0566 85.7383 73.063 85.6914 73.063 cv
cp
f
78.8516 61.5542 mo
78.7275 61.5542 78.603 61.5083 78.5063 61.416 cv
78.3066 61.2251 78.2993 60.9087 78.4897 60.709 cv
79.5044 59.646 81.3393 59.4912 81.417 59.4854 cv
81.6938 59.4668 81.9321 59.6694 81.9541 59.9443 cv
81.9761 60.2192 81.7705 60.46 81.4956 60.4824 cv
81.4805 60.4834 79.9614 60.6152 79.2134 61.3994 cv
79.1152 61.5024 78.9834 61.5542 78.8516 61.5542 cv
cp
f
91.3833 61.3462 mo
91.2978 61.3462 91.2109 61.3242 91.1318 61.2778 cv
90.1958 60.7319 88.6997 61.0259 88.6846 61.0288 cv
88.4131 61.082 88.1504 60.9097 88.0947 60.6392 cv
88.04 60.3687 88.2134 60.105 88.4839 60.0493 cv
88.5605 60.0342 90.3667 59.6733 91.6357 60.4146 cv
91.8745 60.5537 91.9546 60.8599 91.8154 61.0981 cv
91.7226 61.2573 91.5552 61.3462 91.3833 61.3462 cv
cp
f
98.2627 62.9492 mo
98.2627 62.9492 97.0698 67.7471 96.4502 67.6133 cv
95.8306 67.48 96.1606 60.0576 97.8838 59.5986 cv
99.6064 59.1396 98.2627 62.9492 98.2627 62.9492 cv
cp
f
86.4409 77.4121 mo
86.1743 77.4121 85.9536 77.2012 85.9424 76.9321 cv
85.9311 76.6567 86.146 76.4243 86.4214 76.4126 cv
86.5249 76.4082 88.9692 76.2788 89.9224 74.1851 cv
90.0371 73.9336 90.3345 73.8228 90.5845 73.937 cv
90.8359 74.0513 90.9468 74.3477 90.8325 74.5991 cv
89.6206 77.2622 86.5889 77.4067 86.4604 77.4116 cv
86.4541 77.4121 86.4473 77.4121 86.4409 77.4121 cv
cp
f
97.4614 62.3296 mo
97.4614 62.3296 92.2104 62.1201 88.585 59.5605 cv
85.5229 57.3989 84.2339 54.1777 84.2339 54.1777 cv
84.2339 54.1777 81.9722 53.9878 78.8516 56.1011 cv
75.7314 58.2144 75.7461 64.3169 75.7461 64.3169 cv
75.7461 64.3169 69.3706 54.2529 72.0322 50.4771 cv
74.6938 46.7012 79.4458 49.5332 79.4458 49.5332 cv
79.4458 49.5332 78.333 42.8198 87.7891 45.0225 cv
97.2451 47.2256 99.7329 55.1973 99.7329 55.1973 cv
99.7329 55.1973 102.909 54.7778 103.434 57.7144 cv
103.958 60.6514 102.886 63.7075 102.886 63.7075 cv
102.886 63.7075 101.441 62.4512 99.3433 63.3345 cv
97.2451 64.2178 97.2451 64.2178 97.2451 64.2178 cv
97.4614 62.3296 li
cp
f
81.456 85.6743 mo
81.456 85.6743 83.2744 87.3984 87.4805 87.5034 cv
91.686 87.6084 95.375 84.2095 95.375 84.2095 cv
98.0845 89.1816 li
91.3838 93.2725 li
80.1538 92.3286 li
80.1538 87.2935 li
81.456 85.6743 li
cp
.486275 .376471 .32549 rgb
f
86.0952 93.7837 mo
81.5503 93.7837 79.0703 90.4604 79.041 90.4199 cv
78.8789 90.1973 78.9282 89.8853 79.1509 89.7227 cv
79.373 89.5601 79.686 89.6089 79.8491 89.8311 cv
79.978 90.0063 83.0713 94.1157 88.8516 92.3525 cv
89.1177 92.2729 89.395 92.4219 89.4756 92.6855 cv
89.5557 92.9497 89.4067 93.229 89.1426 93.3096 cv
88.0425 93.6445 87.0259 93.7837 86.0952 93.7837 cv
cp
1 1 1 rgb
f
191.361 72.6953 mo
191.361 72.6953 186.367 46.1968 205.757 41.3452 cv
225.148 36.4941 226.315 64.0156 226.315 64.0156 cv
226.315 64.0156 247.417 68.0308 247.555 88.5508 cv
247.727 114.197 222.94 109.886 222.94 109.886 cv
199.463 100.324 li
199.463 100.324 175.948 87.5176 191.361 72.6953 cv
cp
0 0 0 rgb
f
249.525 105.78 mo
243.446 114.49 234.446 120.99 223.966 123.94 cv
223.746 124 223.516 124.06 223.295 124.12 cv
219.486 125.13 215.476 125.67 211.346 125.67 cv
195.236 125.67 181.025 117.5 172.676 105.07 cv
178.936 96.5098 186.786 90.0298 192.125 87.73 cv
200.025 84.3301 212.556 82.0498 224.125 85.3599 cv
224.156 85.3701 224.196 85.3701 224.236 85.3799 cv
227.716 86.3799 231.096 87.8799 234.246 90.0098 cv
241.056 94.6099 246.016 99.9502 249.525 105.78 cv
cp
.968627 .45098 .309804 rgb
f
202.188 77.313 mo
202.19 77.5962 li
202.429 82.936 li
202.599 87.1235 li
202.599 87.1235 202.241 88.0972 207.115 87.7813 cv
213.647 87.3325 215.753 84.5264 215.753 84.5264 cv
216.031 74.7109 li
214.051 75.0884 li
202.188 77.313 li
cp
.988235 .639216 .592157 rgb
f
202.19 77.5962 mo
202.429 82.936 li
205.603 82.5508 211.38 81.1763 213.714 76.1836 cv
213.894 75.7773 214.013 75.4126 214.051 75.1089 cv
202.21 77.5151 li
202.19 77.5962 li
cp
0 0 0 rgb
f
200.12 52.0381 mo
200.12 52.0381 194.045 65.9419 196.233 73.7534 cv
198.422 81.5649 205.539 80.3354 209.797 78.8252 cv
214.056 77.3154 216.032 74.7041 216.032 74.7041 cv
216.032 74.7041 220.01 76.0527 222.67 72.354 cv
225.331 68.6548 223.693 64.4072 221.421 63.4341 cv
219.15 62.4604 216.45 64.1006 216.45 64.1006 cv
218.566 60.0596 li
218.566 60.0596 209.661 39.5244 200.12 52.0381 cv
cp
.988235 .639216 .592157 rgb
f
202.005 49.979 mo
202.005 49.979 201.566 57.377 209.008 60.7388 cv
216.45 64.1006 221.421 63.4341 221.421 63.4341 cv
220.938 53.7861 li
211.623 43.6665 li
203.294 46.3208 li
202.005 49.979 li
cp
0 0 0 rgb
f
215.946 61.9668 mo
215.974 66.1797 li
219.722 62.4839 li
215.946 61.9668 li
cp
f
251.226 103.19 mo
250.855 103.81 250.466 104.43 250.056 105.03 cv
249.886 105.28 249.716 105.53 249.525 105.78 cv
243.446 114.49 234.446 120.99 223.966 123.94 cv
223.746 124 223.516 124.06 223.295 124.12 cv
223.936 85.3301 li
223.936 85.3301 224.005 85.3398 224.125 85.3599 cv
224.156 85.3701 224.196 85.3701 224.236 85.3799 cv
226.536 85.77 241.605 88.75 249.696 100.61 cv
250.246 101.4 250.746 102.27 251.226 103.19 cv
cp
.968627 .45098 .309804 rgb
f
205.71 88.3569 mo
202.766 88.3569 200.572 87.8315 200.389 87.7861 cv
200.121 87.7197 199.958 87.4492 200.024 87.1812 cv
200.09 86.9131 200.363 86.7505 200.629 86.8154 cv
200.718 86.8379 209.531 88.9404 215.582 84.5293 cv
215.805 84.3682 216.117 84.416 216.281 84.6392 cv
216.443 84.8623 216.394 85.1748 216.171 85.3379 cv
212.851 87.7578 208.853 88.3569 205.71 88.3569 cv
cp
.466667 .447059 .827451 rgb
f
198.392 57.1157 mo
198.179 57.1157 197.982 56.979 197.915 56.7651 cv
197.833 56.5015 197.979 56.2207 198.243 56.1387 cv
201.014 55.2725 li
201.278 55.189 201.557 55.3359 201.64 55.6001 cv
201.723 55.8638 201.576 56.1445 201.313 56.2266 cv
198.542 57.0928 li
198.492 57.1084 198.441 57.1157 198.392 57.1157 cv
cp
0 0 0 rgb
f
216.733 70.5898 mo
216.599 70.5898 216.464 70.5356 216.365 70.4282 cv
216.179 70.2251 216.191 69.9087 216.395 69.7217 cv
220.682 65.7773 li
220.885 65.5908 221.202 65.604 221.388 65.8071 cv
221.575 66.0103 221.562 66.3267 221.358 66.5137 cv
217.072 70.458 li
216.976 70.5464 216.854 70.5898 216.733 70.5898 cv
cp
f
221.076 70.0708 mo
221.009 70.0708 220.94 70.0571 220.875 70.0288 cv
218.317 68.9058 li
218.064 68.7944 217.949 68.4995 218.06 68.2466 cv
218.171 67.9941 218.466 67.8789 218.719 67.9897 cv
221.277 69.1128 li
221.53 69.2241 221.645 69.519 221.534 69.772 cv
221.452 69.9595 221.268 70.0708 221.076 70.0708 cv
cp
f
199.249 64.1289 mo
199.215 64.1289 199.181 64.1255 199.147 64.1187 cv
198.876 64.0625 198.703 63.7979 198.759 63.5273 cv
199.27 61.0659 li
198.265 59.9077 li
198.083 59.6992 198.106 59.3833 198.314 59.2026 cv
198.523 59.0205 198.839 59.0444 199.02 59.2524 cv
200.187 60.5977 li
200.29 60.7153 200.331 60.874 200.299 61.0269 cv
199.738 63.7305 li
199.689 63.9668 199.481 64.1289 199.249 64.1289 cv
cp
f
207.632 64.5557 mo
207.599 64.5557 207.564 64.5522 207.53 64.5454 cv
207.26 64.4893 207.086 64.2246 207.142 63.9541 cv
207.653 61.4927 li
206.648 60.3345 li
206.467 60.126 206.489 59.8101 206.698 59.6294 cv
206.906 59.4473 207.222 59.4702 207.403 59.6792 cv
208.57 61.0244 li
208.673 61.1421 208.714 61.3008 208.683 61.4536 cv
208.122 64.1572 li
208.072 64.3936 207.864 64.5557 207.632 64.5557 cv
cp
f
200.907 70.2344 mo
200.676 70.2344 200.468 70.0728 200.418 69.8369 cv
199.488 65.3911 201.641 63.1519 201.733 63.0586 cv
201.927 62.8618 202.243 62.8599 202.44 63.0547 cv
202.636 63.248 202.638 63.564 202.445 63.7603 cv
202.362 63.8467 200.584 65.7485 201.397 69.6318 cv
201.454 69.9023 201.28 70.167 201.01 70.2236 cv
200.976 70.231 200.941 70.2344 200.907 70.2344 cv
cp
f
203.961 72.3672 mo
204.763 73.2007 205.334 73.5005 205.448 73.5103 cv
205.536 73.5005 205.87 73.3066 206.28 72.7939 cv
206.635 72.3501 206.813 71.9614 206.863 71.7627 cv
206.57 71.7881 205.696 71.8677 203.961 72.3672 cv
cp
205.425 74.5117 mo
205.128 74.5117 204.418 74.374 202.936 72.7339 cv
202.765 72.5435 202.703 72.2866 202.77 72.0454 cv
202.84 71.7944 203.039 71.5977 203.3 71.5186 cv
206.869 70.4512 207.353 70.8159 207.561 70.9722 cv
207.738 71.1055 208.006 71.4287 207.809 72.0933 cv
207.538 73.0044 206.402 74.4487 205.514 74.5083 cv
205.49 74.5098 205.46 74.5117 205.425 74.5117 cv
cp
f
188.762 102.97 mo
188.71 103.029 183.935 108.15 184.841 117.356 cv
184.554 117.171 184.277 116.977 184 116.772 cv
183.921 116.721 183.853 116.66 183.773 116.599 cv
183.186 107.458 187.982 102.347 188.043 102.278 cv
188.236 102.081 188.546 102.076 188.753 102.26 cv
188.95 102.453 188.955 102.773 188.762 102.97 cv
cp
.466667 .447059 .827451 rgb
f
215.981 187.187 mo
215.981 187.187 223.497 183.628 224.321 189.523 cv
225.277 196.352 217.085 196.733 217.085 196.733 cv
215.981 187.187 li
cp
.94902 .494118 .392157 rgb
f
220.008 193.261 mo
219.929 193.261 219.849 193.242 219.774 193.202 cv
219.53 193.072 219.438 192.77 219.567 192.526 cv
221.949 188.056 li
222.078 187.812 222.382 187.719 222.625 187.849 cv
222.869 187.979 222.961 188.282 222.832 188.525 cv
220.45 192.996 li
220.36 193.165 220.187 193.261 220.008 193.261 cv
cp
0 0 0 rgb
f
220.743 191.883 mo
220.472 191.883 220.249 191.666 220.243 191.394 cv
220.237 191.118 220.456 190.889 220.732 190.883 cv
222.914 190.835 li
223.188 190.84 223.419 191.049 223.425 191.324 cv
223.431 191.6 223.212 191.829 222.936 191.835 cv
220.754 191.883 li
220.75 191.883 220.747 191.883 220.743 191.883 cv
cp
f
251.146 224.39 mo
248.196 229.21 244.396 233.45 239.956 236.89 cv
239.666 237.13 239.375 237.35 239.076 237.56 cv
231.326 243.32 221.736 246.71 211.346 246.71 cv
205.116 246.71 199.166 245.49 193.736 243.27 cv
193.426 243.14 193.116 243.01 192.806 242.87 cv
186.366 240.08 180.686 235.88 176.156 230.66 cv
178.025 224.85 181.516 219.33 187.736 215.83 cv
203.616 206.9 227.396 206.9 237.976 211.92 cv
244.476 215 248.766 220.52 251.146 224.39 cv
cp
.466667 .447059 .827451 rgb
f
219.065 180.408 mo
219.065 180.408 224.032 172.396 223.03 168.977 cv
222.027 165.557 217.554 168.908 217.554 168.908 cv
217.554 168.908 216.536 161.541 211.049 162.971 cv
203.745 164.875 196.49 177.739 196.49 177.739 cv
196.49 177.739 192.771 176.806 191.512 180.066 cv
190.047 183.862 191.332 188.121 193.678 191.91 cv
196.024 195.698 202.377 192.574 202.377 192.574 cv
219.065 180.408 li
cp
0 0 0 rgb
f
203.646 203.601 mo
203.911 212.376 li
203.911 212.376 207.16 214.072 211.138 213.986 cv
216.508 213.869 218.237 211.507 218.237 211.507 cv
217.763 200.123 li
203.646 203.601 li
cp
.94902 .494118 .392157 rgb
f
203.641 203.395 mo
203.641 203.395 207.037 209.99 213.094 208.843 cv
217.977 207.919 217.777 201.004 217.777 201.004 cv
203.641 203.395 li
cp
0 0 0 rgb
f
219.065 180.408 mo
219.065 180.408 221.751 195.668 219.032 201.633 cv
215.981 208.325 208.171 207.43 205.371 205.443 cv
201.593 202.766 199.964 198.437 199.964 198.437 cv
199.964 198.437 194.961 199.636 193.121 195.589 cv
191.188 191.339 194.192 187.732 196.706 187.429 cv
199.22 187.125 199.532 187.573 199.532 187.573 cv
198.613 182.989 li
198.613 182.989 213.283 165.354 219.065 180.408 cv
cp
.94902 .494118 .392157 rgb
f
199.532 187.573 mo
199.532 187.573 202.8 187.688 206.491 184.754 cv
210.82 181.311 210.136 175.627 210.136 175.627 cv
210.136 175.627 218.016 180.146 219.974 186.1 cv
221.932 192.055 221.904 171.847 213.188 172.579 cv
204.472 173.311 192.842 179.003 199.532 187.573 cv
cp
0 0 0 rgb
f
198.944 194.308 mo
198.835 194.308 198.726 194.272 198.634 194.2 cv
194.614 191.013 li
194.397 190.841 194.361 190.527 194.532 190.311 cv
194.705 190.094 195.019 190.058 195.235 190.229 cv
199.255 193.416 li
199.472 193.587 199.508 193.902 199.337 194.118 cv
199.238 194.243 199.092 194.308 198.944 194.308 cv
cp
f
195.375 195.062 mo
195.23 195.062 195.086 194.999 194.987 194.877 cv
194.813 194.663 194.845 194.348 195.059 194.174 cv
197.289 192.358 li
197.503 192.183 197.819 192.216 197.992 192.43 cv
198.167 192.644 198.134 192.959 197.92 193.133 cv
195.691 194.949 li
195.598 195.025 195.486 195.062 195.375 195.062 cv
cp
f
207.281 189.836 mo
207.027 189.836 206.809 189.643 206.784 189.384 cv
206.544 186.919 li
206.517 186.644 206.718 186.4 206.993 186.373 cv
207.266 186.353 207.513 186.548 207.539 186.822 cv
207.779 189.288 li
207.806 189.563 207.605 189.807 207.33 189.833 cv
207.314 189.835 207.297 189.836 207.281 189.836 cv
cp
f
216.883 189.476 mo
216.628 189.476 216.411 189.283 216.386 189.025 cv
216.145 186.56 li
216.118 186.285 216.319 186.04 216.594 186.013 cv
216.873 185.992 217.113 186.188 217.14 186.462 cv
217.381 188.927 li
217.408 189.202 217.207 189.447 216.932 189.474 cv
216.916 189.475 216.899 189.476 216.883 189.476 cv
cp
f
213.364 195.583 mo
213.338 195.583 213.312 195.582 213.286 195.578 cv
213.013 195.535 212.827 195.278 212.869 195.006 cv
213.442 191.369 212.147 188.398 212.134 188.369 cv
212.022 188.117 212.135 187.821 212.387 187.708 cv
212.64 187.596 212.935 187.709 213.047 187.961 cv
213.106 188.092 214.478 191.22 213.857 195.161 cv
213.818 195.408 213.606 195.583 213.364 195.583 cv
cp
f
217.725 184.317 mo
217.615 184.317 217.505 184.281 217.412 184.207 cv
216.731 183.659 215.521 183.595 215.108 183.618 cv
214.838 183.628 214.597 183.421 214.582 183.146 cv
214.567 182.87 214.779 182.634 215.055 182.619 cv
215.128 182.615 216.921 182.529 218.039 183.427 cv
218.254 183.6 218.288 183.915 218.115 184.13 cv
218.017 184.253 217.872 184.317 217.725 184.317 cv
cp
f
206.467 184.692 mo
206.318 184.692 206.17 184.625 206.072 184.499 cv
205.902 184.28 205.942 183.966 206.16 183.797 cv
207.293 182.918 209.083 183.034 209.158 183.041 cv
209.433 183.06 209.64 183.298 209.621 183.574 cv
209.602 183.849 209.38 184.058 209.088 184.038 cv
209.072 184.034 207.601 183.944 206.773 184.587 cv
206.682 184.658 206.574 184.692 206.467 184.692 cv
cp
f
198.369 187.643 mo
198.369 187.643 200.13 192.11 200.709 191.903 cv
201.289 191.695 200.024 184.591 198.307 184.369 cv
196.589 184.146 198.369 187.643 198.369 187.643 cv
cp
f
211.174 214.466 mo
206.53 214.466 202.213 212.439 202.137 212.403 cv
201.888 212.283 201.783 211.985 201.903 211.736 cv
202.022 211.487 202.319 211.381 202.57 211.501 cv
202.694 211.562 215.038 217.348 219.688 208.799 cv
219.819 208.558 220.123 208.467 220.365 208.599 cv
220.608 208.73 220.698 209.034 220.565 209.277 cv
218.371 213.312 214.679 214.466 211.174 214.466 cv
cp
1 .74902 .411765 rgb
f
211.546 199.431 mo
210.075 199.431 209.279 198.527 209.04 197.938 cv
208.936 197.683 209.06 197.391 209.315 197.287 cv
209.568 197.185 209.859 197.304 209.965 197.557 cv
210.023 197.691 210.574 198.82 212.456 198.294 cv
212.721 198.221 212.999 198.375 213.072 198.641 cv
213.147 198.907 212.992 199.183 212.726 199.257 cv
212.292 199.378 211.9 199.431 211.546 199.431 cv
cp
0 0 0 rgb
f
82.8828 181.753 mo
82.792 181.753 82.7002 181.729 82.6177 181.677 cv
82.3838 181.53 82.313 181.222 82.4595 180.988 cv
83.8286 178.804 85.96 178.972 86.894 179.365 cv
87.1484 179.472 87.2681 179.765 87.1611 180.02 cv
87.0542 180.275 86.7622 180.394 86.5078 180.287 cv
86.4145 180.25 84.5542 179.529 83.3071 181.519 cv
83.2119 181.67 83.0493 181.753 82.8828 181.753 cv
cp
f
573.864 195.568 mo
573.612 195.568 573.396 195.378 573.368 195.122 cv
573.339 194.849 573.535 194.603 573.808 194.571 cv
573.878 194.562 575.238 194.356 576.24 192.435 cv
576.368 192.19 576.671 192.097 576.915 192.223 cv
577.16 192.351 577.255 192.653 577.127 192.898 cv
575.858 195.329 573.997 195.557 573.919 195.565 cv
573.9 195.567 573.883 195.568 573.864 195.568 cv
cp
f
617.855 232.01 mo
609.355 241.06 597.275 246.71 583.886 246.71 cv
568.466 246.71 554.796 239.23 546.315 227.7 cv
550.516 222.5 559.596 213.03 571.605 210.52 cv
587.306 207.23 609.586 210.8 617.855 232.01 cv
cp
.313726 .470588 .286275 rgb
f
580.843 209.716 mo
580.566 209.716 580.343 209.492 580.343 209.216 cv
580.343 208.94 580.566 208.716 580.843 208.716 cv
580.868 208.716 583.497 208.697 586.082 207.489 cv
586.331 207.372 586.63 207.479 586.747 207.73 cv
586.864 207.98 586.756 208.278 586.506 208.396 cv
583.712 209.701 580.959 209.716 580.843 209.716 cv
cp
1 1 1 rgb
f
194.866 237.34 mo
193.736 243.27 li
193.426 243.14 193.116 243.01 192.806 242.87 cv
193.896 237.15 li
193.946 236.88 194.206 236.7 194.486 236.75 cv
194.755 236.81 194.926 237.06 194.866 237.34 cv
cp
1 .74902 .411765 rgb
f
486.285 117.35 mo
483.565 119.24 480.636 120.85 477.535 122.14 cv
472.046 124.41 466.025 125.67 459.706 125.67 cv
459.346 125.67 458.976 125.67 458.605 125.66 cv
447.386 125.4 437.146 121.18 429.235 114.34 cv
427.855 113.15 426.556 111.88 425.325 110.54 cv
428.605 103.43 436.216 90.02 448.115 86.7998 cv
448.256 86.7598 448.396 86.73 448.525 86.6899 cv
462.296 83.21 480.976 86.46 484.695 89.25 cv
486.226 90.5098 486.496 103.02 486.285 117.35 cv
cp
.486275 .376471 .32549 rgb
f
451.334 61.8408 mo
451.334 61.8408 443.586 52.2578 446.837 48.4556 cv
450.089 44.6533 455.114 48.4556 455.114 48.4556 cv
455.114 48.4556 455.393 43.9565 460.405 44.4214 cv
465.418 44.8857 468.439 50.2275 468.439 50.2275 cv
468.439 50.2275 472.85 45.8149 475.869 50.2275 cv
478.89 54.6406 476.799 61.8408 476.799 61.8408 cv
476.799 61.8408 480.283 61.3252 479.354 65.415 cv
478.425 69.5054 472.945 73.7217 472.945 73.7217 cv
451.334 61.8408 li
cp
0 0 0 rgb
f
468.293 76.9282 mo
468.439 87.7354 li
468.439 87.7354 466.532 90.8682 460.217 91.4673 cv
455.513 91.9136 453.844 90.8711 453.844 90.8711 cv
454.427 85.3892 li
455.002 80.043 li
466.384 77.3779 li
468.293 76.9282 li
cp
.988235 .639216 .592157 rgb
f
466.384 77.3779 mo
466.36 77.6733 466.253 78.0229 466.084 78.4248 cv
463.738 83.8555 457.144 85.1089 454.427 85.3892 cv
455.002 80.043 li
466.384 77.3779 li
cp
0 0 0 rgb
f
452.26 55.4424 mo
452.26 55.4424 446.771 69.0684 449.108 76.5664 cv
451.445 84.0645 458.299 82.6748 462.377 81.0942 cv
466.455 79.5132 468.295 76.9307 468.295 76.9307 cv
468.295 76.9307 472.182 78.124 474.653 74.4702 cv
477.124 70.8159 475.419 66.7515 473.194 65.873 cv
470.969 64.9951 468.401 66.6577 468.401 66.6577 cv
470.336 62.688 li
470.336 62.688 461.142 43.0649 452.26 55.4424 cv
cp
.988235 .639216 .592157 rgb
f
468.873 72.5562 mo
468.721 72.5562 468.569 72.4863 468.471 72.3535 cv
468.307 72.1313 468.354 71.8184 468.576 71.6543 cv
472.648 68.6421 li
472.868 68.4785 473.183 68.5249 473.348 68.7466 cv
473.512 68.9688 473.465 69.2817 473.242 69.4458 cv
469.17 72.458 li
469.081 72.5244 468.977 72.5562 468.873 72.5562 cv
cp
0 0 0 rgb
f
473.311 72.436 mo
473.271 72.436 473.232 72.4316 473.192 72.4219 cv
469.975 71.6401 li
469.706 71.5752 469.542 71.3047 469.606 71.0361 cv
469.672 70.7686 469.94 70.6021 470.211 70.6685 cv
473.429 71.4502 li
473.697 71.5151 473.861 71.7856 473.797 72.0542 cv
473.741 72.2827 473.536 72.436 473.311 72.436 cv
cp
f
461.027 61.7793 mo
460.822 61.7793 460.63 61.6519 460.557 61.4473 cv
459.819 59.3809 457.977 59.6753 457.897 59.6875 cv
457.63 59.7329 457.367 59.5532 457.319 59.2822 cv
457.271 59.0117 457.45 58.7529 457.721 58.7036 cv
458.665 58.5308 460.677 58.8081 461.498 61.1113 cv
461.591 61.3716 461.455 61.6572 461.195 61.75 cv
461.14 61.77 461.083 61.7793 461.027 61.7793 cv
cp
f
450.894 60.7236 mo
450.752 60.7236 450.611 60.6636 450.513 60.5474 cv
450.334 60.3369 450.359 60.021 450.57 59.8423 cv
451.051 59.4351 452.324 58.3545 452.901 59.0063 cv
453.084 59.2134 453.064 59.5293 452.857 59.7119 cv
452.723 59.8311 452.545 59.8657 452.383 59.8159 cv
452.273 59.8491 451.938 59.9932 451.217 60.605 cv
451.123 60.6846 451.008 60.7236 450.894 60.7236 cv
cp
f
452.853 70.98 mo
452.702 70.98 452.554 70.9121 452.455 70.7832 cv
450.699 68.4819 454.073 64.8438 454.218 64.6899 cv
454.407 64.4878 454.723 64.4785 454.924 64.668 cv
455.125 64.8564 455.136 65.1729 454.946 65.3745 cv
454.125 66.2515 452.218 68.8232 453.25 70.1768 cv
453.418 70.3965 453.375 70.71 453.156 70.8774 cv
453.065 70.9468 452.959 70.98 452.853 70.98 cv
cp
f
451.971 66.1553 mo
451.946 66.1553 451.923 66.1538 451.898 66.1504 cv
451.625 66.1108 451.436 65.8579 451.475 65.5845 cv
451.839 63.041 li
451.878 62.7661 452.137 62.5796 452.405 62.6167 cv
452.678 62.6563 452.868 62.9092 452.829 63.1826 cv
452.465 65.7261 li
452.429 65.9756 452.215 66.1553 451.971 66.1553 cv
cp
f
459.419 66.1655 mo
459.111 66.147 458.902 65.9092 458.92 65.6338 cv
459.083 63.0693 li
459.101 62.7949 459.313 62.5869 459.613 62.6021 cv
459.89 62.6196 460.099 62.8574 460.081 63.1328 cv
459.918 65.6973 li
459.901 65.9619 459.681 66.1655 459.419 66.1655 cv
cp
f
451.163 58.5112 mo
451.163 58.5112 452.308 56.3232 455.003 56.2681 cv
457.698 56.2134 459.299 58.0908 459.299 58.0908 cv
459.299 58.0908 458.177 62.6465 461.875 65.0083 cv
465.573 67.3706 468.401 66.6577 468.401 66.6577 cv
471.047 65.6743 li
472.945 61.7627 li
465.142 53.5767 li
455.114 48.4556 li
450.104 53.1304 li
451.163 58.5112 li
cp
f
455.762 75.252 mo
455.642 75.252 455.565 75.2461 455.548 75.2451 cv
455.273 75.2222 455.07 74.9819 455.092 74.7075 cv
455.113 74.4326 455.349 74.2217 455.628 74.248 cv
455.718 74.2559 457.803 74.3887 458.665 72.4863 cv
458.778 72.2344 459.077 72.1235 459.326 72.2368 cv
459.578 72.3506 459.689 72.647 459.575 72.8984 cv
458.592 75.0703 456.45 75.252 455.762 75.252 cv
cp
f
499.035 104.09 mo
495.706 109.31 491.365 113.82 486.285 117.35 cv
483.565 119.24 480.636 120.85 477.535 122.14 cv
484.695 89.25 li
485.186 89.5898 492.825 94.98 499.035 104.09 cv
cp
.486275 .376471 .32549 rgb
f
458.623 92.0254 mo
455.195 92.0254 452.517 91.2671 452.388 91.23 cv
452.123 91.1538 451.97 90.877 452.046 90.6113 cv
452.122 90.3457 452.399 90.1924 452.664 90.269 cv
452.698 90.2788 456.189 91.2617 460.18 90.9688 cv
464.765 90.6279 469.14 87.3691 469.184 87.3359 cv
469.402 87.1704 469.717 87.2134 469.884 87.4346 cv
470.05 87.6548 470.006 87.9683 469.785 88.1343 cv
469.598 88.2759 465.138 91.603 460.254 91.9658 cv
459.697 92.0073 459.15 92.0254 458.623 92.0254 cv
cp
1 .74902 .411765 rgb
f
126.146 347.11 mo
123.216 351.32 119.596 355.03 115.456 358.06 cv
110.206 361.92 104.116 364.7 97.5156 366.08 cv
97.5557 357.43 98.0356 350.56 98.0356 350.56 cv
98.0356 350.56 112.573 329.604 112.775 329.77 cv
114.343 331.056 120.288 336.223 126.146 347.11 cv
cp
.27451 .27451 .498039 rgb
f
115.456 358.06 mo
110.206 361.92 104.116 364.7 97.5156 366.08 cv
94.4155 366.74 91.1958 367.08 87.8955 367.08 cv
80.3257 367.08 73.1855 365.28 66.8657 362.07 cv
63.2158 360.23 59.8457 357.92 56.8257 355.22 cv
55.2056 353.76 53.6758 352.2 52.2656 350.53 cv
55.1157 340.85 61.3657 333.49 63.2358 331.37 cv
63.7056 330.83 64.2456 330.34 64.8257 329.89 cv
64.8354 329.87 64.8555 329.87 64.8657 329.86 cv
67.2954 327.97 70.5454 326.75 73.7554 325.95 cv
73.7856 325.95 73.8057 325.94 73.8154 325.94 cv
77.7358 324.98 81.5654 324.65 83.7554 324.54 cv
84.9258 324.48 85.6255 324.48 85.6255 324.48 cv
85.6255 324.48 91.6455 325.07 98.1455 326.09 cv
103.956 327 110.146 328.25 112.755 329.75 cv
112.886 329.83 112.996 329.96 113.105 330.13 cv
114.576 332.51 115.226 344.29 115.456 358.06 cv
cp
f
73.8276 303.102 mo
73.8276 303.102 74.2158 310.097 77.3652 310.418 cv
80.5146 310.739 85.1475 306.76 85.1475 306.76 cv
82.9766 298.887 li
73.8276 303.102 li
cp
0 0 0 rgb
f
82.9121 316.171 mo
83.0605 327.148 li
83.0605 327.148 85.1748 330.295 91.9038 330.786 cv
96.916 331.153 98.6606 330.063 98.6606 330.063 cv
97.8877 324.507 li
97.126 319.088 li
84.9546 316.592 li
82.9121 316.171 li
cp
.988235 .639216 .592157 rgb
f
85.6245 316.651 mo
85.6553 316.951 85.772 317.304 85.9531 317.707 cv
88.457 323.167 95.1802 324.289 97.9443 324.512 cv
97.2388 319.098 li
85.6245 316.651 li
cp
0 0 0 rgb
f
99.4634 294.064 mo
99.4634 294.064 105.345 307.771 103.143 315.436 cv
100.94 323.1 93.9521 321.845 89.7764 320.333 cv
85.6006 318.82 83.6748 316.241 83.6748 316.241 cv
83.6748 316.241 79.7559 317.541 77.165 313.888 cv
74.5737 310.234 76.2114 306.07 78.4502 305.128 cv
80.689 304.186 83.3335 305.815 83.3335 305.815 cv
81.2788 301.83 li
81.2788 301.83 90.1665 281.702 99.4634 294.064 cv
cp
.988235 .639216 .592157 rgb
f
82.9756 311.807 mo
82.876 311.807 82.7754 311.777 82.6875 311.715 cv
77.7124 308.203 li
77.4868 308.044 77.4331 307.732 77.5923 307.507 cv
77.7515 307.28 78.0635 307.226 78.2895 307.387 cv
83.2646 310.898 li
83.4902 311.058 83.5439 311.369 83.3848 311.595 cv
83.2871 311.733 83.1328 311.807 82.9756 311.807 cv
cp
0 0 0 rgb
f
78.4692 311.785 mo
78.2485 311.785 78.0464 311.638 77.9868 311.414 cv
77.9155 311.147 78.0737 310.873 78.3408 310.802 cv
81.5889 309.935 li
81.8535 309.87 82.1294 310.021 82.2007 310.289 cv
82.272 310.556 82.1138 310.83 81.8467 310.901 cv
78.5986 311.769 li
78.5557 311.779 78.5122 311.785 78.4692 311.785 cv
cp
f
89.9775 300.698 mo
89.8906 300.698 89.8022 300.676 89.7222 300.628 cv
89.4849 300.486 89.4072 300.18 89.5483 299.942 cv
90.8154 297.816 92.8652 297.93 93.7744 298.288 cv
94.0312 298.389 94.1572 298.68 94.0561 298.937 cv
93.9551 299.192 93.666 299.319 93.4097 299.219 cv
93.3306 299.19 91.5478 298.538 90.4077 300.454 cv
90.314 300.611 90.1479 300.698 89.9775 300.698 cv
cp
f
100.958 299.387 mo
100.848 299.387 100.736 299.351 100.644 299.275 cv
99.5146 298.358 98.3413 299.028 98.292 299.057 cv
98.0557 299.197 97.7485 299.118 97.6079 298.882 cv
97.4678 298.645 97.543 298.341 97.7788 298.198 cv
97.8516 298.154 99.5933 297.135 101.273 298.498 cv
101.488 298.673 101.521 298.987 101.347 299.202 cv
101.248 299.323 101.104 299.387 100.958 299.387 cv
cp
f
99.0337 311.056 mo
98.9907 311.056 98.9468 311.05 98.9038 311.038 cv
98.6367 310.967 98.4785 310.692 98.5503 310.426 cv
99.2422 307.849 97.4287 303.967 97.4101 303.928 cv
97.2925 303.678 97.3989 303.38 97.6484 303.262 cv
97.8979 303.146 98.1958 303.25 98.314 303.5 cv
98.396 303.672 100.304 307.751 99.5161 310.686 cv
99.456 310.908 99.2544 311.056 99.0337 311.056 cv
cp
f
99.9556 304.659 mo
99.7378 304.659 99.5371 304.516 99.4751 304.295 cv
98.7656 301.784 li
98.6904 301.519 98.8447 301.242 99.1108 301.167 cv
99.374 301.095 99.6523 301.246 99.7275 301.513 cv
100.437 304.023 li
100.512 304.289 100.358 304.565 100.092 304.641 cv
100.046 304.653 100.001 304.659 99.9556 304.659 cv
cp
f
92.5488 304.856 mo
92.331 304.856 92.1304 304.713 92.0684 304.492 cv
91.3594 301.981 li
91.2842 301.716 91.4385 301.439 91.7046 301.364 cv
91.9678 301.29 92.2461 301.443 92.3213 301.71 cv
93.0303 304.221 li
93.1055 304.486 92.9512 304.763 92.6851 304.838 cv
92.6396 304.851 92.5942 304.856 92.5488 304.856 cv
cp
f
100.247 296.055 mo
100.247 296.055 99.4351 294.959 96.6973 294.965 cv
93.96 294.971 92.3789 296.912 92.3789 296.912 cv
92.3789 296.912 92.1494 301.875 88.4487 304.356 cv
84.7485 306.838 83.3335 305.815 83.3335 305.815 cv
80.625 304.877 li
78.6094 300.949 li
86.3452 292.463 li
95.6416 288.494 li
100.247 293.615 li
100.247 296.055 li
cp
f
96.2651 314.245 mo
95.4849 314.245 93.4434 314.035 92.4409 311.947 cv
92.3213 311.698 92.4263 311.399 92.6753 311.279 cv
92.9238 311.159 93.2222 311.266 93.3423 311.514 cv
94.2617 313.429 96.3813 313.243 96.4722 313.238 cv
96.75 313.205 96.9912 313.411 97.019 313.686 cv
97.0464 313.959 96.8481 314.204 96.5742 314.232 cv
96.5527 314.235 96.4409 314.245 96.2651 314.245 cv
cp
f
75.3594 309.551 mo
73.436 307.592 71.8486 302.763 72.2349 300.045 cv
72.3125 299.497 li
72.3125 299.497 69.1289 299.15 70.1899 294.905 cv
71.2515 290.661 76.6645 285.001 85.1103 282.878 cv
93.5561 280.756 100.247 293.615 100.247 293.615 cv
100.247 293.615 93.1831 293.246 87.8769 297.26 cv
82.5708 301.272 80.625 304.877 80.625 304.877 cv
75.3594 309.551 li
cp
.486275 .376471 .32549 rgb
f
94.0044 331.15 mo
87.3452 331.15 82.3115 327.8 82.0542 327.626 cv
81.8257 327.471 81.7661 327.16 81.9209 326.932 cv
82.0767 326.704 82.3877 326.646 82.6152 326.798 cv
82.6894 326.849 90.0923 331.767 98.5356 329.579 cv
98.8018 329.511 99.0752 329.671 99.1445 329.938 cv
99.2139 330.206 99.0532 330.479 98.7856 330.548 cv
97.1323 330.976 95.5254 331.15 94.0044 331.15 cv
cp
.968627 .45098 .309804 rgb
f
72.2339 300.545 mo
72.1499 300.545 72.0644 300.523 71.9863 300.479 cv
71.7466 300.342 71.6631 300.036 71.8003 299.797 cv
73.3935 297.012 li
73.5308 296.772 73.8359 296.688 74.0757 296.826 cv
74.3154 296.963 74.3989 297.269 74.2617 297.508 cv
72.6684 300.293 li
72.5762 300.454 72.4072 300.545 72.2339 300.545 cv
cp
1 .74902 .411765 rgb
f
115.525 358 mo
115.505 358.03 115.476 358.04 115.456 358.06 cv
115.186 358.26 114.916 358.46 114.636 358.64 cv
112.076 345.88 li
112.025 345.61 112.196 345.34 112.466 345.29 cv
112.736 345.23 113.005 345.41 113.056 345.68 cv
115.525 358 li
cp
.968627 .45098 .309804 rgb
f
618.956 351.97 mo
616.325 354.84 613.346 357.39 610.065 359.52 cv
609.065 360.17 608.046 360.79 606.996 361.36 cv
600.346 365.01 592.726 367.08 584.605 367.08 cv
575.065 367.08 566.206 364.21 558.815 359.3 cv
558.626 359.17 558.436 359.04 558.246 358.9 cv
556.546 357.75 554.926 356.48 553.405 355.09 cv
553.235 354.94 553.065 354.79 552.905 354.63 cv
552.206 353.99 551.535 353.33 550.886 352.65 cv
552.646 347.34 556.636 340.54 559.746 335.67 cv
563.346 330.03 569.386 326.41 576.056 325.91 cv
584.556 325.29 594.985 326.56 602.485 328.04 cv
605.575 328.65 608.346 330.85 610.195 334.15 cv
612.775 338.75 616.496 345.75 618.956 351.97 cv
cp
f
596.157 286.75 mo
596.157 286.75 595.744 284.115 598.259 285.193 cv
600.773 286.271 599.695 288.905 598.259 288.546 cv
596.822 288.187 596.157 286.75 596.157 286.75 cv
cp
.466667 .447059 .827451 rgb
f
601.013 303.38 mo
601.013 303.38 600.619 310.484 597.421 310.811 cv
594.223 311.137 589.518 307.096 589.518 307.096 cv
591.722 299.1 li
601.013 303.38 li
cp
0 0 0 rgb
f
576.604 301.359 mo
576.604 301.359 566.166 298.006 564.609 293.575 cv
563.053 289.145 582.776 295.851 582.776 295.851 cv
576.604 301.359 li
cp
.360784 .360784 .776471 rgb
f
591.722 316.571 mo
590.912 327.866 li
590.912 327.866 588.874 331.052 582.35 331.523 cv
577.49 331.875 575.794 330.762 575.794 330.762 cv
576.521 325.124 li
577.237 319.626 li
589.032 317.141 li
591.722 316.571 li
cp
.956863 .572549 .509804 rgb
f
589.032 317.141 mo
589.001 317.445 588.883 317.804 588.699 318.214 cv
586.156 323.758 579.328 324.897 576.521 325.124 cv
577.237 319.626 li
589.032 317.141 li
cp
0 0 0 rgb
f
574.979 294.202 mo
574.979 294.202 569.005 308.123 571.242 315.906 cv
573.479 323.689 580.575 322.415 584.816 320.88 cv
589.057 319.345 591.013 316.725 591.013 316.725 cv
591.013 316.725 594.992 318.044 597.624 314.335 cv
600.256 310.624 598.592 306.395 596.318 305.438 cv
594.045 304.481 591.359 306.137 591.359 306.137 cv
593.446 302.089 li
593.446 302.089 584.42 281.647 574.979 294.202 cv
cp
.956863 .572549 .509804 rgb
f
591.722 312.213 mo
591.565 312.213 591.41 312.14 591.313 312.001 cv
591.154 311.775 591.208 311.464 591.434 311.305 cv
596.486 307.738 li
596.709 307.578 597.024 307.631 597.183 307.858 cv
597.342 308.084 597.288 308.396 597.063 308.555 cv
592.01 312.121 li
591.923 312.184 591.821 312.213 591.722 312.213 cv
cp
0 0 0 rgb
f
596.298 312.191 mo
596.256 312.191 596.212 312.186 596.169 312.175 cv
592.871 311.294 li
592.604 311.223 592.445 310.948 592.517 310.682 cv
592.588 310.416 592.858 310.258 593.129 310.327 cv
596.427 311.208 li
596.693 311.279 596.853 311.554 596.781 311.82 cv
596.722 312.044 596.52 312.191 596.298 312.191 cv
cp
f
584.264 300.893 mo
584.113 300.893 583.964 300.824 583.865 300.694 cv
583.431 300.12 582.944 299.794 582.421 299.723 cv
581.64 299.622 580.99 300.11 580.983 300.114 cv
580.767 300.281 580.452 300.244 580.283 300.025 cv
580.114 299.809 580.151 299.497 580.368 299.327 cv
580.407 299.296 581.347 298.569 582.539 298.73 cv
583.343 298.833 584.057 299.291 584.662 300.091 cv
584.829 300.311 584.786 300.624 584.565 300.791 cv
584.476 300.859 584.369 300.893 584.264 300.893 cv
cp
f
573.46 299.9 mo
573.314 299.9 573.171 299.837 573.071 299.716 cv
572.897 299.501 572.931 299.187 573.145 299.012 cv
573.818 298.467 574.445 298.247 574.999 298.354 cv
575.602 298.472 575.869 298.93 575.897 298.981 cv
576.03 299.224 575.941 299.528 575.7 299.661 cv
575.461 299.79 575.162 299.71 575.027 299.475 cv
575.016 299.457 574.942 299.356 574.793 299.333 cv
574.651 299.306 574.329 299.339 573.775 299.789 cv
573.683 299.864 573.571 299.9 573.46 299.9 cv
cp
f
575.415 311.45 mo
575.194 311.45 574.992 311.303 574.933 311.08 cv
574.139 308.125 575.253 305.1 575.301 304.973 cv
575.397 304.714 575.687 304.584 575.943 304.681 cv
576.202 304.777 576.333 305.065 576.236 305.323 cv
576.227 305.352 575.189 308.182 575.897 310.82 cv
575.97 311.087 575.812 311.361 575.545 311.433 cv
575.501 311.444 575.458 311.45 575.415 311.45 cv
cp
f
573.462 305.24 mo
573.417 305.24 573.371 305.234 573.326 305.222 cv
573.061 305.146 572.905 304.87 572.98 304.604 cv
573.701 302.055 li
573.776 301.788 574.055 301.633 574.318 301.709 cv
574.584 301.784 574.739 302.061 574.664 302.326 cv
573.943 304.876 li
573.881 305.097 573.681 305.24 573.462 305.24 cv
cp
f
581.64 305.465 mo
581.595 305.465 581.549 305.459 581.504 305.446 cv
581.238 305.371 581.083 305.095 581.158 304.829 cv
581.878 302.279 li
581.953 302.014 582.231 301.859 582.495 301.934 cv
582.761 302.009 582.916 302.285 582.841 302.551 cv
582.121 305.101 li
582.059 305.321 581.858 305.465 581.64 305.465 cv
cp
f
574.183 296.224 mo
574.183 296.224 575.007 295.111 577.787 295.117 cv
580.567 295.122 582.173 297.095 582.173 297.095 cv
582.173 297.095 582.406 302.135 586.164 304.655 cv
589.922 307.176 591.359 306.137 591.359 306.137 cv
594.11 305.184 li
596.157 301.195 li
588.301 292.576 li
578.859 288.546 li
574.183 293.747 li
574.183 296.224 li
cp
f
578.228 314.69 mo
578.049 314.69 577.935 314.68 577.913 314.677 cv
577.639 314.648 577.44 314.403 577.469 314.13 cv
577.496 313.855 577.745 313.652 578.016 313.683 cv
578.103 313.688 580.267 313.875 581.201 311.927 cv
581.322 311.678 581.62 311.575 581.869 311.692 cv
582.118 311.813 582.223 312.111 582.104 312.36 cv
581.087 314.477 579.019 314.69 578.228 314.69 cv
cp
f
573.822 293.153 mo
573.822 293.153 577.761 281.96 591.722 284.354 cv
605.683 286.75 601.013 304.499 601.013 304.499 cv
594.649 302.434 li
573.822 293.153 li
cp
.466667 .447059 .827451 rgb
f
569.761 292.363 mo
569.761 292.363 574.648 292.542 587.242 298.372 cv
591.583 300.382 595.369 302.729 595.369 302.729 cv
595.369 302.729 580.874 296.642 575.239 296.71 cv
573.076 296.736 571.675 297.547 571.675 297.547 cv
569.761 292.363 li
cp
.360784 .360784 .776471 rgb
f
580.058 331.898 mo
577.576 331.898 575.834 331.496 575.677 331.458 cv
575.408 331.394 575.243 331.124 575.307 330.855 cv
575.37 330.587 575.639 330.423 575.909 330.485 cv
575.992 330.505 584.238 332.396 590.614 327.675 cv
590.837 327.511 591.15 327.558 591.313 327.778 cv
591.479 328.001 591.432 328.313 591.21 328.478 cv
587.448 331.264 583.172 331.898 580.058 331.898 cv
cp
.27451 .27451 .498039 rgb
f
332.763 212.892 mo
329.748 212.892 327.405 212.232 327.203 212.174 cv
326.938 212.097 326.786 211.819 326.862 211.555 cv
326.939 211.289 327.22 211.133 327.481 211.213 cv
327.581 211.242 337.46 214.008 342.684 207.881 cv
342.864 207.671 343.18 207.646 343.389 207.824 cv
343.599 208.004 343.624 208.319 343.445 208.529 cv
340.447 212.046 336.175 212.892 332.763 212.892 cv
cp
1 1 1 rgb
f
378.676 217.77 mo
373.266 230.96 361.976 241.13 348.065 245 cv
347.115 245.27 346.146 245.51 345.166 245.71 cv
343.746 230.34 342.996 203.36 342.996 203.36 cv
342.996 203.36 363.195 202.26 378.676 217.77 cv
cp
.313726 .470588 .286275 rgb
f
343.393 191.969 mo
343.268 191.969 343.143 191.923 343.045 191.829 cv
342.847 191.637 342.841 191.321 343.033 191.122 cv
346.705 187.319 li
346.896 187.122 347.213 187.115 347.412 187.307 cv
347.61 187.499 347.616 187.815 347.424 188.014 cv
343.752 191.816 li
343.654 191.918 343.523 191.969 343.393 191.969 cv
cp
0 0 0 rgb
f
348.359 191.041 mo
348.318 191.041 348.275 191.035 348.233 191.024 cv
345.063 190.196 li
344.796 190.126 344.636 189.853 344.706 189.586 cv
344.775 189.32 345.046 189.16 345.315 189.229 cv
348.485 190.057 li
348.753 190.126 348.913 190.4 348.843 190.667 cv
348.784 190.892 348.582 191.041 348.359 191.041 cv
cp
f
324.416 180.108 mo
324.31 180.108 324.203 180.075 324.113 180.005 cv
323.897 179.839 323.853 179.534 324.015 179.315 cv
324.054 179.262 325.01 178.017 327.414 178.364 cv
327.688 178.403 327.877 178.657 327.838 178.93 cv
327.798 179.204 327.538 179.39 327.271 179.354 cv
325.495 179.094 324.839 179.884 324.813 179.918 cv
324.713 180.042 324.564 180.108 324.416 180.108 cv
cp
f
335.396 180.247 mo
335.283 180.247 335.17 180.208 335.076 180.13 cv
333.791 179.059 332.307 179.452 332.293 179.457 cv
332.025 179.529 331.752 179.374 331.678 179.108 cv
331.604 178.842 331.76 178.567 332.025 178.493 cv
332.108 178.472 334.032 177.957 335.717 179.363 cv
335.929 179.54 335.957 179.855 335.78 180.067 cv
335.682 180.186 335.539 180.247 335.396 180.247 cv
cp
f
324.899 185.917 mo
324.583 185.893 324.378 185.651 324.4 185.376 cv
324.621 182.663 li
324.643 182.387 324.873 182.191 325.16 182.205 cv
325.435 182.227 325.64 182.468 325.617 182.744 cv
325.396 185.457 li
325.376 185.718 325.157 185.917 324.899 185.917 cv
cp
f
332.926 186.248 mo
332.609 186.224 332.404 185.983 332.427 185.708 cv
332.647 182.994 li
332.669 182.719 332.901 182.521 333.187 182.536 cv
333.461 182.558 333.666 182.799 333.644 183.075 cv
333.423 185.789 li
333.402 186.05 333.184 186.248 332.926 186.248 cv
cp
f
326.849 192.395 mo
326.657 192.395 326.476 192.284 326.393 192.099 cv
324.691 188.291 327.242 185.222 327.352 185.093 cv
327.529 184.883 327.844 184.856 328.055 185.035 cv
328.266 185.213 328.292 185.528 328.114 185.739 cv
328.021 185.849 325.866 188.468 327.305 191.69 cv
327.418 191.943 327.305 192.238 327.053 192.351 cv
326.986 192.381 326.917 192.395 326.849 192.395 cv
cp
f
330.023 194.833 mo
329.748 194.833 329.525 194.611 329.524 194.335 cv
329.523 194.06 329.746 193.835 330.021 193.833 cv
330.094 193.833 331.787 193.803 332.396 192.349 cv
332.503 192.093 332.794 191.973 333.051 192.08 cv
333.306 192.187 333.425 192.48 333.318 192.734 cv
332.45 194.81 330.122 194.833 330.023 194.833 cv
cp
f
452.314 311.99 mo
452.063 311.99 451.846 311.8 451.818 311.543 cv
451.79 311.269 451.989 311.022 452.263 310.993 cv
452.284 310.99 454.422 310.743 455.201 309.184 cv
455.325 308.938 455.625 308.837 455.872 308.96 cv
456.119 309.083 456.219 309.384 456.096 309.631 cv
455.068 311.686 452.477 311.977 452.367 311.987 cv
452.35 311.989 452.332 311.99 452.314 311.99 cv
cp
f
450.353 308.158 mo
450.17 308.158 449.993 308.057 449.905 307.882 cv
448.148 304.371 450.676 300.677 450.784 300.521 cv
450.94 300.295 451.252 300.238 451.479 300.396 cv
451.706 300.554 451.762 300.865 451.604 301.092 cv
451.582 301.125 449.311 304.461 450.8 307.435 cv
450.923 307.682 450.823 307.981 450.576 308.105 cv
450.505 308.142 450.428 308.158 450.353 308.158 cv
cp
f
455.288 331.282 mo
451.808 331.282 449.114 330.604 448.875 330.543 cv
448.608 330.473 448.447 330.2 448.518 329.933 cv
448.586 329.667 448.857 329.506 449.127 329.574 cv
449.249 329.605 461.499 332.678 467.618 325.429 cv
467.797 325.217 468.113 325.193 468.322 325.369 cv
468.533 325.547 468.561 325.862 468.382 326.073 cv
464.816 330.299 459.48 331.282 455.288 331.282 cv
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.70A.p1.70-temp_01.eps)
%%CreationDate: 12/13/2021 2:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj27mpHO$ira"-gLBI`G,kSg$>6mVo2?gR0_'TI"a^u<$S-T)GI\4rcWp\0hpsgP0`#/i[e9:P^:03aI[d0JfZ!=orY5c2'
%dSfCsVPP9a883SOhpTrZnuGZh]15?.5?E!W1Rb5pUA%Erd&E=GmGhfl:hmCYoh)pNg.^UW"LZ`FE(QZ)WV<5]V>aP2]+Pg\BhW]r
%50K9CV0osZ%GE6YUN*&S`e.X-BG=0k^Ld:KX\e6r9?/m'<8=P&k:Q\O4l\IKV08?:8uq70dAs2"n]_&!r3u7U<U$gEC,^cg\R,0?
%MQYVq7kAsaC'<MuRZ-C&s&S@$e5#6PkZ$8F2lW_lrRkLO@>_JB;$/C%*p(a83rc,"s27"T$QITFlT5$+](Q)W^Q"JGZG\fEa#dD@
%&02`BA_H^\+U@4Z$_V'b2[LIqQE#p:cn7%=:".5:WHCSWkU$3tFXHBma*$"UppTW'jZPh<Ug2*dBU38+n4n.e32#oW>l&4lorJiA
%92/"ACpSOfreCatZ46>cr9RF];JNqKQ.psSLYI2BNe;Y_<"\2UF6"hP#TQ>HI]FNf61_D3-GHT`3hXK)apV92lr<_3+/NRB:$A2i
%2+k:*qA\;Y\t/A-f?mMDm8#O/P`]taPj[jL8iL!JOj<X`X]h(u/>pNnQq=F=Jm-45Q:K3jA\#7[Y%q(X2_BqgP'_5qSi4d2Li#`S
%4Rn=GaEXs3?iA'J'-c/t;GG!%)eZ^6BI9J4_3&!_oVthQY6AJ[d\-E,P_ZAXP8)MiJp+@iXQ6lDOmDJcp5_,T'ZAc`n_8'Qg\:5"
%QW(#`M-&[R#J]f.Bo5^XGoeSm3=`V\%c02U\iC833DMcA-M;fZnU:'"koUH1I<>(/FMhJ\NGc9H]&drLR`jZR>Rl2QH$l(,3t;eI
%kKtHF(PBZ'`KnK'`1#[a$rrph-4S!'\cFG]7Q8,ZTG=("./ZOV!/9;=]0_8i%(PdGmf4&N@k*$\0f=KuDh]9^TG_]W<In)R"*=WY
%pl.K54PCL7Gk2!c!g`sgpaq4-kQLrqqdObYIGVU\Q0KRmTc7CXDbMG_.3KG!8]'EsF9@JZdK2:80OVh;]E<\9&+Ee@*_lEhDL`>6
%"Yg1m#ipj`?qnTJ]QqIfMKE<c!r(n*OJd%BTGIUtk/Goib$o6W2UOtl6QZ<,GSC/KDumNE(bjr.\d;[JMukYA0Rfc-!2SS2bEX=Z
%oSGF.V^lpk9V_BC2_S9&0SL,P79b=kYs3edZ*HV9DdF#F_'c[PDJFSS]pM'40)iu;$UGMt/SHdK,c8ZS5JbL)oSYF\>Y/iZB*qe(
%*!f;@1(\FL&!+4l8Ua'EL$OO5fTSWL&!'P][]?j<<Yc@,Tt8NUOG6i9.WtR50Z6K/X8$=1idLGKrm>]>(/<2Wpuf6JIIo#gH(K9L
%H/\%[r0PZcO.o_GDgP^$O']di)SWO&R\EmRDg,9qO']di/c7!h4D9Q.K"g6XH7*#"ULE784."3<2ueF@qh\_p5!5mpO#ucpLF;CK
%kZ&&kWM0@Sl@][Li[+;u:cI=-,d/'aP='80FiK7Z@K*0RAnUo"#jgph+"^+KEC59\ceVE*H\WkC(Sc]n=ag40E<;WUH=X"]G\,BM
%6_mGb$Qg_=6aD>Vmi'&AkLC2NKGutJCKGpWoVi3>+p#JO$BRPHN0:\ic$X>Zi=[N#iU449D4n3T1/(g71YZ=7:.*Q4`V)e1M.hP@
%N;4_d,Sj(ilU/))5k2rHinB.Gg.#D^cOZ:#dD^8!4.;Gt4iA41rQ*5VZoNCbmhm`r<l\r<eF$OkSPR,r%Q5X&4a`&0@a65=\8^5;
%q"Am^c0#>80N^nS,'O9"@<L:AN5,2on7T*mc-QGq]YB!1GDHW3>MES!rgf6?#0XWV5,M$d$C.Ou!'kRTDmJhhQ`RWTBOp=g!<NpC
%Sf#:bD6[4t74=`0L5=]8<q$30Icu<p&0gCS'D.aSLfiPcass#B>\dR&=cbM5moNh@ag;bC!-X+SaD*_"P,[:]KB,1)'@5D+Zb?r4
%=PMM8r:`aU!BkA2Ib&WM(RoPkUfd6tl&lED)Bk/f1YW=AUPj7X/0HX_$\YMfS*q;ZeO3r^^!6>.$W)m>M$\"-UpG1-KEq>a;`OSX
%eD;_EP+'<%KJ8r"OuA6cia)#7=F\;46tPWnN"_EIR&[ZtbFSGs>ViE`i;'N!"4RFWS^gu#\A;S@fZonieb`=a!;3!5"1E7@^^$t_
%g:/1m&OC*?";9Yol:K+4fP?<=Qqic9RIP+?0\_XBcn3=*H,NeYZbSRWaP\58\]j?k%t6lO:`Shk!gZ.;U=]B67S9Cm4%ENJ$+'HK
%!Jk8\%2!c6A=hC"%2`g552hG>66-3h"jCidg$Ki&D$t/Gq"D=e.,V):KZ)sUb*\Y,(6r3a(@rqDW!a"6fj*:fM5uB@X=90_b(R@Q
%TJ1nXaGrfMX!-GFV7>a'&)QUcf\"3TL6.OL87ghnPQKU?_rQk*-/B8Eil?.7&+%1K#2@QG3D6s]0sHRLTl@MP$n7:6UJ0#QWsTTq
%Y;"=1niUn3CGd;BCurK#Y\Di'>X?94*SQT:aErc@J_nS<[cQqgT"ck^1"\?%@ZlRUD@X6L?iqm==/S9*fT^:D"F[b#KF(!mU2o6@
%a6HVp8=rffQR?G,8CqJ`Af_%&M0YV/]K^2cXQMXOWJE[L0sIdUZeNG8eDI]NOqO7jJg@gY&eF26NZRLh0St"XUkCm?$MjEkO0"I;
%!XHD'i-G;8QDN3B+DIaEjh.*Z]?AqE@E$-r+l3B4@4/oWZmUFjh?B;4L_92CK`Qi<>DSPpMd/U;_M(Pam2=pkoAOK"T+<@Rn%kpH
%7@m5t_s*.bg`1RS'0LhodLOsB&5@&Wn]1)a]+M7&>UT1]@)mbOBDAq"_F:kLM`>Z@^bRluf*?8HI-pWQU>\.,iZQ5@(4%8^#FErc
%M9QDpAIW5X@Z#U8(9U9u:@O/"]&`3qRJ1r0PPDt,5*5\Mg[8sT;S$6X*4J:(.#\PU`"2dXiRn=3#j-^%2.m?@*oK7Wd%>R>B%!)-
%Tdg7X'*+IEPuX=hW)6WRW-;=e&WdDL9Z[f4'/.%b2,^3BK#31sTQU6Y=9_'Ha\[kXZ!]%Q*12-3O%;-i3NubeMI")XC@>=Mk$:6%
%/(3'rba&^k'mKeL2h>bL$F.NWR,'r?N2m>89+6tp-/"oc)"[q!#P)bU@=I8Jm;GL^O!32/8A"Al9AQkROdke\@M#DrmSsIjMIGeE
%bKh+'=b>UBIsu;1@!Vbo=!&i\ZZ*;A'<;Y-[XeKA9h--eZ2-G:]CF2]%o4Bhh3m9-nig*loFJ^aOIoGf"./3j55Z)t5J;o)&HWm\
%l-!QG'3I,5cOn&CFWlK]7r9K*`"I^m&302o8-G*7,2%`0_n=ANWKT]2-!,@=Q*2,f6m.H5[\o94UXY"?S%'Yt2D!)j<u4`#YsX7;
%SD'u9^9re[@@TK,IhZR)Q8m"uNuK8U4sHj72a;&-b*7[t@9:H"5")9qeUDIL+>X8u6/Kq<FC./8aEWM\7;kXM*3Si8[$FDMPK07:
%P_+]I\NJU8Zg%slmi3hT;6+>PA5EGK#XV%_U=qJ!S/J7MSUp(#:LkXiA,<.li]o6$4T!Z_j?\KH#O0O)plKrI&_CQ^8nQgIW&!?=
%LmV`*?s:Hfm9Zs=oqW]E[^/#e)n=n;_9L*O7rS,&_AfL/MDflKI:c[(=C5)i5(rHV<COnSQB9>baa98nVL<,<'@@!CMnu;=105o*
%6*r7>-EJa?/.ER3AP-O&2s4\1#iC8V?Cs?74O<gWf9*Y_*MBXK`Ktf5g;oOhFeA["cUrBj&VjI4;pMrMD"m3^<q3N3#"2L&e9[HX
%M3i2!aG0iW8d=l1.D'"1+>R4j_Z>OLr+Q"-U/rDtM&89nmNRFg%Nj,A^d6Fj*65VSYsY0oOV#Ab+>Y;(O7;p.4sYSNO/[Qg7[<Na
%FF6<gZ\T8hUtg[8LjKt%-_XgfcLV>gD)J1$H9;U-GGWn6N_DL)1F$4eeVTiR`"MEE%DhXdCk*T@>9163o.!cX0kE5tX2p%Y+YmQo
%M:7-Z(X[ZPH&*)FiX:p/X@DOgCKGeN*X<tVHDXEJbi],@Z"*.QCir(9Lj9f"NWcn&38cioCPSO<.$Fkb@HO'm&9UGug8i<;l3q"T
%f!.A[!BFPN@m&DA@?=?^s'2'rZ@/'rbMC#"!r49=DsXtoUq_HgZ(S@s%b0JJJm]DH[J`59J#!D(N#8!SrkrA4G-%HZ`3one?uC3C
%q*@7S;]"(K#"Ol5+#c,X>nD"a7A@?]B=H'/9&1F\c"S9\!F=H?XW$.Xgm'N+Te]CP1J.G2"kMo/>U1Z_/jSKuE<GYRlNmX_5WsE>
%,48"RW8G4+7B51-r"+3$Cim2pK'SdU`9\ZuW`VW)]<@"tBi,m8,"&NV+!^]q-UWc%?nVM)jXd[A1DogL%te2)2pMq3ikfOB)R@Q>
%7!7])J)qoWh*,$aj#E/I=+%hW`3QD*F5hu%p\k.+I?=[X[s.EN0m9aT)=1d&_KcaPU/u;9%$c-l;Gtq'*,N^@pSspg.sXi*>X5`H
%#J@m!W(V541uV'Zl%bNllud:460qOc*oFC9ING#Ykl5(:GPdLmQlX[>;O)k1TR3IS#)]Q_')57`Ere7G?ml`c'jcqP(qo)Z4i>Au
%ok6A?(j'YiS;@gK4amQ'&7dIs_gl!E%N-#?e.=cY85\#^#G+\43=25%(G7F&A6I.m-R9ol'j-&n-$cR=Fkqis#lSff&35jWLd(9Y
%^"9F\]_;?C#WHYB^sC!hrc=2)6Xt5!HSd\79fLfP4:gZmfUr)0SDacLAd58n@0/OiBA/+O(XV]UEAR+uY7nDA0PThfjK(:@>mqWl
%6Zpd<,lZMm/k3s3cOp?4-K06+_G_9YA`FZ-;,Z#`GD!Pd_*_\jd<Kdg@`UfW&T29$$oLFaoLPL0+fX53Em3qn=dBr+W_+rj?3:rQ
%+#,$A0\BUF2+1`g]>\:B+kgP4E>AXQhdLAsri#iOJ6med=ND<#-<+3f16r"F<b*?cP.76HI8EdA`2MAAM#mMFd71_MSc0e<-;.@0
%\-%e7"pp;@NJ5-djUF+\p;1?Mrt(=h'(qMu'p:"\5J'<15")2'e-Wp@P]p2IRJ%5hT73(6#J<5]7mf\VTdl4i9=u2R8`4#FKs;W<
%M);BZIn(E[9=*]A_:n$-'D4`Za9%k"ArB4B-!3]#W'#6jQHB\8(SSL:Z4unW<`hmJ5R54/E$S@eLWd"0.78V&X=iL4]O2(S!k=&q
%pIaLiY,ar"Q*ae`RI-=)*_k^h<$!pBW;QVs<SYJ6.>d+,"&K%L6A(Z6)6PH&-`AYA%Bc-AZm2D"L8^!2W2-h`P8.YTh9%fsTKT+C
%AB@!=@#IqKO>"1EL7"E2(QVj@d5RDZX0]fPPnD^NOe+>6#+l6BRIB'tQ^I#&)B(&Ji#G<:\b[F#e#P%2%R2p7/Q1Nt?tGEnMi(QW
%';h^r7uC;D-d!(rXFeBcTcmIubbZmd!rI+*9O2Vb0hFO/$SBdg_p1^G0>=2M6Ub]il`)('F=u!?Ia@M+o3eA&Z@(<K8$(^;<MGN"
%42PE38kBplOdcS6TEV'"eD;\CT'$f(+$?7(I+04:YZQK_=Z2e/`1<b(;q_Me:tnCfV\Mel+At['R1eV1%fdTcVa>tqR+ohU`sb)i
%E7Gh[Pp9SuZas!/C"nF_TQ#]XY]K=hUl`K5q#FU%NU&bCabiSp5bbEfiI9GVbd-Sc;Fn^3+J,P#pJDbF;PN?J:64cI@tM;7XLYqf
%dLs4u&5lZ9J@IF#$pSHPcA6dKLDZk388-gIFY+[b\[crRB>/^`FBW:NWY0sZ0bJXnl9&tVabV^sq)lf0!Bog$Nur2p':#;?jU+=_
%0K,S0]!I6%h1]#9U4>Q2_]+[Nc.cMVOVBED3i0.?\[U?123#:WaE+Yk"C5$ko8boaO6QBm+<-%O_B,Gi(MJs,TjHKWo+Pr9Rm_uc
%8iGs.eK,6R=N2VV&G5qd$3:+R?-O>%Eq+Xo]+Qo0^%QlU0;3gtU%&ek4')_-GjQRs*po^%8G5#iVT1IQ6@-8!AA.aE8Il'Yb$F9n
%Rt+6S>^AT4r*5f9QsGpeIr`Q%#cHF>#SjaD$b[M[7nlmS0,Z73P9ONS>t65:DSSW:8:u)XPK;_"+mp:7>,Je$>ePkf1%eLk\V!N#
%Abl.P5\P+FUem/%S0*7fnl,FG5%91TF\KV@/Bt9fq*;]q_Tn)K#C9Li)d8+N'kEgV3#n$fpjGMs7#$<-lZ!%jijo8\$9eMfg48u$
%]!:_/MnWUr%#-fB$OIUJF:WTS)S*JS17u'bkd9-sA_9!iP\+CoTgjDg+u#=1_2apD/?pp#<HPcG_P`C[Bn@LG^LK02#lP"Z)00=E
%BQsg*pt`lIP`Xme46[EJ?AZj[7P[id0U?Ysf/:"TOOZi1)0c-:0_l:JAE5I<0C"#GFca&B_<ZcV5$Hr8bPR9K-@C%nM>PDe.2tHN
%K_t_cj6;>g^&F]4V1*<>5=BqU7'42`WpAc4G&'NOA1IW'eZ637(>"q292:P;oh,0\IN#oYcV@+":':CJZd6/?m''4eau*G"qT&UV
%MU/rAj%>(jI+kZG)LJlMqB,aHOtG829;skH6G))*s&1DENm>DfS(6!q?UgPHD$C04KAMB31-rIU3bH6V-"rTBi_pc=Dq/WdnN3S*
%HF"Ma+Biu)hb05\,;ugjQXn+r8l,na.K1H[E52=A4p_Kjd?NisC;3CuB;sR!&6a;omaEulL^p\N&hSfaEgsJdDQul7(p_l:4stg`
%mD@D&q7Mu']j+C5PV8Llj/Q?TD)XPYX41js?4#4%n9Ki+ph0L:7ZLf>[XN?rXqaUSe4HRn/k,*UWsr=jSN=:g)JG.WT%j<a7l?5E
%"GfBJ%h.-'>Du,Z^hp.gNZ,8;I5js%S.lerK@]8c-sT8#:Z*](=d;mefF"MmDkhTOGskl2IK-7;f.5r`2;2rLjZ$q^bCrRQj@?7V
%)P[^p(/O>J=SY3T2!_,GVq%qO6-N0OO6j,qI.gk;['T+j@@dAa=D*Ak)4I2o\3en/Q-8-<Pgj(%RU^bNNOE>hOl;0:VY0Ve-;2t/
%LF7#3k0'#JmU=uYs%[FZ]6=MWL\5,5s5#1@E*[e:r%[?/XjkMNeOkfb>UT)#bNGF>M.h%(3bFl+TXR_UWa$u29/Z-GUc.qf?A'E[
%=8N5Eds]SYmjq[W>Qnd:C22d^VQO3JGPrR^3jN\732B>%W/<47#B[P,9>Kb[[PT%aX&AcaWgs,(ea^)`8HR,n$/kUUp->R_G8C':
%Mt%?aYcR?g&gW"0X7p/rh-]8Qq^MV;ZJQpKh2_\Hr!:togcd)[-al+]oC4eRQ<KhO&iHCEhA/BX:5;MeTemf=0kr71iT.HLO>.f:
%>,Q[GBF!Ef8T[M9o;tSi7^L-fFWRn^q.AkqLT$V/#(-4((3$\X8\7[4girg'g^dbBPD!m\]b;lb@1_Xt+;f%(8uL^F/@P)rFLW%u
%S^]aG6KtHTJePYG[3Vn_mIjY"kQYN^e/P5r5S6?b:nk,%WPt(JAXIN)-B)s1o"p6H(8jn?Ls'_j"Zqe*2mBPc\k$[49djZ!6b-N"
%k+UQmPadGKK0Yi[E`3[p>r2Wj<%<[rEbe^-\HKoe$A5klg!k9u2im(_Z.qI-S&]R@=Dgqd[pAi:Wgm;t`VNrJEB%UU<(+35bWnjg
%N$_I9m3JIJCr\X#Q-M'(30!H'K&E<P0(+t<QNQS%Odd6WITpat%umo<^XbW]9eYF=ctTo16#Cs.%o0Rj>edd^Q.dIk5GKE%9VN2Y
%[hs05JK]lH/`*5$9r=>V7FmN%<2NR9'DU"S,j\K^B!,HU[=_Wq1%-3)CHe;T*5LCF)tdD!7K>nFD@8_rjJXkNcdShf'3'Ff3mESU
%:c^$.PpABGmd@EVo54_j$6i3ortambH?8\]X5TJ,0$!TS1/`sX;]9VVgR=EniCnJ99VGr?0`FWD`]pp<L7Sg4?Q0+I/g',`?EU^1
%PGNp"s1W??8Ahni[D5a&4gScW'14VHk%3\82f>#=R*AQi8^d[)Egn-jSKS`0^sZL!MtZ.LT[U#3CC+B>+s>LWD9MhCS2U\tEr2k?
%C*s$oWYG%6D!"HVo#(n8Ye4D2i)l0pr+6QYbh4_2dhi5FjPXEL1;!jgk%+jdS8iI[2X0a9G;6;lq/o\$\U(rph(4ij8WZf>Qh^L5
%\]k9(9R(1@5P!<Y5"g#lM54gnl^/;1Ni"-tOX(5knX;V)i1^$[:b6gRkR?#3FqYY+U&=1VTIH0W6';>lT1r>@Wn1Hn2Qh"A?ikI0
%JRQVN4aWLUM1rJYRl&#<='ft0os4^l+?__Jg1qHFTin"A@bsLK^.h*mDMkK&c]]3_W=eP$^eDC[ceu/.$0k]lmb.S-L1J`G/hMo%
%4MROsIR1g=+jm=nC%^7]:ofj2-`%1-lC9-ChDaN(=>63eI=$&1qM3jp%NJN60U9pN!amA3H'eo=P^j=IUsHg2nq/Se*7Cf8I,-6\
%)O6sl_Y:Y^"HBB;3Tg]8kNPiHZZ*fl25'1H*(NdnUm&lU9Y15R;X2"rhk,5HTAtLa5EiV-WoG\s\/ZRW3uGr"'<^4*`7i\8h\#oF
%nbOiZF6:qrG=a"=o8=9lP9t.SH7_FC/gqDpe]s!BXZ/5uSL9e90:MQKP,^5(G$Aoj,V5n,-s%n?9&(o*BU+?Ud<M[oFI>\\AA?k#
%V-2e;,(\ehMe.:b?kU!V]A=<&$&hlrT#?8`h]<1ljfdT4!_+E\TH,j&q@KCaXcXn135m.%<Jb%k"\,=n.g66N.k(Ud_Eg?,irQEf
%[fo_4a!\#!eDc5l`-@Qoh>^M#MkF+R-?9+Ss/mBd^r:,D=fOk]!mJRf2s]>5''3a-R<^)N^HB_<,t\eX-=42pYS&8(V0Gp?MNZ&D
%9RP96rl'ZekHu`0>*RnJhlPG('P=<[,mc7=mlnsK=\97_9M$g.,+!CXMt1daA<pt-OoR<..Vknr;%ab/8_:^e$;flm.$LaiAuQOl
%#r!$rhe'83-'@_cOqd>f4JeIcR[QWr2C5`#m`Y27Q/Bh80mtuC9Fi:qlRm'r#IAT'i==c&EV>=^<mt`sP2mdaj^so`]?ttSbKO4p
%rKLW0k'AT[$KcYOY1Mf^D(>23DNe8dmb6H%Rq/p-!gCp;g0C]79WQF/[CNV%f4oB/2Chr_INin-Mp!ZK;7Ru<_>eh=3E6<7F"t8:
%(qF]B8q;N((sU$u=,`0_J!VY*Q/K^9/3L`ChtUM'>>*WU$KT-3?R;_7MtNW=rAUL<[kpb.qTp0;VX;fqEiiHT.+a3'T4h:T@A=OD
%G7n3C&F4[ITZuqH)(eIiI\2Oid^KW:V;(WH9@;'$rCsJ"oKhd:<#a0PI/-d'q9I!V0<GG]I2NR<<*f>UcHGtnhY8j?Y0hNhYHXUe
%gAPR?9RNr40*LXNR,IuR?c+j'l%_jZ!JPj-;/_T[IFLjXp$&f[$RYf`C$5bN_$SP3SFTCtPKGm37oQSpB'K#s"PL$F@IV:q5c7hE
%EY?0L6qXVAgOnHs<bC@AEmQAHYH"FB&f!<Yl8c,1Fq`t"Z1:-GS@M:9XN?e.@HEJS0UT1V,cC/TieB@7=sBX8PCE7=qttXRm^SdZ
%s3Ar?kNBVOoA<dA5j.=FPC<GR8eWSfL:3@DJ^2ShD_W0!OYbm_r1]8JR;[N%1VNB9harc&k%DD,Pjt.;1Z)[;ihDXtb9!NM%4$[A
%i\a#Rbb,(s=0I`><_GcN^(Ij:Ca[SNS`U)E)(/"Zg[=>jiFZcOcaA4d.[Bj;irQ-D0<a*Z@D.3'CD-]u4(*Z:9;o.lm+9cLTj=*D
%F"kq%bqio%%,%gm\QR.<$*1:QfdrD'>@ctj>JuN_bPKfaEkP@cD`(2,Xa2e%%6]62Vp6V6FZ08[grW9]-$$!Iq6O:LQ?4dr!C?3N
%\_:a.q]<7"ZDaA(`HP&YE(UjkQS@kBl[-fhR[l2=]DE/@>HLWQ&^g?ePjmpJqZL``C6T(do/CTLR-5W4Hc@d#J@g:i-tKn$JC0J5
%!`88p[\!(]7(.A1knYM<@0tOmS5,M#?KR*2hZ:q`nM3nQg`l21bp!cR1(2"qQ[.S%Sp6YN?KR*2s&.jQ1*VaNWWW6G!bn5k]%KPJ
%AEZ5-)5Ps05MQOEM3$5#oX]n:niZM\C8U70CnagF*s^o$l-j?G"%f*3T(I@VOut6Zl1[lqg6Y@SlpVT0$[1^"9M>d%s0YKHDUg_l
%Ddf(clSo9]0I:qUk([kJ!m8&nS.OBRY8PAp4E%ucD4Qu*&a-VVh>^shDdPQ9$B"Mkk$Pgn1KQ5(ULot"Vt(L+))cu7I8Wb[e3D5b
%^URsBg=Uk\<(oiQW=bs0hh#!)n27<&Bp)mAAeqscq"sbmq"=<i[jgo=/2I7E(uT%k`O&J7B#29Y;<Bg/h+S>Vjq6<h7;0#H3Nd77
%9B3ju.OD-J$9R)[3:"/H!1Y>6`\"b@s,@DEFXmd]rDbHs.YX,c-CaIeq!(*+H&TiN^79Hi@sT,sGogIY7EM$M4@Tr#k';o2*b/*5
%`O&HaT#[4EU<N3Gduqab#Dn>:-9d>B5A*`AUdBZ\e^V*n8V!4R[_6>YKm$9QXI#,M_i&ME!=G`sfXmkmSa$g'rB8Pn"S'dH`b`E"
%B^Bo"0f'-=90*SeV0oWAX])57P!ihDrGN(P>5b7&DAS$R$G01ok]^45,\"KjhG^HJBCqpl7-o<KXB1TfGOBWYONan%9&spGqNXXY
%H-_S<8au[7m<TDcUOIPdbi$H+o6Z+E_/oMJ"sn8Qre&f,rN=)bBr?75W=Z511F\\><h8mP@=C@1')G;VocWiol$,\>m[ZcRk\SnX
%IaaO*d^>JmqFUh5]]<i@9"kr.h3=.O,lqSc$bk>j'kc`$Tfp]ES@2[MJs)Cu9>tZaD4\cH2q$@M=RL[cH1P_;hZda8c-<#oT8;VB
%fTLM:2gKlF4IVa0F7X'_*mOYmC9%tPV(dVn>QUkdiS6PcRtl(VE,H`Bc,7*kE:.SV?G((Y8Ru6"@l\n5@_$W0*mIDP1ma$iVBhU'
%`cna0cct*b$jiP3Sob..+PN7C>:!nL_:SLr&sKC1lD&4sQnb]snJ>`[0D_1qjn3CAaLIe(l"&\l4#NHV+ZpFAW%KP6Cl<4)hE7tE
%L$Pk*BW="C6Fm&)1Jp?Fec&E;P&?WbDHVqh!,sEaBVpc=M_F&5c%oaR<=naqoG#BnX<s_j9tr"R,0?f]C<=4/F4(e,Jh&W&Ydo(>
%^M>u(CsY9'[\-8i2qI7N07lOTU_"gCFh501:&oAd@/P/4kQ6>C:.M8#qC(YKLT,L5":LRCA4a>8X*6n"1hkNkM),Ok6Kr(`ob.1$
%Y'(GK`IpBm$Q^\3SPZ-i]h=a_NqL(spM$PLG%a+nEU<Y]\Ig`YqbfXQV)O`+WMqOA]n+AR5NLD63e8-Hh<t9uW7OX#!\bO5CD$A:
%^:nc*>k5G+2g=q`e*RjoIA48Jo\]7s:8Bn=C8Y`'D<_SFk^LBCd*1UakLJ/tW!Urif[#Wt8.b;s&*jma".a<;L'2\t3f/Al)n.Ef
%^SQ2DG&@D!QJ5Kk;PNV<Qn$(Fr-7Ep8pOkLB36`WQf(u0%E#CXj18VPkJhLZ*,j,,PAVA()#-Z]NlbF>DAT2rSt+QT$'G2dRVeS7
%%.a>>#,gACR8&#*em1rq7uY-@@i?BH)8+((-GLko[sbOVX["\WB9jS(q8Gb26_^J8\i$4RA/Z2.25'1Hgn$58.f:WjG2edXT$l\L
%KDl3^`^@mu-;bMXj/kgpQ$W%0'OOVDR[DK8qe#_kN#<"tVuD^8UKN%>G!1Bq47RMfXO"cF'!mumS)R'fOOaS4:1rnTiu<X]'CV=6
%>\W$?fU@)>h7p-(&j/ZD2$uWFnl=pQktg21K27CsSU-&0A9iArC?E^a=it+M-Gqm(LViH:4:)q',*QZ8&tHrq^i,BJ\%6nCZ8TgK
%C5#_fWCCKVaYIa+9?fMe4e8q4D6oWoqoWaP<f9=)`5-NgVp1mc\k)Bd$5:MPJ3kNVB?WlXRHllZJ,J%$h=sjBH0XGI+:FOKALj&'
%UC!eP_RZY#S<i6Q[$=bmVB+I]99>IFHb+C/>:YG8L;[peRa)E/[:>YZD[T^7mG"J\E\7:4+9-Q;i6OOUfl<iU^Q80%AS=Ha@f<s(
%g2;(;=/ghF(0m/oWM='fp,MKXPk['O<%@!&TiYgWdsA^56,,L8WrX;\XJRan6NfgOG('O,6hU`jL@&rF.oUPBs49+,M>d27p[=$d
%ZH`(LDOta.4MIcEs/PTN#j'26ieN'6g*^@#6Xg^pfopHa;(73i[+#\:W@AhapF\_S/,GNN/`/G,9@#T#YPT+8Thud-iG6#9]5liA
%/;C)IS9I3emQ(7=Q.l3]<2:"%+$OD<iZIgO.u4;0;P_QV76"C-cFZ9%&Hcf2IZB%QWSK055`X0/ZLa=lY@rYk]?/0'_A'e1pCFL[
%rP9TUG?gf5m:\`CW])0P5#'a"S:7,"Q_3=H&q0cKj@AmU?GTV@?X+oLZjp;+DL/3ekYs![fEp9M'h`0YWWBbb[p92u)Ih99^rO?0
%$$?`[ahK^X03VqSdU,$SBsa5P<gIO'ZgU2d[5HNE;eLJ32?FA4e*;BDor'o)fC4K+j/`$T0;8$6e37E5,X>GDqu)?O[RMuu&jRu?
%_KBSZAQZSYeb*!!`W(sSOab^+=Ya0IOn)'h)+gcRlbnQV.!/Y[HM'4sKo(?NAu]e@HZCO^pI:\P>?Q'S'u9!a%4+H,S5]Fs\N(O7
%%eXc/B=:4=Fn+)ES+fJcP?+MbQlS&%;>@WjWYAE%5b.21EHr5&n&E%hfZ$9:[^oJ?4sBDTY+F$'boR6nU+_bmNC7,&Hi)a'-fN%L
%7Ff&%*tn\gBq+L9I2"g,oeq(lqk]5E;6tX152XJOkoV`::'>?&OlGIUGFf3rJrJGPm%[a!#=W[:I_fXos*6DY7@>Al`,i3?65eIb
%C!/YMp\\";CnK=3Ahh8+4/_`#H*ig5`#u[ilR=\gWnaUUJp)usQ8iRGOX\N.`d)MJB]@Fre7Gsk9XW%CP^;Q@^V"%P?@`VG;@Qg]
%]pfBZAL/poS=(^&F.&':9oYgE!`TgOMgH3Yj\2l)[i4p_KYZq\.be[h;m1dR]@;e4YRSeFL*P,;28aZ`/C(#n@qWJkQ9no8dDo$?
%Jju_2BWcM.;'B\+$-1Nl\jjMa^!ijdl^^LCR,T(8]-]^ZQ<L-IpJU:`oQNC)>:d79o5^\_<n^o)9[=-F<Z/_Y;#;<@:*Kam7VB>2
%.M\XWhZR5h`'/SQpEolZBT/QalK:Ip<N4BFZm)SoO$9[)iaX4<@rT;L-,gXj7Oh3tDjP3,$\l!YMIh7RBn<OA;X5gn.OJ<`<Ja,E
%diP_($omOZ)aoDM6R:gjpU20n/j$m\.<Sm6KTtitD7aZ18ZD83B[]X3D5k(Te)HDngS_:EI_?:l!-qZ7G`PdV@ouq!28dQRR<ZQn
%F`oFqWDjQ?Db<`#Ld"fqoKr0idq=XQJapGGPdJ[Q\7,.#G,4h$oOZnCl5Z,m-Zp"61oRh*.8i)jCHtBAerbW^;Qc9_X`h%"?#'%2
%`]-%',pOJ@XVXVnl3kOrC]m/=li`E1e:-Y/WKM5^2Mp!M?J]99,gO\TiH/!GSOS8,[Zu/smh//3I4mGsc#Od]$AS>]:$0Rjmt=^S
%IM/T0T*6=IeO$+f+Dl\Z`S[Hl08[->!F(ElBdh5'=5.I!@q&oTn8NqBg;#Y!1q@o_gENV5]dQ<C8baaaS&J9F^g*ju_g8rlo5Jn$
%[@fg!+uX<CImo)G[el9HHg.2%BpT.IXON?6Co'Hr5c>$tI^ad]4[)I!J=N,tcE!Y[0iDPR7eC!^E)8$M44T^eppAbM^TcK1V%o0u
%QpZZq(1Iik*:%-KOkMfJs';Xd^g30K3?PjZ#&;YJoXN_XeK\s&Q#"T@ZM%hEp&XNQrTeI*M,$RS*2`DVkX`kMBd@Jsh)g\Eef/O\
%A8HH]7_CY^4fYjFds'jW7?@HHp$n(-F4-na`^t^/!ZP"LZLP>OSfui!c`k_jp@_G1!dTWhV:Et7[][f5F$dh<fNB/l"c1F%&"/Qb
%(/ubn(2f;HD73&ZXt<1&UOk"^5*I#uR.GV%I'7]j:W89!^Yo,35mAR1eZO_1Q("tN?tH6X5q<XJk<Dj+9sTB@dZ=0B1'F#t36sE;
%QEhgMrQ8,,IRXIMWrKTcm<U!$6%?oVHN$p2O493SGLb6ip7.(#HLYSuiFRrlla[FZ8+I#]XC%2Bj1)X%C6^Gf_#Ste%j[1/P2`c6
%%aPD-"Xb!Q6%EL%:`IH43!M)<7(U=L2oq'IVaES/3.e6:r0?[().OM*nW&5%6QZWe#^iA53:g&C[.N;cdKRO-aV#7F)T@AS%m,d_
%ejco:mU.=fFi2a8Xc"8!4B-$,Wf_3[YY-jK4K<`).ccFPi]pec2N]4D#hmpYL$B2FYZK!/+$hbT*UarMDnJcKf1RTU`T@)Z@r'dP
%hSX_\W>aQOlq"1H]L+Rn6cY"NJm,8tK<h+>\<h5.>GG/Mkh2pM7UYrY7]%J[DZ9L8:aqEEP^;I/_[X8B;@WW/@RJ$Ra:lg-VVWkf
%o/9W@&VCh`26n<@A5#JO!F8&?NJr-KnV02;#OK9d?CkOo4;RSbT`\7(_fV:Q'o=iU)aDafFr[fjKK9lYNLfV:.*gm[Kj(P'MsOTU
%0<Q3Q<P)L-Je*I+&i;pOc+srJ>+*rA5TWa/'\h1(Z?k?E?"4]M5&*9EB2YjnM:##4$b&s]2H$]gS'V^V[0cRRrRrm5,AWl*m"*eT
%?deE4f]&33kZ/)9:qR$Q_F:St.9=H%D4]r2Z2D+,buf[n9%sdYUDbtm>NA5l?&@NZ5_ks:c.4:X7iTFSA%]MCcJ<gaf/rED,lk/b
%-\LAF-rD<u4o(nuDSKg,Bj7/"f!mo_8u$Z/O.n[VY]s,V\Y+M&;(H]o7^t-Ub%dcr!/[q"Z:N8XD+l>J^0q\q=@?t2LMR2?9l*06
%f[s_3b.^@p2OhT>T`$p[;(7/iAp_UHQ[SH7_J`rg7#ipWq&*`G0OLY=MD(r!]ht_hJWWo/j/Uu6BA>nW;:OYJ`D2S`-YT';gXT]]
%`mIk0)FUQEZJ?6n-BQ-JrW=IAC\gf,Zr8VsAor"=SlI#q@Cm/prLh\ABt_3N3+o4l]u[KAD$EG=<2lNkP^3:8<5e.,)RYVg!):e7
%poL90<;0Q?K5fki`39BFh=tY,Ss$BLAd-(?88iYm3S(nQR,>N%,H)&DN=S^trXV#lEp^HdC6R_&C@*'[frJDV;"d(,]+ZNKnMS@L
%F#InD.j+I7Pn%#;MO8iqTT8sln)VgEg"$F;l0:k\E]lb7<Sq<GK"]6KNo.]s>\$@LI+g,Q%j:'BqJqh2h;t==l>)3$K1;Um.ZTR%
%'j`=DPD[d`Y:/C)"jKr&6KjXBp/>K2n[(Y6p"*3CQ>-T\6*HrI!^Tn5S0BI'dT"T1LZ788=slFZc(n[TG[gO*''$PMr_`-[)AEm]
%lEq<0Mtht7+XXl2b-b3Z-H;lk]Q?A,$\oDFL^'i%*>9/[WA8,6K2a-.j*oqIQgdp&(W;/?$P+Z5LA,FESBQj;'._9!Lub@:;tZ&^
%6fh@K;nL%:7%#2lX=-Ck(RjI*(aD_f/ab2JpunkCnO]5")ejlAbdfsl)chCYA-q+YcJOjZIjO=WWcZq3a(';_.ct#sim6KA\l!n+
%0mnp5Fp/98Jqc7I0:,/??YZTnHECM`C=]Fr9`M,LEo_[R21dC=BH%3#[C49f6&Qc8M<gDH2D?Vp_)^R)>i7N8B^7=o[F)Or1##I!
%84Yo*U)6t'nZ()t0a-'@Cp_q[,_35ap!AU=kTtp&_Kk]7d>E%u?hNQ(A,r]!'TR#kL8Q;UQDNg>4D=0g5>%VQ*XugB=o&+m6C_;o
%<od6.?BL%C^*o%)bY_jrH/RT_cn7Mp)1&oRgQ3[Ro&>\!XW>krf"c5P:>HM,*ZQ[>@E50a5?)W]k:/i<(!G?<X[)0PQUX=HNj$hI
%V^."SXE+JP*tMes3f0?26^JB&8^_Le)\mMfZ>l&%VAgeh6h;3s_h`&XnQJu(&S044)bJ[l&3IpG2(T-fl^khMT-"sE=O+^+KZ*00
%7]G>dB26TTj`2SoEH0Wd?(DHT1/4E#P;kdY3iB6WcNIQ5H+(B!ds/TQXBVXeGrYZ5@pJ-H.&-@TH(4u"X-MPZJYB-8FNu&,oih5-
%!)%tMq<7U7(_T=0)*mIqZ]U[dTEOZ1kuFX-?44o@=DidU(G_?c"4!V!mQhk5cPa"S<F>DsDl6Y#&eRoH^['=/'2d7_68`/:,.4']
%F6b`mb:8%fT&fV=4F;j8kT\nRY`qn\G<>fooBimVqaZ^kSW0CWr`23bC-LE:\N!^H2n':Gl/l2%]kfiYojm[X8_Yo]%mL!Q*PLoH
%jd2V-2u`X9T6,DPb>(*Hn*WM'^%-Q%VY0<Sh4oIoJ$_o'Gg^uMVpc`3RWs1JF['/4k`;R,oP;9i])AGs<:";o$6AI\Da&SRV*FD)
%jgVj/$@C+hG)P6qS)2_+]KHmu:]Dt^iba8(B"aOCKDntU^uQ$3hXT2*qJ5aIhO`.N:[_o$pZ]pcoNHM4FQrYKUqc=>@eaiDgcF9,
%>McBnPBjRmU-I4Or\U5t28A,;CV3s1rUT1,$N:=pQZ$d]=6E;,/"lEHDiS+_3ok>uT-"!lr96&@G0`slL&?Ro:,ZVM5JCcJDlb$n
%:VX<'o"3ZN%)Vb]Vqpr+Ricf+mQOk/H-n?21Y*D8-;Df#=N`=oYDf#8o>'"ho3kSpnj\-%cTfU443].5o=TJ8S?BX,e(@BuDf8l\
%+0?u\cu?WOTg?QI(QsIGY5]2qYtsgF#s4%Q_"HD!2e"bS5:9:r^A(Chf4EKX@1snI3hoLE?:>fVR;'*:Sil_jO,"VOl1Y!=?Y*RZ
%+"qR$DCeu(UQs'b\'JhOO00Sm0%]":Hb01'q6GF^=hOdqg\^PbN2*+]O2,\$3JN.Fo(BJ.[=6fN5KN:63R3Q"Rp>dJZd#o6K73^?
%\&SYrD0J3oka6QTKn'*T\:4E$^%SD\F=!5fcSr0XpRfrUji\i#JoIb4+(\!P5'D/M]Z>"Uff]1Y^%()kc#Tj,o[c8'3S<&$4Zh@\
%fC!jg0A\?g&3[e2D6Ngi5O@_Op[6IOgQa-$F1Ym7S\+;Zlb^k($[_a([JpPbZLIEFXhA)fSoiC^CYQJ@`RCpF>[Mi@]6g.Beh[[q
%([E0fSaD&^8%jS@'`EfTq4I<=WkP'2gaH.N$cQace*3F4(,9_`QVKbohSr;,,f*OMI9K1F*kqN;^:3@a@qHP,V(PYl=$GU!@Xb0A
%C&^/2f.1W4>-!u25$A2TVjGj?bF^]AMt_E*ds$bYoCS2=;S;qsaG(Dah:/$n<utF,UfVb9lKNXK[PI*TQODR4qen[58[!X!rL2$%
%YHOf^0$=dS>4qZ%>&UsJ[(4i'P;YM+S[?*.i-F%e^\BhVl=\AKpZ0+`qg%L1HLl:UF*an&pUI"@0#)PXNugGK8j@drn1ss<VQZi*
%2t-.0Euu1Dd_!]I46c\5[jUEQ99#"s]q`SVqSdb.S)+[AcI.K/f2gA@bKaGjja";)51r$%d]^'&YL@DN?Ph/ZlM#MOJ"Ag9_D34j
%]lqks?WK@f^RX$Pe)tXUSYV24)L'UG`CKgiX*W,f?S?3@dacV:hpV1mbgZ3n_V9"np3kuS6@(<K/1`]f%i1J?(RGq=Y26iu=N`kY
%(=l\_?P^#$?u*U.&$!"\K)Ki`q1<g8G@b2uZhACtdG<`s_NX-ZD[X+V=!nCOcS)AR]ha!?L&I(YNY[Y4#M-bmb0/MUlh6gsL%cK[
%oJ'QQ=?&B6T.QR7C$CPX4_(2`RO4sc2Ei]LNkIS,e%Y_5=^3q#hH=*l*a^M%QI"G@Y+I]"(3T5^[qIFaCPuLVBIuFCZ?<GIjOMjH
%(O$@]+"]Z<dIN4mDm(68*e/QO/Y7E>\A%`eEV8bZ-blpj(`We*`R<j>Fn)O&i[ZUe=F6=F>&5d'0CLG34heFIpO;Q$cJ%HZ=*M$R
%(LQX`l.=HIrl;?`G94G2V!mAfoXf==RG%6p#A\8F40S(]*o;13fmJ,/j2RSK42L(=LH?:W0<X_JIqa&n1tk_]9BiS(6X")9q;($/
%dTYi%a!L[<W%C$sm+Tm?_rXB]gY0WgdaP7`=%`cO*j.,d\="^;mha^HQ9JBQ^F^28QCXkUB4$[c)Ae+mEk3)ibBL.J0:+K<e]+oV
%/o3+X*pXo6T9QZ4[*8)>kKSqHK6PqTjjW>g&"!<Dq=K%pd)sr1A]aqU>haOn=miAp^:h/6HFnWM]sR=tY4^pUk3ggDXcI\8?du3i
%HUfI&]>l!84hgg%][F=e\T;n4pVM3jG.5&tGBUHDrT#]?iS@!7djpgos4rRm4.@`2^O#:4h>Gj9PloHs/#Te=jctlKK>L7NH"2?#
%ZE6,;mHk\tX*;$GL"21<g@;2T^]/!?n`Nqbp$&rVf'78;]"%V)H1((bQ[8MICAH7+Q<F/ena(Tq45\WWAX5P3hK(mJI(T.JR<<rH
%R<b]Pn)\RQ\G*^DqL%bE&q%?9?2jKT?Ft[[@;U/[o$a&de^)gTSh6J9m<m;6edh0;<7]nI]PFYR$a$85Y6SBGXhF5HV.K(uS1SX9
%2tD<NpE-Kg5MY.5jidCZ$E_;Emlqh^pBt?Ph>>aolaQ0f[F=I7oqb/olgEn]G!13ImHsb.b!gaWNW%70s75^I_>8<:e^]!/nkUjD
%[f,/-j"-g(1/G%k==3Y!c-"ebS,ES91;Sn#cSCdK[E?M+F7[5fqQ!]\)d[O3hT0i2IGQs;CmuAn^4-',K@nT.picT2>[(@Q51%O*
%Mq?Zm4323`gW,6+S'.A3gA+CjenVRr^9kAT:WqtuiTc0sn7;2ah[?dnrH6pRoQ*/sf5&]mh\]#Db#uW,G^%DW<8Xep063]B)t33+
%Sf5SrM/.Ln?bC0Wm[Vd#a'/FNk3Ob)c!ttp\bX@^o>LR<J*C)DDiZ_Y`nG+heuXW;gh#gIqm?Unh7YmeX7ZBdbA*Gh>5$\C]sd=C
%FVjDB\_NAHHK/\h0!&Dpp:'qn>j'tWmDk6bIsL2;[l7'PdoRo0c?WutidC@T0>$sB>)qpP(A"bL:HuU=kIu4P>e@serLVan_UohJ
%^%EF/He.[mjL-Z/cUV2p?MVR(YQ!P/'>lb$096"ujYmYKjmLY$s%DSd8\XrWroUobqj3eAq1UZ)YK'Ethj:JaS)r+S41*5_SJRRf
%QBcfchqHbogY+^Eq6[n:I/Ej0<]e[b51!=Gm0?F-?crt?Y6oUe!q517K5VQUIX/I&pjMShUO0u1LPN]GiSiIZ4"hX5T%iD&qbLQU
%+$JC>s7GOE`P&rTB7CtQ"WfPDNTJ4Hlac?%Nt.YO*Zm95NunW&q`Bk.NPL%LEV+A58_,cf4ulbK8j=b*Y8c0ek>0]41\aelmM=\e
%B&?q/]uYZ9)dI7;I;o.-gOInUDSKjuc0`j3:D^JZc,(ANPKOs&1NQ]/s&&3[h0ts-3.Ld:kK^\7EQ:4'D!a>Lb%,ZZ]tMSV1qjs"
%lu"@=.dq8%pJuKFInXL!bP/%*o69)@D<85bY5J3+l2#Q%r2AFtRbh:tps`XE5!Rk-4iB*O5:mT[SpjmJD*HGH(V+0?a3Ep_n#ggU
%4fdG?>jgE4IIUu(]=Ri]n+DH&DXXY+[/#*W@iR[^<*EORIWBc-l1rl!d\@U/7itnf*rc!2bmTEUI8ZZupATs$I)#^NbeU>aq^6To
%p\(fII/&#lWi+_o4=Y:4%SgAtNJ"Fh>Ns$_p[[T'lg0'[HttAV*`aA1gc<LsjL:.m5&80cLP=%PUMmcrGE7`a@.AL1n]/rF=o3:;
%AbskEkG=NK0>'F<=-dNfQPXG_lDp20A*qfVo;hcRNOSHQ<V>kSo950^o';L;)m@O_4s-mb:=BRmf1s$.`t(q+2cl#70A@<+YO<4_
%/AC!?n7)"^T-mE@^2BN[?,*X/5LeR1>Wk,mF0WCTp$M&<M+,V#c!F_hIf$%P[.(MLnS%ZfoBarXG=QF!>OO2J%gqdW^>*_cmsKG0
%rr1@O_tu51PV<$k]\7l5kNVriqOc<oebp$T7I/fc(ZsiB&&llXO$9^1/>PMmQHF]+r-7(CoI9_fZV8Pig,e"Os7H0Lao847BuU$e
%"jZ,jU\(/pT?HZ9f4UN'YBS=d<cn);nEt&YbGqu%q3%fCf3^^kBGZ7^HflK'a%tR)%K:`qHkLPpNaJAr]fJ>@IoC`9I,;M[ri4ls
%[boFeKp.i%Thp6D(DNG;QX>Y($X0l=IIgmTA3JQ2ddb4>[nE"AeuK2Mfsei;dG&l9MsH9Kk+udZH^@5Mb@d0nXa9idHs,483o6gL
%\Z/mnRq:pGl;m`Blcft%g>P48e$%&:@INO(a0k3a`oZ'pCO`lm]RI2NFg#"V)aWT%mRsbS^8%$p$h(*VW_X\+<3)XNr:AXu(&r/g
%pTFM#<nPb?f'g5=G5_4mo54Hkr6^.OTcG^CN_ds72!Sl@kHrGln&lsQgY9DLTp[epV<3ucV`2l,Hg]A6lI(CdruOVL`^];g>bj/S
%48bJNa;4)BoL.?)^9M@#CV]I[m(0g#He+L%;]?4ls+oM)`d)iLH(HYWg;@j\:[*V#12NH:fP')*s5X,[\2V,*F2,^lGdc9HF@X@:
%]cE!S7IN%t/`>4*W;Gnb@KIK3_sMbtc/6.JY_d0`>ooB\/_e9FH\U\[VT"$%Y%(jp):*=\gS[8@f<?k+_t#ZP?8@oC`k_)$#/8<S
%MH)P3F%*uqXF]8_rO^sdc5/iF1:EnNZA>0d\Og=K#IV`IBlil_XNJo=I=4Yq>R>,ZpF;pT*BWocHPTCWY3a]Q#F0?-_QTR!YOF(G
%I=PS^k,-h$Wp/=B/d;-Qh!-CZkj;Giek41g6*]3Z7C1im2u8M7d1WW,`ecR%DNo.9SJaWu^CbI>QE`$d(s*]bIW?0?$nPPor"PH[
%dlfn[AlMjF<W,rokIk%:"m%C!!M2uC<VW6EIee?Tj=7s>'`8-bn.EjH8U>P#)tY\['e?-C@FslT?%)RV@>!*jm:[EfT5GL3n&mp8
%T@KQPp_I!:dXr&._sO4jko74OqG0&pN9f.lC>JPs)Q:'BaYP_6Bm+f@=T%%#(o6k",@_j]]^Ct%1/e>p@Q56t]BD:-k`PH.8DA0;
%@:s7N)QGm(pGBrK16)r^ZMf_,kFepo.@XrDq)qI7@"`*&Ce_8Jqq<J,9["G!IIBRB"Xk4\>&6!)VAqa/l$,\u=D"odnJ5Nr7`LM^
%LbQ[*HZ<%n-/SIXrs[Z,peDV<UF'0!?H=s8*$4G#ZmU1'B,h3uXefM_[#+1ENA,qgdo-^iaUJ=E]#M,9;++5b[<['*%@4f;AcW;s
%BX3CF.7S-:nN>>+gJ&-[Xr;,?)f.l!\6^Y?;.dh21npuJP[Raq_'$TnK4.B^Fo5h@>4e.34'C@Vf&aN&k&>t3Ws7Q_$m?Cj4N/:$
%m7+Q@<h,ilST&(]F-M]_`6;>QmL]s9(j$rh8dE\Q+XY,M18YBlZst>7#2N<^GL<(_c"KKg*oo;6C*oiIr^BG'/F"\+%@IO[LTD+G
%$"i`6bC7BF&Nh3u)Q##25^!HZMJ)/73l-i[`=9bqg=T!!XJXjfAJUPKda'ENdkfom`HaR\Ji-,fY*[OX-(Zs(#t.C%q\a!cP>GuY
%8l<rEVF-"P1//&$F_^C[pQ@??YY6EB0>ot*FgAo!/7-JmG!R>.!B]m$6a7Z>q,iP'm=sD(;?N/KB^i6N%\kl"%VYIDP8cCk"/A.;
%&N,q<Lieu[/):B5C`9@R#*3B$SW%>76*XR`Te-lufAKE8W>^#G/_NfVPccl\.q:W?bp=cS6\/ecoFWql/(pr=(PjGQ2GGKa%RFNc
%1:NOu!A'-3/X/muT[5G.8P,RK>0HQT%C(T6S4ZG-@VCp&d(;@W9"1IELhuA8DFgqL=p?.m&(`"S1;'!q'-!AEab-X;kkS\P'2or)
%7R\7?F$ZmYG"4Cq9ktAJUo#GSGj%PCl)P"DE[F>XLI`/!&K=jrk(,m/504*R+ADq?'&#$8cqBGPct=ioiSr>eCf#b[(Y#&&*2SFr
%6T_!09Tg4:%/H'`+fjgrMOR>k[&2u?%.0.)8YJGMISugM'[9LtN>`4pf:k1J;JeJBMj0tY2J>95G]GAZO^qU27nFu*H'<?J<6#-$
%L[C4En<@<BEdPAQ<R>ml3V99gq@,&98-;?kN^+_$'?Mf$7\KVVcoAfs5_CGDX%r/A[1(qmlpTc/,_uZ\$4RtEL#T#81#l-BUaUOf
%+4$.WclWs98+/g9)`=m$2JJ5ho+=SV&s,qn6Ot()/tj=$1\>A7hlG@G_N#M?<7Q4,JOY*R9sf&1CkOO(gb-IYA48hT`e^tBoX^J8
%&s:`h9U[,[&49P@'Q_@!_ET7U;mDGq-"M:oHDgjY/_<uB@K7uBMQF=br!>p$7J9$*.j9iCZ.r'PQ-e+D0Nb-GICH,jM+1('doA";
%1f_[R6S9Q'5j#m,[3^52dKW#H/Q,Q*ccJm+-qI"a+ldndAP3_icYYCod%WWV"/9MW@%m#pQfM+6mir&rCgtu#a@#XfLpJ9fKZlr<
%,Iq,;7E"=+HJ)^Po6"VPI\$]`P>FLQ-.aCd=6#9J1,%`Sp.7CqC([=[iZ?F@mSOX7f7rN9gC`mf_UeOKRO`]f(<!_e&W"dB$:r%%
%J1?3Lmq>/?63F!RWQ&W?C8u^o$ia-0aO=BgbS(@uG:Sr!UXb^ad0B;)/sf>e6*hRB`dIu9K;X[kPh7&rh!J*I4;&^-Fm/\s[Y_`K
%omsfgE_r>20>ne9r4>7?Vl3Beek(qAqI-:oO7_NJ^FmeRWr.@'r'bV-6)Kt?H*t8D4D]e*?_MQNn2hP1Bb_%SHnq!3ALOpn!VMH@
%U9UPY@ZUrhO="!4hOsE"Pij`Xe=19,B'2omfKf:sK1fK-O@eG/RP_BbZZPWrKVR`G%Dkn+K<$2D3O=Ea$X]$kp1'5?Y")Uqq47eQ
%`Y9n0FYT_ZNq]uKnoX-\i'#=VRmU+6$i/&=$7TKRc.I@]i]>N20usrN;\V=(EeFU3l+#0$0ZYV#fjf21koukD0N*]u__.asl+Q1.
%=?R]lp:ut2JTFPSO@UhWPGTN;UPtU,-;=/e_2u)6'Qd`WeZACLa'7Ng)htI'):CpIa^PqJ8Di,D'CN`_.`NVmRte/7d`R0.r)dRO
%+G\7MipSbdEMt5?A\/mnGB<o/MJ&Htql]jWCl>f.:=:Ks^Xr:=6MO+Bib]a7<%&"d@>=m(8`qXdA4T%k.3)F+TWn@8)Rs+rT]euA
%@pBs!(a@8VaicR$STN2@Bdn](90TWKWd)?&'./)Nh,4.n#YNKKPhNnsDHB2]`i)Vj3m<+FC;a"2+j$GuM!>\K7o%Ng_ga0I&s4a%
%k&BPLL&).]S\_iK&QaL;Xp?C\13egG/ZDjj"b%l(3^j)q>aeV:,4$N$P0ufd7"0h]A5g'rYc3O/?4E#rjsWFA5-B_$j%:s3;BjsO
%8JF:rX-4^u^h@Zug*gSS%@3c`GWSfX,)WkI;$I9q[]\J&L'lq*HK8$M@Wo.F)f013BrJ!8iBEZ#Ii(dH,0`A-KYehO,m`K>\J\>"
%rp\>\Xls_3/Z1=O%cU(A=Lo+k6_kU,OMXhY3_,B358/R%8IZ@G]:i&W?rBoY8R\tFO!Z%(H?Y#$h5F%'GSF"I&W#OR690m39%>BO
%8Ms3qj8N8&AL&Yn2IuV3g/+1])?r4,@?.1!1M&2knjCkr]E9*a.Pen'E6&05DPFs:ejG0PVPC))M9+,$)c2I>ib43R7*:T6,H)<G
%+oEU^jbMV`64cRbOec+C)qUei_j'7/k+ZP8P5,eO4h:nM&\=F)@\l8#fLLR!TL#T+Osq9]&Sl*P6A8&5*o&;6R9p:a/>SMXAK+U1
%#T6O_L]"2$C'5P>];m*^Y@3o2TI@=7//F/L6U$IG9A(*.>Y`bg(r)CJ7HE"DLTra8cbpga2Cb^N4%f%3Xs/+68Tbd2RC:N`)K@F3
%B3[f]n?ABBlnG'63n[QTXmibs2ADu/&sW\6gGi(`T[RGi.N6A\)tAXoMc#s12$^@*@Y>\Z.)t4]>an.6;4^c@$@a_JFOQBg!a/[S
%'%O-Cg5P9:oO3T`)I_$JZ`bpR0TmV"0r6tT.Ie,8>NL2q2F)Re-Kf2/i8Or82B^t]LZ_Ff@#5(LCiIlP&HSPa_@o+ucrG]E)UunN
%]P*6J`!_KSP6u\IVl;G,E0]4CY:M!F5;ZD;^86iDWJUO^:(3!R0"Q9WkpbL7HI8OuaX6R>jB`ijpd<QhW*P35c7u-tO/!2(W1WS_
%C>iq?o;OtWk7`RnZ7["^if0UM33\KX")R`Y(9o`e]WbR@W@FVYe8b976KAsjKh9-.1o;^E+7()Ia4-ViJSF/LpR:_D_BrAtP!(0L
%JV43QN6im.F,XKVVae$^X=#C[j3QU',C!+]8)b(q6PPR@AP4("!*qQ57U.:E@Bg$q(r;?+1;j4HCd__UPrt!LJ_--:#WE.6:9l=o
%Y\5WZ*c9$B5"#HQf.[oRLnkm#,&sajB(g31X-AG$6`=>9mH.EE(6!JWr+W\Wplos#.BaEpVB\Rpnq76!%C,WE[&7DTS-Nsag5V&>
%e7gu]h\.BC^89bnI6Kep9Pqs4$\uW?6P]f[6Cfg&C0I^,U5"amU,KtX?>'HFQUTP_=:su!3,DNa6F+dKqKV&pa$(.3+Y1Re>U0;C
%@*MaY_82kH1'XVpO2l;-UWX43cTG.-O5jEd1`^;R,4<7@7\#2-i%!6q^;jQjj!a2kK-3N%[$.?5WKX4g*c).0iF,*0`McM*)I\4S
%Jq=ie%O6jN";b,f&U)Y\]dWg7?FW&rM^T?Zo7TVGbJS(.<[_l\Q_cYI*=^u[q.?St?!'RSaD/Y1NTFir,_mYOTU5:q-Y/V2d&<'B
%L[uODVCpH*<,*$.q?G5&r6QXmOg7Y.1j#2UR4Qd>Su+Ee^9K1EC9U:$n>JdO#G#PllHhu",o@#0a<IN:q2@)[&@3me9p4$^/U7CH
%#p1<8iXVK/l#@T%-m>MQ,M2DXNHO>)L"m8YF-Ja7X&)KPAq[^[o&GUJ(^F=kCQ1ND1'n6EiF.Mq((!E:N7*sp5ckXBZR1k@E"d?@
%TS7iIn4iOO\(dDu6%^%9H+$EVSoQ,n?(*rI=8E]$`^@12SQCGJ8@L[,ZkNk>P\Vi)*7bgak/el.ZQ5#L%HL/Ge>50GE*dB1lU-oA
%I7*Oq&-CTbTk>W"A7EHa6mn.Y82(IC]m3CT4#GJjQdf9iUl-HJ.rLj(?s'+[K\oA";5A`8fGp#Ejbo!1=rMrWB_Z+W@7S$gU06o[
%&;H!q)N9Us3Y.6"ehU]`ToVsBrP[A+aagMYD;^%+[TH1da/*G_I3^b&U9nG*1a*Ob!\@<XL#*7V,&YapGK8kNl!Oo!LIW6)>$G8,
%JKW,0'YBi0]HNN]W(dRNB]I$"4!\eks'RQ;DD<><;uUL75UMVC>/hb&'?Y\3LLON6:4oCU>H7PU1WVr5Kip[LaAZ(g-6K`1_@]Xa
%jbW5BoVb&P\Y+Sn"UK75R#j`PVC`'IR%u0!D4L$Gh&S0R.c&4ai^h[EHsgt8GoBDIr7`hqSO<5h"`kqe`4?F[AT2dHL$t#dgLMo;
%1+^Ug%7Z*4]/JSkE2^iR"HY@S'*5IILRcR&i^h+1TfGhr/c_8)]n)-@33*/*oU2ZVJ'UOE6oBOSfT<AVbdKW16+3&c]*50q&W)ZP
%$PAd`-(NgYFb>>KVZmX#.+\hsM&dd$1mDp/Zro%GhBsFtC\b+6]K34!q\K4*;&ekaVM!OlOc)I?=GV@=O2j4*apE>-R,bR2pHTc(
%g=6KuS?k!?[)[C_6fj>DLr>9=MVV`q5Qa!Bk\;NSi4K8^'0].=%6$\:M+t)s3j=amlJKaFn^)l99])[hO@OJ1:E!Qc,=t@oVY^iZ
%RI,5EV[RZc`j.Xh)+uY:N'`nH,c.^ugVPd,nr\*_"ssD6Mt%j=Kdf%CarMPeC+9pq2Hrl+Mou!*cCd/2j?aR,(W+!L!@M58Zls.0
%:IFq<)%^g"TL)p`J!.hJ/sM,_I"><445i:YRLtfYZife8L7:4B*=rH,:O'0MBOJ=O%e2aFF5WOW\nIqTaCU(C5aE&SiFL:lGWlok
%mFVl.lTAWB(2ci``@($CKZ$m)JAal3QkWu1,IsnWbC9pg7--@a7i+B$=fR)N\i=a1hoh_"'%US-abkgtf$M<4#>o8jRSoP@AfmBT
%^9,7:UhsBIJ$b=1/L/dn+"T3[G^9]],LqR1O\.V2?c<8=B6&Abk11cq_.1h39,D^.-fK$oC[!lnK]ms]T?0>,B'VKo]2,Nj3Z\q9
%bXfI.fJ.Y&_B-Qa"j:sZ?.0WI\-ZP94p7]HRGA-Vf-[0#eM.YVfpnp\;d<Km:5i!LE!O59lT3XEP"(]%fK-Vj529\S]__eT3pI$`
%'gddnO:]A\FLJZbKgM];$CJibhu#-Es-%QsSWQqP]e_E_B69/IZEpf#6s7F"o3tD:D6>WM;Y0Wto^BX#P>[C(:P)#671,ujeGBa_
%7llC<ic$-u+6+k^(+hmF!'qd=c1$-65c"b:OShVB)`R#iY=h>2?W!2+Ie\V"*GHtI@GuA\O.3ZS6>(l=$qE4$Y2^p/l;7C$"N#7C
%X-`M@(+5[GJ";0X;S^aD@F.,rPdtnfD4Bo>`>4JH]52Ii.km-&@X;IO4idc$R;B(i6>%GH/6kUh433Z'9r:-;EVeeNRW+"SLGVL6
%_f/nt"LcSf$S*C+,X6t.632ih4B]p[IGlCf<acc0'n1`BX"WZB\]<`I,^kEn>X`7lbW8EWlIXAhkH(OCF!UqWg9rY^&^(:slk1/L
%[,AAHi7(Ph#+WlpF;SuB<&s:mi3<mh$2nQ95%Q9f1El5+<E6P3RcuncM$t4S$ccRuVOX+5%$76[ll!bVd]#!<PN**-o$SQM#e*#$
%ZhYC.!M5Kqa_Y!GX/9rL19,nQf3oK32a$MaFL`^Q5,\StiK*E"]M9,KNFupbB_!]['"Q=+X=2EJ@MnX^&-5oO"F4PmSWP#!1rHnI
%X*HMl_Rg@F*=fA[iP+@2;Y&ILXl+M$qAVIe&ZQBc#d.s$-?9<%nDoe&lnE4"M"saWJ@cdoU0,q8K_)@_`TALA'Lj8cAhq=:2!C7h
%Am6aFE#mcr-;sZ2B^uTIcQd+4Iie3,RP+Ao(f`CY0Ci5kF*uA'ZajhPkI>Q6i+8-"0fosUjFJuj0#dTPs7iIm]`HmPQGagn:B@NV
%3"gA0UE".q`fPGN8boBkVJWmOa3:j=Ua[9V[.f_28Xeh>o'L*C0*.Ef[tK:D86j,<d:@:WMOQHM@Q:54>"H13Ud/`9(3q"PI9bch
%`');1&,4\A@kHXcE8$*G'LZN$#iBUrX9ismZ'oAtD*og@q/\<\)f0%Ecp1tXU59OB"YnH72+t<>rm4T<8^Z,I8.oDQf+h":M9C6c
%:c[d`9p<a;qIjCH%10?oXbgi!QAX_&#H>J.DR=,5m$2)jcPC4-i5H40#d)nC\;H''"@>a,h@LHWf?<rH96Jk["Lo/afXbfTiUr(k
%*?b`\Mts<jem-V^BZcZ/AYUms:!QU5Ml3iF<XC&(>g7Df=XP-@M@1D2#oe/HT&Kh/ETN,hDoG0D]B\U*^*/s;&.D(#A&0m=/PA^4
%jpQp;Yi"lb<"DSk;XN>eWa'S&?(j,l4Q%M2%d+&)CW'C:1["6p4[)It/R^c`R4q'n/QFE-<8#NJ($-3*Gha)4055T4\b`9(<2tut
%FZ+4FM0(J8Jn[lbOP_=lU%XDU(#9]*[L99;,)[3O6pajGiK7e2I<bc_k'EJmRZIp:65]e@NO>$07>NUE5si<j?P"MeN\2,fE.a0A
%e>dZ5CXps;__`['HVd=JnpI-=n_h&oVo51G<lbhLA1>OXTf&OJ:eQh=&Sa>%',hLYO(s8,o[JnoT'^fd#!+a[Ju5&qQ<USd2DC,e
%CQa4N@u;VZP:`)4L7>J*_4DDJB8YNOGDg*bFLFeI.bSfPJu!<<,3HH1H@u@Rq8r7N8\*%!,d1!f9UYl)X%>&gCIJmS#^3k.Qth8C
%aAU2.>#jbq[$kgQWKj2`SN@b&L5W,tcB%L_"_Uub7%U&^8JI%,4Fn11iW>Hpl/<J\h-I/g&Vem-Fd\/`&Ao9?ERU8DdB1bbgRbIh
%]`8qeQs4TBa7[CHK$GPH0OV#(!Y!-3F=0mm4!G>j<eEi+&Yf`l.%p0XE7KTj?Z&%%6r*MaGUC7jINP9.@l:5h\Og;=KI6&C*s=GG
%DqX\KY&eGQ+i]kiV\m_K,][^j'43`sAoA7AZqZ\A2K?aP9uQC,FbD'r7Zc(b<<^ZG4[Tk-EDV191K[#K!d:cQ!A^_!..f'Y#fFc'
%aHpF2`&"(IE-MF$"6tPdBo[#8F]m4%1[do68_r(T;7akhFS4Sbf,K0LS]nS]jms'$#$3-NO<1VcMNrH2cdkNI#&ItG*V-KSNYpHf
%qZq1=KLSjQaR"jV=#pWZUglp_*1IKl7.[pK@rP7?[_rl2!>I\recD9>rl\(]+>kVOn3!\%d;#mo:p$f]>g&=*/fpZPPG(#tL8d"l
%1d2tP]?nMn9fM01)u>tlHqVHnL?Y.!r*?#G4f#;f>D^,_Ys%Rflc?FT:TF4>Q$Df;U_.7u6WSdY$%OI!7orn?qFRP@`UQN)L.0aI
%i7dndCl[W`J]2oLWB4QlgGX`#,()3"GYkGnKG-9NQP\ad2N0>Y`:8[sME<NQN%1X09g.!N^1YPg(\*mFTk!eXUka-.?K7^\g0rbM
%dlQJsI^EkZ"/8h6Z=MI',=:E+9kBc0drX"FW@JUAa?PgT@pL?30,HG7dsQC@hNq*<YFAEQ3Qc;fGfEPn3FP%m#5:aJhQTtSi@F8!
%3X:nZho1_BdsOqJfg6'm3:6G;hCTp6dNgBPTp3#2_)!>]+Ac-DF?+Wi4!\a^;!snH?9D0mq7?&f/6B-/D7IG[0n"UfJe!N9_CSt[
%gi]8]O[-I:m7@@]i2J\V@Pm<m?3:+fe/+H+$6F.pZ@-`(iaK^(E.ZcH$6.Z\@-7n&;msO1+,\!Q9:f/Zb%8OjJ)V#pU)].5BFQD.
%9-2]0m'sk7+Toh8Hd<1c#F^JT(p+t^iLGG\aX1QIfEHis(1S@@FA,rod,cH0gHj<lGe@Z77QKRf;[H*6`KHMJaNYX_KZZgadc$3-
%EZ1[o\)fod,;Gj\12#R='U&1qE5CC9_e$q*Te<i;hiam`e7'le5tad#S#.h)XQ..^`t7,uTL<lK0ZhR^K`WC9_tR3SHRt"W]'^1Z
%>bg%pku)YI03rVJj)qls"ep_l]&A'OB&<bkDgkJ><SuV-eXsV2acI%"i3j<IIp=NB?)KTqUhTHI:#H@XVt-uR">n=<3:Z'IaG8`J
%=]Nf0EREikEBTUQ)9teoY"(G4FZ+Vlfgk(0/@@WFWX;^`$=`do$jVf9_]+Q9!P!UMo=3B46QSLpKhJEcM)0+KkK^9>P03=H?#>i?
%UXY9hI(kW?`RDpmK#n]b,Hob;Z+e/eVFe2r2,,q30fMDf*mCE4_XLC$c)_!fiQ*@hl4\^ORdh`[ghRb,5@kZ=iaP(HE$BQ5r,c4h
%c(8S'm]Cf.T,h3(C%/IhG,-qi$;YOn<.ccpiqHukKJ2u*A]a+V4eE;ei[>P=F4#[Z(,u-=@&p4%I!u-XT-1Kdh`/'M`:A4)NNYAD
%<Rbl[0UR8fqUGTQ9FN"MXc%jg0T63_&`Q\7^.4!OaLCtWD"=Eb/qZL11F\hQa(ZAgj`nAo68(G,B!LcF\6b2fhQheKU>CcgrfO$2
%?o.ZQn70[>[SB-Ss)c3TPK:Tc&2s$0ZPlfKZ58(-&!39t@1q?mI[lQs*P_^F7_]<h[,@7OF#\gl*cTr1NedpJ,OtCnGS_^!lf3gp
%)f1136Tg#taCjMriOcVpJXdgQ)a1^7Yc0Zu+`O'=NDL_'Ti@Fi+?8kHMJs_kcY)D0e/e)s^'i,YGrVrliM$N_2>@.R+F$FSkr`/l
%pg]>YFZ^f)rf;0tAX+Ytes_/?e`@W;%kTc=@;pOO@L[KME5NgfJQt/ET&?bS)L&NLC_UQhfF4Os#GXO3pmg]fOe_>87?<l<<#Tuc
%f<D:Z`/,.*X$fY?3qViYA<@FpZo':qT@/T,L/u>D30LC7!D7*?2Gt@@BX2-$EYr*A`$2df79$dSN4*\N;*`/V-KiIK&S:auZT.mL
%Jk)D_1oH][LTleM#b=,73dk5%2F@>SN8VNi2J^C\\>!)`<>V"p]3K]]$e8f5cg-`hdY(60Pu:F0G\kqiT[j_Cqgp4CS.Ud$3+n:6
%%R^@"U-LVD:r%\T#W],3.0m<.M^U/H3Sc_/j;.0:iO^G!;oSEn8-`Q:GgK,STq7/Ioau\hT>1ck3^;O(e'3FMc<VFH]Y"m_*]S2]
%d,MLuZU-PF/B6Yt),"cJ[FWtLk8/5@JZrK6=.f$5gSSrG]$WLC3,8RUk[pREMlE^AMTm%Q[icT.-;E7q$_-7N,1MlDSP8/I;hj6:
%HY9%2B:UhfU@94b$G.pD=$<lm&KKulF9QAK'Mb'DCRO@i6Xgq]97b-8PHT*_/V`ifO*oZ59@l%,(q2^+=V4p%U/2!R[X?NPPsO>g
%1kY+=qU6[J9ijn%=P3?+YMb!EUt_oTd>j[j]nT,s/q]BS$i.;eB^t.NiRFg$Ng:VA39n$Oai):((Z[TnTb^/t/oo>p["'.,XCo$g
%a(Of_QX:lmYh4p:#9eZ]E9%Vn>9"XR6_*tB(G2f/;NL190*ZH;&_H_R>U7=_lk@FHW&$bZ#Ee_.iSF%/3:i>dP?(@f84VN'R=`d,
%Y0H[\L1`0lT2UPZ&\1D^Cl)m_DIbti0VdZM6sQjF3e/h.G>[@d#6D=Bf46_m3)gVr+&?4I?`P+@nc8Ae>anB2clgV'>pQ&\j*uFc
%(h\"tPj"Nq0WCp3oAhAN7qc=0XGM;V&Ar!#JcrHjL*QAs$#eMU7b_HDQ_4!`mu[h6X3l&Mbd8se@FD]2a0e=<HX@,_k6aWR35?7\
%(@RmN!)n-iSg,EL%=.Ua8d'MJ2UWL7ni3N'NLF_nrd#Ip+uC`N%[:!o2"H3NC1H"1gHm#7"5u1C4%h8pV_Ugj$6XK-MRjtNOdR#/
%PDl<X/`NE+/Xe3<6=g'`D4o)/]u]Esiaf3d7&,cU*qtJZEid)j7<+/2(:5)DbW)nanq4@VbRN?o@u.g]>o")V>lBE5>N/dY&_(Iq
%'=KHhk=.u9AL%'WVC\$l,GuK7^RRi\/!!^O,SEd<-qtMPD+0H>_AWOdI#4LHDg+I)-&tGtmN#"qVH`&%NkJOYd`#&f$NF4Jir3Bi
%Dk86i#&ao%2OpWs*UN:O+&Z*C\nKJKAEPL:(*'$e(3c@U?cVi)R*G?d2NSE#1?40f5iBL]o.C"p>A$,g_=gT/l=FK/E6s>LHrT1%
%`A/FJ#<Q3^r:NVl49,H6E0*q;75!26A0e)ldDC)sirf_ucI[p:\nE7?#n:J*i[:Z_#>VDbV#rP2fX;qMicB2H*fVJP7<j:<&SO%<
%:P=66$6osN!7$S^Q:]=8[,gLa^&s#R:iVu),H;qIgu6^S#:K2A(l3s4"Jb1@(oS=`i[:EInGkDt+p2La4T!6[CkC#IiRUY:EQ+A$
%giT=\GK>r`-.Y'N!c(A1dPqE()Yo74)\F(65K]eS=2`K7=u=isJY"Gn[_oS0M*MT2r*0_lbq(7_[,A37[-4Z_?XrO+(#hO\@7c*>
%+((&'M8VV2DXos4#*pS1f]9V[ZlmY%WSu<'#EO?0iI.CPf-'+iF^,a./UW12]M?h8`J,I9E,_O^K\IUj'YC7L6GX?s'V:-@KoI.Z
%5E$1Q.NFmIi))@6>R]k9XgtXDB&[MA`jX1:#FJ?-)r\Pu9YXn;OVBK<"D?qYn4mqOAf7jC%PQHOo!>\YBk+cHfKM%#,<-_c)Q\_3
%c\2Z=7ZEFhnc@5[R=*HFb.89l<s95pU*l<b4S`cK,@N.]j3.<b(>CZWnd(;;.ZlKZ)tE!\D?pULs5^l:N[@8ZXSE"^*F_/3)g8ut
%o.4t=5co+N>RgeKrV.b7k4(r0(6a]9,eJBLW$Xmrm_?A>ePnt+lm5_"k#sRpo,OpoCuT7k80)+Ue\/[eNr.n/BR%Mu>n<*P0-]g$
%Dp_3OMno;UDC3*OUCa]ibsi\5F.3)^ib0[$QdX0KAYBEDlpNN2Ml4PMr3(J3itm@]h+;Sr>MiMcR$W<s@+<7gJ8(ZF?9?/X:83s_
%Vb!qmj7!>FZCYB)KX15u_bOJdFdsD!NdqO-+]Wsd>V@\*f5kGnV\+.,^2Zm<Z6XhI7mo%sp<:\%4SA.>*+_YIA=;$A(-[8!l-i(8
%f]!&@-A_AC,hX<d1"N0783Nk"L:\cc7!a`4YsPO>s.D7nM+-B4F&HanV+r8Ml&-(t[D'p=daeBHZ]"'6?a!W7BAU]63;>[,!_4>T
%fSVQuA@9?>WM[kfqU[Z0n5"!U]R_PXj^R_A_Rd/e0>4Hj\221(3?^(.Q6@;a-I[k-<t0anfW''l8!#=Gj54B/Z>!u!E_Ubn(T;cO
%-5U\69r;^)37i-ZHs<o%nmt>%O8,5<5!Xq@cX>7R;U!b^b$Y7KN^9Rb.Q9tF`_WDsgTI;]=+[G_]dA+'n06=\dR.S5I0Ot%Ze4/Z
%]t7e"9lq&\(a(Gh<a9C$7bbsB+$%tuY%d+paNfH!BUIq,6ABJMQRmcf0\/t(BWL4D&[40O/[\"!T`W`^U4Rs+Z)H4Z`;\3)?6b4#
%go7LSrm*.ZkupBTj4aqq3`]nY&YFld'nD'm@i&e!47Jd$?!i?g;/%4c_+n5`K@kAE>W/]nCCh_``DfUQU<@[:\H3F"go7'71ASj\
%<6;\,#a:OgN_tZ]_RH4@MuYDfT^7;L2lG0n.38c^%)GK:MH"V.W<n_-_>u1ZV<Yu,St;[J1[+fo</A1D5I*6\W4Z5]*&#bh=8JI`
%ShO_5>;,.i5J:ofmo9$f)fBOXRVKI$Bo[n$Ni>H%g_Y>C_rPn^)t(AT)_0=?Ij:6C-YPL:9gpQrGURTaA[2ZHnh33g#VGQYSfjO6
%nhG!SD[BSHSe5>VC>juh`\TXAd<`%qm%j^m#SB8t.^VJ2/6J,Gs2Kc33QfN;efD:)O;IKBMf@R4-d^=FQ>&[I02*mt"=!W#K"%XM
%q'>VYn4Nc'Tl+]Sd/sGR1P@Di!?1a\&d"F+NKSZ<Uiufe?#Qg/M>FEH1#M.OY.jGFh^`$:m:sNLb4qm";Us^>(2Np2gASWT)4.#i
%5VXeb?he$Y:O"K9,kGDn2/L&,04j)?`"4qJ*n.l=#n&@NU.*%^$/4kD?S42b2u?+I<Wl"Ycr8Ps;7d%_+_W4/lSg?qGE`o:YD>c0
%5Xd5]n[F![*gX`"-1I"WlAB&-=d$/fB$0a(>pNp(gZm7op+;?If3RLJ;[O(?6EoVDR:TT'\)6(6"Qp(@i-g+IMS%Ha<7nFkiY%2k
%7$lc5;kL-)F-o!7Xi*QVT6[r]Z#K^$6M2h;pTF1[(<PFV'$!'A.'&oUfIut5-dtOXXb$%%Am\T)*=i.q6(^=>Wr`sA@ABKYc4I59
%brT.*,>j-$U9QA4MO=LC='P*g15r9OW[\dMTL:(\5=>Crdf.J-P[)B.NGnY7/'AI,6N:GZeib^V5BeEKQeYdkRp]'W!c"/.)*t`3
%LJ?$^Q+GTE6.1g+?)#N(W_;b\aQ@H==ph@%g^U,e;mRpV[:O(UC"+F:#f`dk-,'-q'n?&Wbr>Y5l_sPP\YW&3F!e%g4lodg6rf$'
%9I6&W:LOi\";&5SnRbt.'KDu)>1_oR*oeiA1^o9Zc(%E$W!,CG]!/6."LqRVASAMp3&B&kIG9a)D+,K5RFJS[JIAm#4[A;e8\phA
%nY3l274aHn$YhAD#VRYV/_II[iU"_Vot)>$YA#U1hoe[9/D"q!iFaA@rO]9!K[Jm[N3O15H&Z"4C)"`qYF#&SZ[N.KE?4uJWrH5T
%H[Y#*g6S_-c`pdi'>WM;XdH9eGYIHl1,U.DWj+8:Wq<hs%tZ9opVOG*B=E^9b-^!N:emC6$%FTM#P./(n$#6W6WKfk7[UW'O6d0)
%MFHZYc]8[h9"r#aPEmAs)2b(e_jV0Hf=$M!?=%7GJ#o]:#7]nu^M9e=QsAhMaBWaf75P$<@1`ZW<@&Bk%6+@d*%?(]omC<+S<qbk
%3!>+MN;fif?hMT4LImmTFm1$<V.*rR3d'P/[#1hWLb5%%V,l"HgQp7S=LcZ-X#D1S=7Tiq$A_?FX$>96_P"i^*S#-jT#3t+YErH6
%cf=*SJi%Bk/DePTQ7_A<heHtYVLFL/'o(_SNOu4>f_fN4a;O3de.038SSo`6o>UHaG4&@=.&Q<bp8Xrq2<fnj)PqUR!Vt1];dW>L
%]0jH8AtI%"_+VjKi`8m(DWMT5'TFrlT=N68,oX7'bLIEjbi%iP3(p6':Pr&?%OZY0G$J6#ca,CUC?K83MbX)m%9-`kbehnWB(0>r
%hp!.a%PSA5F@aII/':t,lo?hUopU9gN4hF$U3/I,D?IlQ?Sp95(B)-GHRFl32V"f2M@taci\0Z/d0sHKcmECKR2RGK*B[eC9k%qD
%jH6Zh&!N/g+sFf`oC;mop;gfDXO>I4VHCXliuW1`ZUWQGWm\4`qe;%)?^XgWqqToW5#"`R?udGh-5K'EB".80mC7![\#:].OTZ*%
%Xnm8bJYk93#^<,<0nDp(aY/UU`>E7\G,>W4Y-C."31Esj3IB^DedPKVTu`t#of>3?%>tR.RJCuD]]uq$cU97)_+GbVdV<lr13h,<
%NMI:15AJ2VOVh"MH]fN3kWlM(CmK=nZ.,Nh,)Xjk<'Tl<@QB5t1l1A_X8Fdm'qE*,I/Oio*ikaY6.YCiC033%d6,K<+qmnDG/&Rj
%jE&aUjVZ$K4&lkrNi.0^PP3cii+d`2Dbe^G.#pqT4&,,5G>&)-aeZk*9Y3gp<r`P8SHNl]9hiZr6tI/(5ohbpXWsItg([]%jr#>u
%epLn,V8]!ITh@"&4\U0eR't:Xa?&II-_mP_i^Buk!aS^!7=$mB#-2HAe9LK.L]q:kq5VtPFjGj36Hgk.gT.%CRQ)NmV'']WApipl
%:oS9W`]Qlcfq)h'&*]S9\mV(kb4Mp3KD_$rQe(EfRI=iPgpps6ap])hfM\W\WTNT+JCCO[3+=,U;ah$hMrj'=c-bS-&i;e>Y+nXK
%V_mrbj[gb):,k[FqM8?;Fn*&nB@iC:C3]]3_u8cq1"C,bP&[sYDk?:%7r@FKGO+e7dBl(cMf)1B(0(jSE!:QskmDAu:cpcfGgImX
%762>#@P_c.?KUL)Ej(\5c[O_0)S#7m??Pn@&b4h4N[DkS!<@5^#.c$\I>eXS]6tjL,.`Q/PVAA?^J&P><6+""e_#h(E&[!*fQC4<
%(6RUpW*lE)?!'$Z/_*BEOC.Mk/(&@W8Ea<0*,1hc2CXCPplRo:225887NuYu*bK3,!a:-=LbZRmXi/@I2F<;=B=]H<i:JWcehg1#
%Ga6+Mb(giO)idp_ZT:-)`,1@E9i%Hs,(,r"@]>p"6KJX<m'iQu30L,gq9U:'qX*=0UE!Yg:AW;N("K[_)sckQ/0*A)'676tr_[CM
%PdUh",k'KDoL=q3aB1QsDb#M!P;erO/CcB%SfS%@.Ah-ok8MMLqjsDbbIgmg\l*><[5m=Hd(/LKGt7>KHT'oaV\h"4,k!tLP`C;F
%&j>&TO/^AAYqp-;CV1`_T(+;,l3'S>Z*nXV=,KOAdJ)XKpTTI%:<tH`1k(nZG_pKgW6tCZgYB2%bual6WoO)M<8-*Rcr[h&c)KNp
%kaB-DQ?Fg9.7Yj^Y!ZQV%7)3cb7rRLeqr$f0>q"X)@*BALUJDZGB!I6D2:0$oBIm"nLn973^lPBlcX,HIK$hpK_%CHokhHi()G<1
%>oW,ff-7(l`)EP7*TY*Z9RZ`MBof\"j,CMdf3P"4IH7$%js9liM?DU`86;\%`]OL7jQfcYl8*`\B9+OXQ@=ksC+cb4?-fL1]"R?_
%5:hrmd/;b4@]cj*ARF>[0Dk;m`CdFP0GK5cd^a-5kosYGJ33*&\\AjCgH2$f`(kZK<;W#GC.Z3B8]/e":@"Wk7uf2n40T*-K-C8h
%.A4>7M,Ds/]lM'DYa%E@8e[."q*p%f^6O<J;ZO((p`iMJ/GKD-CdO7kSIFf/&fb\Lf\\g5TKF1r$7lH[4`D;On@=R<$>iR;U<2JL
%7@>bko"FV`nUF$AmkkMKksiWa@6#60Y[o#;XbbG`?YI99MKS9q2,8ZM7a+C>-4$#B/kfG:s2bc[mndscTpNED<'fnoeS',Zlj'l.
%jS75F+J@<4m*!ue32J1](cLKI+u@u1adfSNdojR4c:]Nc'4jA:qV1H6E6r6l:eVglao\GAF>.];^),m/pirm;fBu_rS?n]X+<;EA
%EZ!CCDCSho7/gR\G3)UkMUT)/@L@-9)\Hd8eX,,P'+T<>;Cg%F)CJlsnDSE)9N"4j='MD$W]k.AMn/U0>^;BG4p&C%WI>t64BD,d
%SPl3>"0c@4`WBua\f%@FJ^X=I*!u\/*HY&:K*0?#<Kq-VILtKVINfKSC'T>.OJ,KIe^GE-nMgl#"??Jm<`NZ:auIQt&>#dh$bkl'
%59W/]/gdLJ;RKu[qKo#Q"hj7gB-JN-89ao]2AD"-$T!kS^*&;$g8u#p](h9]4u/Qq^JuXFfm.Jnn)ph"=bZ1?o9RH3_"+UFmp?(s
%r(*6cl>'1e[_!@cP]/5[Y(<ePWr^qbh"gl4U9;N!.2E`NK&9f=I_A4WFk('5Af1rTYY'ne:j:S97RRs?_6;aBU[Q>N>SH=nPY(YD
%MJFA']U^=s^'>GQ))"o2dUkAigD?Tk[lpc<['`%641g"]Fj!G!,$J)TFl*&?Ip/oP!*]a$?'>-=,3QWI0"\H@8eYc3pM6<LDRp;$
%+UD7do?\N?W)V#0;&`HN3eS#5U!d^o7Sn!Y7DV`19.!`*6X[_NeF$.8#?a_]\5O0:@Oe,^:SQG:8L:&gKkoud&6bb@<K\K]]@o8G
%[Q1(8DaZ]5Y5iDY._NY+%><RkSHql\-L<JZ=9nrEDRAr;*bo0k`jeuAB!SaE/c-R\?b<b'ec0iP.b,@4,^MVk]9d[+im`HpjO5r3
%@`mU3[@24A"gY(h$Kslgji"<cH-)`]q"@e'2f4Zkr$U_VhR*PS(boO1mbV4c#*(k.aSTVEY\]TH&1>?a.ss^KK>k;QcZ-"aM9>h&
%I-TP"pI"ar:A-.g.iQ5aXU)>14M?<.c0Ha8/NQk9/W'=gdKT'Wm?UM4HpI9NX,K_dGH:t$NomSa9t/UmldIf,pWLlhN8Ij>:>Ajp
%Zt(//g8@B=d;9UPC!Od7Mf;t-[tZY0(rHMpBJn(k:eF.AZ]2YoLe!=C=!g9I#RAh+>#nXUWQ=9WQ4qk7):^CY82B.(NU4miH>eD'
%IX^3q'VkH97pK@7Jl+30?eY"$SY_)b96,?>H>)[Z4k)^o[B[B]CU<`>C98:JA=]o-l=Gm&HuU1^`m-:$47f6,f<k:)<Ug@cHT(C3
%R-$1i,X#(1kWFqQOm$X,&f;<RXf,ukBHjOe3uB63.%[.d"NpLUX$pU(G/&s2-sN&CV)msYO\?\ECAQqLZ5?P5mrHj?8X**;hC1KO
%dR?<kD/uaWAueA<?^Jg4p3#JV>62`1<J0r:U939/lGrW<+b11mO,VlGBI\Y3_MH0B8$YqoWE(p#")pOf[JheRim=`ZIsgU_N\#*[
%2GM5Uj17isW2bt##fOuUkL>]SdpO!Hnp"bcE6,tLTN^E(XqJT$#/P1+!'i\L*pDFJ@_<,,T@K"qbXaB2rQ[jpaPqW)#HiF=:@T@k
%'B4ISVjG[(i>opqeCN;!B%5<JI.:UGJpccI_ZV/[+]D0VCM2"BnZ<&S&P+?6XffH?mbMn7KJd_DLL-N'CR;S=of%gZ.ECfh=TL,)
%!>J-\hD%$pQo1/O=jJ^=j`K6[c_=Zq0A1>`,kH^4h=itF<khkTWjVL[YOU7'<_[mSHJ,AAhK*Wg[XOl&XC#>PdJ'@#=>=B>eVPM#
%R\UMP39[6TBIP-pm?qdeD"P)`QESS%O_G2$P/Qj>8h&LYE5oQ""%NCC+c\:r\(3m]6!)H:]!n5p0gQC\%tp"CWUR+"BhhFPo3bb$
%hh9LeS=a)pqt8/mj2$oWX0j#Hk_tZlXLeUQ:!a4f:<PqCjUrV:+OgZ=fCQ,^a[igYnt"UAaN$c"eN5ttmR;)lH,aB^(+ejRTO!L]
%GQS6%<"O%$n4NX]SFR=74sir<RrG$L>3`iK,R_IH!O_Z%/Zq^$XbtO[-g*MiEK\b2XE.2X87RK54LXF%o!F)KHS5DTggf2'#j1rE
%[Ag<9<>*8pVgLSUURsnD5>H$<!)PDuijsKc#3`]dG[@l!dS0-a(sB28A"CQtq:W-u6Sj4ejW>%<.adY2[Z(_[39WgMd?$_.=7hSm
%E1PLHr8;RaEk,n!&#_Zu@,,Er9!XdXQ5^HIWrt/tRs4[BO=`oTeiZd)EsNs8d1>Y5<Wsf@3.^B0EQSnkJb"ujWoh*IPf8<qe4+s^
%@_"o4k+K!A)UAT=YllA*5?4lH,QstqMMW=+75dU14A>H<7"eDgXJqa1D4N[\1LMs1eE^U%82TF9kgIp\KY_/8ae?ghe+:n_rHr%<
%TT>N$F'$NpO6mQsEh02`BrQ`&]:'Fc%nnc',7b7`WeWceA"k)_"U6,+8"r\l)K^5*ih^;naDr;4,:M)cN!frG`.W5hZc7O(P!a.4
%PF0'=8Q=k2kuPb@j20H:7Yp\Nr$^FC`(A@;dUn>?HTntJR&T_^^_%,?Nci/]0.cjYcA,`ua\N$omD,QApZJ_<@_e=Mpic_3pCeSb
%U;]Y=h\"pf/i.fU:KG^Si&7[C#HB#nR=j/R!.4-'J(6W1AcOA)]g\o]6qsdKR&LWm]'PY`OQkrATE!T'NB$gb1aKPfff&Q'IW1Rm
%.cH*C9^nh!E5Z7Da_a'`\LmL^O(M?+cs`@UE(BV#'FAdJN:LJ6VH/b)S^pd9];J8Xo]PjM&_"s'@q$]oC!t5s@\sC.r'1R^?`7\r
%bRoG!\42Q.B2,)Ak(JA5W#qqPk3)25_mK5IFn:U`g(`rPE,X3np[O)L9^t//>JZ(AP0,2Z!Z_o+$5SKX6G!s?0XNP,Hj-RMfEfF!
%@1'o";oLm!7T[;;L6m'9oTJ!IhiZ.RXQA6lP)J\8Mf_W9em8lH=2X=`%nLVjCQ.&]@Zr,]esg2E^6qe$^*HDs`33!eJ'L\%[%WXl
%BrI'ZlptLNO`$A-i:[q^,jI<tDSLOhg0.[uc2_,Df5OYq7Lsus#fXNfo^+%*R:PPh-I#^!&u\]r@*P-8o*>hlArpPokh=ZTeD'G=
%<OVYDpE#E:pSJKCA%e'1AKP,O-b&$I(T&7Wca`i)VW*Iu6/qT!$[KZjJ;4[2=J0I?A@b*!.A*t8]Y(?a1g#Dj``""Bg:D"&!]8Yj
%XO\#4Or'%67p3htp8)*XH/:n=oUFX:RlH(',`D`WB-VF6/cC[Ks7e`Ah2'+,rWW;+cg/,k5lq2qrUd9ekMEh#6/7KQK"UuIKqo^(
%C%SSAgiGXNY:HjOA,hiN@:/Z15g3e(p@%UqIJ7YW#V!OVi"RAY073KJ,%#G1$A.2krl&E@mplBpa&Y1u9<;_!(]?uH_d@cbn!h>s
%>MtJ]%&-<OP;<eX1#dqm.<W5p>3@q\[8MBT+[%dRQA;CE&Vdd,2/l_g%s8@Sap.6*C]_I6>&FU!\L[h[6?7$1<$h@hM'P[OnN^Hj
%q8#,7NWU-$lCXjcC%9V;N>W]'0<5tD2)lBZG.J#BlZFH&`@TD7<&/]-#cu/&K?#*"4-6@;-$**G?2lf^8(pY+2*r1aDpZ9tl_XZ9
%TBrec$-0OZa\X1hM`5=;Bs5>NFKNU8j9GdP9u]3#SA4HBmr<j?CGPPS0hIaVTOikX`/e/aM:@:Tc)dX<#_+U;9#sUVrCn0Rd4]R#
%63fm3O+%r_/SK!^1mnbPFWIrB]--crGu;"2VtA.d8>l4GQc38%RZQ(.U)/DOYPEm\hAE9O,E<KtTi@293#:,]Rb3Z\Q40G)O#U1q
%KhA.$dKWIc[Di047!E(+cqVZf+/64oKMCn\lU.F;D:'N5%Ycn!7Dd%_GH%)K,U9LDICZ\3K:fGKF!1/`RZ#WH,7e0^LY']N$9_\(
%0TXIO<`<jJ1@iW#(uicXPD!q5Q?k=ereA;q"&)XUik>.Mk]/n.:?J;ji:HXSdaQ"$B-?X7s0I89-j_m`D7W8)=J=.Y#51ur[(.Q2
%LD\&5N'kL,pk<cc5qros,:c+!\-_-6lG;_s,`Q5<^%=E"3>7$;*:>D\&m\QF9)\Q)*W7?V#2cbE]m`8U4kOeUBbTYgS*.QB4OQf5
%n8C/hi5K)c>gYarZ,?g6:Aa\`$4=JSr1U<$i6Qf6O)Oc=%hX>ME4G_U71lZX^4VF2ip%lSVS:s),'8r2'4XDMN8.^2`LO,fPYbr6
%//a,H:mt"qJJ@ge-B+)jA?TJhmY/X>7<X'$8=/11;"*g_ee_qpU5J=)Rq&>XNZ9b[dMIIf=DlRn0)^3@nC--Qr!j`;\W0V]7lSp.
%i+HJebIti<=`\-JNZa0Y$9+\'NPX)?-\S]Gc>a]qm&"1W0MR4?CjA7<bP$D%1MMbjAMan'+n[-U)f\.n9r<=@^t(/*#@FW39]7Hf
%F2X;&."Crm9e*rBLmH/7hgW^l"HS#E&,nlajP)lpqX=8oK(0%c+;(Tr'thfm5uPQ8%1J^12(cZHoWr&:!PYrm;Ulp!<P-lDbOW;(
%H1qFO!Bi/3m&G8np^N,Ce'&3W*)ur0h=JAF7C`FROq+MG+<hT9e>5Ds`;(=M/9KKo*F<;*D>_ZQ[aEoL[19Bh.VDj_rETrD%e6&g
%gsFZY>Yhg<,*C*%K^sZV:hW_VC/qr"Ke%@Y,n=oHfTZ_cSVT=+M7`uH["@dA7!f_5^*2Ji0tgNtGg^_6Z+A-dIHqAA;.>jnQ<oKI
%G>aNoM->nJPa?I://'!5k7^rk7?n$GPEO8$mJ&gkd=-?_s!67f>uOqF5Luk!6lj"q30iA^7P*[FKAmg\(JF)5Ou=UJC.sgkJ0abl
%V38KP>J`bX1/4(/)*YL8U:P=KSaiA7BD][kCaV#\mJ0kKoH#3\?cQ[#@/Qh/.(@.XD*PaNrLGi4L`lu_q_k!2AV:=VT-H[K`]M6C
%^QKm=SptY;i=6Ne""hl"W^W@c'_Zt,Jp2le%&:\,8;4'4!BmC?78r^.`\4s`UI/AsI+PAj[Ds")9G+=9*b3f.f)-_G$@_H,6/=-t
%X#Lq5.lE#q?Fm3G^OT":]LG=;VHZn7k>,CfZ5b)gnX@9D=rP="/_)Z2K1`ith"c;49`[:P/>nhie)q]['J`)^T&iKI3I2?7XMnYB
%5hSi?S,nVsP_A(dpog<,XR!5)_rie>6WtS6o=>Mu^70e_$^%,l:1+s_Oo8H?7LSu"Jpe2Es2up#;KrEk)*oiterPDYFCn`FC+rYO
%+%p5UXO)WpUG"bpfBp+2MgV@E<1jRiJ9a1sn*Z1sYTV?tKkbQE+d'WN`9J$eaL4P5/m`@QH9/C_'d$G'<KXN2BoBI&o/"`CKG^.?
%LFFus:R.nXI![co_2qP>j[<Ct"s2a1#/H?'_.ZCrnkqMp/;b>dpWFhtFbujhPJCj\\1_'1?u"4\O$cNH8>se8'5/jcb]*nXJa7*1
%!K5A3&"+=!'om:'jWGL*aAo$l(!Nuu<*,L2(Z/h^D,qr`3a#j$QN.0]>I"M<jg.OhD\O#="F$U@i^#.h*eE^(QLf__rH\aRF]a?L
%ZtYS?:CE)MrCu`C!*\S4@k#p9A"KiEDK&4XXQg[O<aR0_$%BF`pmN.gjfEV$ZN/T6R]B)MCY2O"G::@OYS4DdA+JKj`_XLXW8B.3
%e#]56eOCd"NmT'o>>8Z1?c->hb7NMX68om&Vq!+5`UU<$ddE1m%_`pB(SX0]V&R@)dCEHk]MR1ZT1TAjij6d*I0:<DD4V];/k*^J
%@%9<g=VF?5**@)UXM#)'dP&mBs4Y8Kq''=fLPAZ,i5q.!][_nE.A0])1i[b;GcGYj(3&K?:$pL^]gm1#d4?d00R,g.CuUdEn_or>
%?d\J*cUi*\P8<53YtI)+4rShi$jJDa%sP*.eR0$h,F(q\U_)<j29->UOS.2"d)-\*&gUbX.oI2+=&;bL8*,F2b@okt&JL94,nQEU
%m4J^44=Dr;<L,7$48Spd!G_]uY7[AfX<@o#]0;?tL)Q[_*^!(I-aX.jamuc][)<#7ckSf;IamS\SQ@[e.tb-^K3!.(qE3eoYdL36
%)0HoH3*R"E<;gJM0>4a+JeR19MQr_%ES''BniE'f?'['#Fnb4fmf3%_erO_&2S(/CL/*5*7Ytedl%8gHH"eu9`jr?L1Eu*RMd/O`
%Rc7G0#Eg+<65hCkL6<Ym,sMltct!EC&PUQ"o;I\?J^Iq&k.QW%W#:j,+&`)W1PVE"-f`uXXE',_#M4HjM!&k]CLT\Y<aG'&-\nFj
%):9\XaflZINdM=^rBh<orB.2di,5/CN&Kbrgph9lqnkKpY$ae#m@XNt(di>Un3l$bdB=IYa^p$1:E@$`D4X7GFA-a/I.fV6GBC]V
%Ub7TL`eL*^]nXkignP<4N,FmC0Y5@R@`p(n-Y#d)4**LLgP/@*!@AOMWKXG6`p0$V@YQa,_XAp8ABUbdWEi;Rk]A9D!a4Smd&#P`
%1Yl_=a+l:4%duA_3o!=3o:>#lgYdQWNdIm)%7/O4bjO(B*>uit@Yk+[Alf^1kU6L%qi(_7W?E74<iFZ>b&$dV6G*p@:r4tl!5]nb
%0)Osb*5K@P0HW>k]mbmss1UTKoACObK*9uR,4S^DCb1@gXtd1]=*ji*)Y,7A@U-kfV<Brpc(\bA1!7l[4p9'QiV?->W*1f-r,oha
%YRr)!cpm4@Fo1WE8h>d>A\7DGCna=t2k"p\qfB1;ctqn.[N:FOC]L>[J"=A0:8d=M:4B01m4l_oO]hNO^dJlHjks?JgQ`Bke'1.f
%cJ0dpQQe&b"Qi8Z$9&1-J.a)4-Eb1Ubfm(W$-.<oY/,'i"3p#1ke)oa3KUAh/c<1)rlhHh:L]q)T*<>75:P0[,ZTR\dcj^HqiB'^
%IWDBo=9"R"Ba[hl:`J/O6tCNn7:DID;oZ%'UJ3$^l"MgpN/(,Q;Y)HZGBJ40q,:*63)WBAD&HZ/qbLtd2qdAts6"lVpA'nj.Q\Q,
%<96JbLfdqN=PibqS$.7$?sMW"W`IQ^9U^LZN3('U`M>lJ71l)V7<6kD-.d*B[s/::>nc&C]L:hEQ+A?<Mm[`///1bAodo=`$!$c2
%I:H+_Jhk-Dr6']$a-LGpXraJ#&f$W>#V8WR?n*Rg+u^_(nKg'JF(%&tTW'"9E27E</1i\ALra^@HGiWH&gJ*XA@-#!lhMB[?'Qsh
%MN+2c[6FXW;lnB@UMFieB-^XFgb2n-AS:p(4#i62RkLBdo"g,e.$!p-J:re!XQZRj=:oO5E<Cgtd>X4$mCp"+rZX]rrGWj5CGh`C
%89>8RJUdXL]DS4EXUf);0H_9&S5X/cg\Oa'EsI`.!us=WjeaRpAuPZ1e;p/;Gkkkf]#B=^QKWF4<hA%T>QUS"is=F;^NAD(CYG``
%5#80ciHQW<Y*6)L"8\U&F_>#AS00\lI/PXH93;%I=&k_fAtZWX,RN4me[Q1";b\+%fjdhZ#l`h9iJYnO1eOAn8g/:V<*ZT+M1-C=
%c,:2M/ZQ!500hN%Q!`#P$c<N51b`jf74]CP-en50W1=&AZts,q4dEM4Db,0B%@oE;+Q=uRgm-fH3l"g\+1u9_J%o]FYCHO,`IriV
%^LTU.e<m:-JFG[6[B+a*qWZG(,N=l/nu^)8!g"l>)5Ip!(Q-^HIL!+nBVbdq^Eab]Fi'tW[Ufqeb>4@UqerC^^$DTDGcWMb^Kg*l
%GHB&0G]<1,iFU5dZ6\D*K@Vnkn79d#f=T_AI`[0CUaVI/YX82$WO[[mWCR29b*pmU-t7$'eCpAMfP_\pHRG7;Y<Dd#F`79:NrfTs
%:.>LL<J7Gspg92Gc:-6k/a+)Q*HHIl9[KB6GqL9BK^5uFV[6t:/2mU1E5KiD.`ur&*G"[=jbfq;TII3WcJEKH]Ef,6Tp/a%bQB?X
%>QSC`=h`5>I/WMi>$[`m/3bEMq(n-Sn"m44h)%XN>L^o#oX`inGsg-$,$dW(]s2*`AmSt0LKgRsOMQC,=CCEo5UBX'VL,?9)F\Bo
%47CX*lFd-#h=Rj!a.[,QYrb<o9WKf0"8**u2@]qLBbi-&K=gImPD$nEYrOj8KK3k.8T@=HC007E%98/W([,\a\r/B]i'X\h3<#@3
%<JRNTOI/V\"I[C"XX.R$>]M.e1@!,S3jcO8mI\%JMN!e:Fu>+M^`1o?f\<ETQBHqZDgo,l#b$RYQ[k9+ApUlQVN1K.m_VF4i>5%7
%1Q%pA\ib?L*>(eP@_^<pha?Z+%io6M/GT+^W"P;rp+UN!6]0A]I!f'?c4`<e;c!_+T@\n1j@#uF`abRd-bSi<04okTp&Y?uBkFWl
%?'&Y"U1@MXpU_\jL#p%nG4AX\lmM8"+!kdiQ16h^dgRTm'f4JJ::.KZkC9fD*!TH.E1,AcG!$Y<:\Y'D\eT6/-F[k(ij(I>p2eJY
%M?Ld,-!C+EbrW$%fnW38#<&)Kr2QYR0E&)hl@_Xu[Hf)E'I+NJjsC,)#o8@d84SHt`e(%6&CT(nfj+9uV;?2_]$9Tj=EI6i$MM"o
%2:*$6JTeI2"YO,#dl-J]o&E/UhZUA1:G5)IfkUb"k:Y.Rg.$P]WDW/W%ib=%rYtk'5"+4!2`+VtnfbPL;`E6PQtS/)\NTPA6=[@I
%:PH$TPY.OMN>7If)(>72B?bQIDp;D@aKM%/<ttM_72#N_JJ9;6f2darjJ$Eh1dt.Lcah0k)P05Ye@:k&h2(^D7<$40^$1J?'E#AK
%%Smo+CXft12`:m]+/`YZP?+Hu(mmKLde@jFq.EOV(24Z":G6EXTdY.P#hn3,mPC4_C=i!LM6a,aZ-F[XW!9X0\>!+QK)Wd9I#hGq
%[o@g4g[W5qo5<hd]"60-Jn9RT_6:9s1o4X0\'LJ%bh<iq'BT(WJ(?#i0pNY'RWV'*eOW*.R(k5m+`X6d1S`".OLfW4gdH*,lIGZp
%b8S#mG`\4:k,4,O9IZB$7Y6-MjhL*c[d3=0mV;b<2VE"rf%7/")PfM_C\";^'KhdcgST)6dJ#PDJuRP,!ELIqF,b!<\#k"/QLHNp
%%0N+hKBj*0?YK1`\:rg)fVoDrKnq+[)I)9F;P$m;MO&+phCKpm%GU2e=M7B#EcJ4.fkW0b%l4T4Yb,0Vj(XD&AUV'XPUO";d]8Kt
%ck@u:W!.@KY`/(^7=#80MR>K;X/4l?gr!YA9M,P7\LieoHC1KT]_*gIph-9'3_b"Q^hC,C@C`H;s$g`IeWAj[j''&5)3#aYD!$dn
%":oi@'IqY&I[dg@4L?l6a7V3_7r<`jecBXi8>g=9<_:X8MA8<!Fb`qDT&+S9GQ$p$1t^YBQe*gCVZO`AO;_GMN*+*.Lsre+R9&)#
%ak8!aq;PU_X^Q&dRUhjWoems\KdeuUP5&bq#b\X:2cM_>qQm;8N0$j#*.]etAg\oj]'AOAM<U=+rSi00m33T5W6R)&DF77T<L+4j
%UE,BA[LF+NAO<J7>9!6V(k[t7C7-?6CY]C6Vm0R;kskhXoF\.Cb=McrCKQ4Q.',2#e!#q2<(hq`;Cii\4Oc#kHGq'>m#?BaE8E:l
%LehKKCE5PZ&o!_n-6+jM.n7B:A8d@oC*]I8Q@o0E648@Doc@0dfOZlP&89:]$oL$9J%#%(<p#hAC_IeUbY^"SDk74SB-,(7Z:u)X
%CN,U,1Q#ptC0igMbBEjRY%&'O":HN^7TX!1QECIf/1'*fr7eYHE62ou,o1()h@e%@BFSI>2kSeJ?\iFXFgIMc7`FsmOi:@oJr\/c
%F^Q%\.?^*dgqQ9$@!WFp+/N(N=ukFCZJ?Kr]_6]E27gF%r<VEj;c@sq8[,<[acFY'K@iipKCLk+*%e2ofNKqA`k[A<HJ,)9hJ!u5
%St@ZNWirke]cj.%8&nMrY-R-@B_m`8P!i>4O/#$6f9Q.+6>fpA,I57/(.\aK\%Tb8<1r:LChlL"<Gef?%4:E&WnGdi__d*Wc^<:/
%)5L_>FI?cU&%Y1-#4_c"#Y$;0rGB)+rC1LVh6.aWL@m+L78t[]ku#L%Q?prMIh$UpMA;!k)^p"QRp!kd;+3ajfsa:9R6^>&[%>Ur
%SpH/P%,N@[fiMAeqS0/">-d&r3kD0/A84hQnB>lJ^8_NBXD0l9=[WLT7AotEaX7bbb"q2b2QG<c,l.5gf#kY1(#F..atd(g#:qJS
%j3bgK<EaJj`BC!L.X%C1AAa;6('ga"a&V/>)D%Li'bRP_D#gj)k:he5b:Sq612H:MWj,m<lJL'[IDtb/:U\7dREEH++,gV7F#D/%
%l,K0;2"rp!T:[)NZ.C5>^23]t<b"J#WZhG,+`!IF-W^Zg=cJg:$j'I2m*XCB1pP=`F+q`*%[4Z9,O`#"AQFo,o88BepXrT6<FAh[
%)(&Dc?trNpkpc^a1!O0@*7hQZFgJRP8++9F>O,"aro@2%>L-LpkWls@6m)/hj$BAEp`5W`j)7+AQKkj]O(*205V9tO]V%"r[l0T2
%\rD#=kL=c;&]JhYR[3im#=ji"I)7I)+3p6B#BiZlJC3tS=RGX:BU>'",(C=f*7YaU#m_K,qNa0'dNKSPOs#mcR*8t6PEROqF`GYL
%=jJh!0(HW++MH'84s>'+!@*h-5Vt?5Ck`1%`e0jH+jo1R[&Y_I3D/tQJm`G[F6:>Jg4rStHM;=uLV@i,q2i\E#6`=3)"_ck<Fu'X
%BASeF`cmE9b)qZo9L%75dO=t:rl\'1pOUAg[5W22$/<dR`l">2Y[`mm@1MJtehpWN8;XJ1a?HP?]2<(PcXAmYl\k!G98D2ll?s+t
%_W#pf+"4X+7jA`B'^SYS[hH`mr0Pd@BS@hJD2/(Lme\qY_6qeG?QtRrHi6G#i4#(?h43-5e#+4Q;Uc9),Z5VVrNGOK<2?;VegApc
%.=k/q4L;&%U'2E[T+NmHTs\?pM/+hH83eEZS>e!6%b`2NX[GFNaD^%Q`?B$hlF"4IF3O",@SGZmLqb/iql\(H3kRqF.hgp!dbMRU
%$Uj7$2$aDX?99%6e1D^G6e`.o4\8Au>7EDaG#E'FJl^&C]dtWbj>uICmdhA^rLHEPoI0`9U@X$4.*)]J0b,?j8]aL[>1#_R+:<gU
%c\<We4(2:1HWA!-0'=#*K[o.m5gO_*(H5YVUg/Eq6*V\VqQI[hG"&f0)B?i$da'pM&Lg8=^@A)XMkkB<r#tahO+JalCGZ]5;T<)0
%MD:::i0OEK,gLIu=tpLPo^,SS1(FM$Xf)sMb6ggp,5UINOW;Ka.m1U(U7>:;F:+bq:]J/$?GGKL=GOP)_@TRCDC2D^Bsgn"RAI7t
%mNSPDjbKioV&)$>VZC.qina\eZ2ccbIih_NK"A8)eH"o.>6,MMlSHKq0S[t!Q\3h\4=T\Y&_L1En0JOiT2'Q)j[%U85`>8HD+]o>
%Y*n@Q4&o6Vo@4aeOm;uJE]]Zq6su-8k04&`[NQpH!,^R=#@N:;1%Sh=fe@bd>qNSkTaNt?C+o.WF1>ER<Ps9PdcDPl:@G4W90jGc
%+iqeh+7/SshW)$O%^"/`9QdiD:kXHMn*#T?V"XFhER@tt=q%BPKDcEX?':PAAr)d]D2P<ma!q1&!pe^jM-`q0e)%sDBsb9sQ\@d=
%lR1i^$:7PkQrID)A]e55.CPHsOKm(P`na=Q?j[j$"\Km7XApAT+").NDsS*JRNQH!@O[,sePJohP3KUu"Hk:->I+@5ZnXO"R1sRb
%DYCR<oAM!fC5EY\=J2LK/N9a$iO52S2-qS]0kZC253#j'`VX#T%_LX\CRS0X#pGOJ\hK*n8s17^'NqGaNchA?6cdV*Y)j5W]pKbU
%3i>SLG%dhq</41PH5sL4E:=[1'"Q:D;r0K&[[0;l#ZG$/?qd7oLC&OP:Mtg4BCoCXNj[&_P;B>%mbOBfY0_XF=Kbp$_`Nl3b?f$o
%p^E%O*L+*CbpH5K[O@GW11df,bVL!<qSEj25+!grbpj#o7Kc>$oOcJ_#_^kc2*7I;&R2N+m`Esa/G<N`AckS)D:)!lgXj,lO$;<5
%M&kOXF&Ri6-n8/g\rY)*UXt-a,l6-Jj8QXRh^WI&h([`"X,jH<Q`s<XcB?m;4dHgjDl\%j&OYXp6@LZrr<bL;$jm;ugSIf%obq2j
%4:0&kl^6fPOI?9K1et_FTeGe=bab,?K"KUO>&+\d87tfOmH$dM.#EXlhGan]DX[*G,a3>D#idX>Pl^IY<V:Jb)7T>h\.PMfTbcSE
%pGlDmQb0YE*la$"s$K_uC"&-HGS`ka3!Af&^4t0?`+,&])W)Ka]EU%7==A$HU3Er2WI(+gM*qfZF*-6$X"7kY'O@V^WN2chC4><0
%)7uIM%LSWZ>\*o8<Wn`P9'AdCK]dsA#>qaKI^DVErJ^6WhQQ-1+K+`>a9L>B.r$DqXHM&q>03:X>WA&5FUhd0bEdJ-Ud&@pm9K+f
%I[;kDbeJ4'ASUo?1%AtFZMSgTR-d^p8B";(&[[K/'pY.krl9OO(Y'3V#=C]k8EJ)s(*ia%,k\=&cj]VVP(Jls4NK)Z#s`[$+beb4
%?tS/%Yi3Xiq%d&*LjUkA>sK`G_AL,!,e.]m]"f)e=6sZRK$Umn'#os\-Hd*;nu=uY0P2_$jqSRYnNc8ge23,hG[P*^p80CP-\\Mq
%I+9OHqX3Ak212QaWFuBlWa`'PW8CXD8pCT<G#59`hFG9$WH(2?@#K-93XR#<G[m4BF-!;s=q<2QMkqJ`(=,3a^!Xct[!%CorLqhD
%)5`Fog#%>GQi&(p%iE2N>XVru:N1L0SPbujS(T4ff4$T_O\q?`mOb:T'"QE+fW-jtZ]-=*d:!@j^.^\E`=<A'VoUaXa8&mpgo+A-
%_:_LQCS-Fu#Q<m0_2F=ufjfMH;#D^U>MK;/OeFs?3E<G_[X^QNg&&8<&.r#ZE@q`n<t/n4!2\Xd`8V&O.f>YT;6.G-N[g$:..^J?
%Q45DVEL5X)B4Y#)IVKo'l[%HuYTDD52$rgR&KaJVZ!7Y=FBQ_]7bR%l:]=Z#FcEbW1cG,(s)uU)AK`RZ&-o&kj.-.Uq'W-,e<+Mq
%[-Z)c$-$JEA7I\5JZ)B.pm_;((uoXbW^kpG]q""iX(V+N3W)iWo$V!I[4]$nd?_a`2c6UPDg-+4+_$1R07m&YbMF1J7EA:=A>'dE
%NqWcW.%\Cqa57eARM6A(T&49I;nl<eX5g>DBs48aEJEf[^(%@!M;;@4hY/$Y;nP;P^G<jQ5hAip\TYFA3f;PG^JhH4Ke,Mp]7ept
%#8DK=-UBG)Qc!Z.]f!8h'qe=Ifb##uGV^[G2[,ua5ul7G,[f<B!pidur,?X'U:ekf.b/aUB"I$;0nB8r2[o?i>b.r:ipmQlOA#Xj
%3Gd-GOOh<d\@MmQ&B"H$'WoX4b^P?7)Sr-^\aR-/.6`r<$sKGprD?>#ajp?XMV,t\CCZJfL"Y'P9X=A:$1QC7pU)"#@BT42Qhcmg
%SoX4gr7t`Y>p''[DP>XjhIYG;,)\MDf*HKB]0;`-%!TeG\a+#hQc(K>-0LVE[sDr6&,"Xq=@NH&!io+u0^[A(48b?I>WT</Jtmln
%rGh%cp89itqX=0hT0L+tGK/7LUGKW_Ab/#2,`;#IpBI"E^Y?EeS0F$sqG,9^nJ*<[`i4?s<Wbs<r"9/5L]]V6QW'\9o>CtK>qB]O
%Dftl5H65g^Z\dPtr116(]Pb'j>`A\[]G1RQi]P!^0Eh_n](qlGYNPSV]hD3i!#)r"CRq<5di"Q+U?hfS@'*Zt^b?<\ZXioG6,#Lh
%O?'8>mT\fMfB0n52WXDg+^HaZhZ7SoMtEt\]#H&;%%g,DS[Plm@#KfW_K^kbrM^W1Z'%\WU+0V:GZ_@j'(c3'lcfR)FUjUu_)eJG
%F;aekZ2''Y,T?XY[i4TD>ouhp<s/C4*rSV#4*Y]SJC%p5U#RdC@4KOu,WD4f86X/U<f<o6r(3J.qWQ1ooHO;R@?_ZA=sT9I`ZMio
%.V1q*0oU(%7l*.H_-D]@<&*0VjI8Z=O7smloD'?or#Hr7+)g6O/`M'I8RH$J<<k0*Zj7c5#78s*QAB^0B'U_>Y`*JiH0p%^X)W$e
%4>gTo!_^tIpuu^cqU8ebl@66Fh_Uqo:Lhu%Wb<?hUc<05,i03m]K.6H4CA/%kd&t2PH"b#M'.JJ8Pr3p[P\i&dT/NA9:*%^0i&On
%k2JU@KXOhB?7esniE@dpDKOGS;E6m2$/0,@:'4-6+!(G\%L/(>(_PtLn.\Y\1+0@-X&$LMF`s.4ePMudH.HquXShSDILFa5W>;(j
%lrQu##C->AV/-"ABu]W*q>@V9n=Bpj1fOni[<0e-J1d\@<Biqk8"<kjJ>&QY`At[317n\^S!kSJ,1Xf]1.EHjm<&$nP`0`qmfqu1
%c43!;>O$/cJYTKVD;"i#pbIF.AcW1JO-?,0+'_1$Qp%*+F?3>DZDhU[IB>5%\j"4I@6U>LZiE;;kq;80PG&SA:OR3D42H\JK&ruF
%Cn6o0psC6AG3A5i9/jrYX,O21\W&()dO)[?rCkpiZVuJN>iq&Iq,0:;a*,a.eZ$ik4TZu)o?ARAcREF]&io+qje1Uomu`&t+C0*E
%.u&S-cUDDpi!!2s.sNY&N>C?ti$"EqLG2cgi*:;%E^/B9gug&u]PE;pM8\mJb;apWUa7iq$EB[NS*!]YIWQYdXNHA4kU!sc\B:f^
%7R#*S+]tnP\P]EqOf(dqYY)4O@n'AT>'pNi9Kk`JrUG8222h>YJPaW"O>i7dffg1W9d9I>&WbS<JAs3dB:/r:VTLlYLf)Z59CM&4
%&es.o$g)\*A@DsYM.=<WJFV+6D+%%-9ltVgXJgGQ;$!iV!,48!`"QS4O:_9.dS?*$8EgSM[ZMo_mJEn&5.mYY*'8mm-@PC6`]hFq
%ED%iFL:puEjITlW_GWkqF=Nk_?otOq#t./HOm$+_Wpd.k&6#e,EGi-7\[F@<j]fIFM5UI=`DR2#j)Agt_Q>>IU;^#.=4e+LlmV@d
%@l/%iF.?[e7Z(;T^G]<!RRZa:KRghH;*(4KP06s1WooDCUd;el81jPlNR3\$Nu\cJdH:9-Xad(1"@f[KD6iu;O^Ih$c^<9igkk;o
%NoXn;`lY!s\0]Au'KHHUN*p%Mqb@K-TB\VZnu'0@N%1O:=LT6JP6,a6PN$@YNSWS`jJlZM,jA^X86UgP'.mG5QbJO3N1j@F%[qq2
%RjphiT5AC%P"9']@(MVO^/FQeXg:2ML0p\[HfnmKm(2e(bDTF!k^K7kO$BQ7m8qt]TDQG17])2:3`RZHZ'<=OjC2;AcnP/.Q5JkO
%/-JMMmne4GME%G[U=*ccE$hI-;gQ_&J=N-c-"Wn#I&XV=ge+8JBU(F#0-Xm!8N6(l77BH0ZYeQ<f<jPW'"e,<aQl@$G^n=HYO`Bm
%kBUqP/@iL#]P,/HdmlVB371,SHc?C'e1-O5J-\/B.m20M:E@=#^sRV[<u'u/Mck!\:bqF7&GI;)n[j,jf>B*EDJ_u.1mUc(df62>
%8a4M2/lOb-Rkm@8GKH6od+!1bJESe[IKqb)X!.X[WN4,6/RQ#D<N`!1*8@dRhQsTfiLApE``MQuGJm#.ZU/]^/cd_&bK)%JKBn/H
%d9>$u.PXSf/*<b`bpX><e*BlO#m??s<"p!]IY63;_`QYjMU80f)_8rh:`c[q;g&3#ID4hc'>13pBfi=<?dp1:gU7ZQ739mGrV4`4
%gM6HeL*anY#\5BUP>rC?-CW>7MAmG4>NjiTc`S$HgGprO>=>nq3ln,,84#;i<,DXaC#B<;30@YAAZ_6qd)9l"i=G,?s76d^d/Q7-
%>(]D,B+r?AEJfY"qP+YSAHW5ZjZq.Aa.*M2B#NPLq>U9Uq(WWq]cM7pg9H$&'Ol;0*+L=%E,T<6et_L*-QfJ\@e[e.=+BgqT:U2(
%*aU8l\,H+Q*T31>]0:_uA:]4g4FDX,DPKmNm.5;^Y?10*(4Uh>Dfq#7H_*Gpc[%E2IXcZW.)4I6[/8tBI,h-nM-P>Ar82ucC/tj6
%JK'*]3`&S*bqTjuD=*u(@1[pm:t"aKs+?H/!&rbq,+m&-q#$&jiYh,+hehF2ZY"Q/e:ZlY(E\V!`U67P0E:/R+3)RClW!oT=2u<8
%c4<C=o_4]o(OE;J1dHM'V[CrEq,&[pY?iU6OC,O!p6*a5qr,`rW;V\[GVG^*],u11r0qX&m^W)10a#>k%0u;I[Z9-XGqcCDTBW"a
%]3\@"V?'j=fcm_0&QXdi.ZcbNU"'5_Up&hm7l[A[>'u'G`Z>.hT?D[!a,,(X;r2mS;>RM"T!^`UJ/F-?a0Y`u)oH1:(:1spIZVt;
%ngQQBb_&WYTM[qa*EoumU+1,:0fV*Hic,UZD"FoG?8pf7nCc[j_G+.,UZAWfST'SKd5Ypg/'%dl?]pWInlDh0,1T9FU*(maORD]$
%_IFK<;fc:g8LKV'',$J.NR*q";YJ`W*i]j($GDam-l$iQ9U'q?9%P4[o;Uj3,`=@:nrgDuZ:!AHajkRKOP1V%d9m.qOoTA"!XZB)
%.!>AX]Z"`Ukehd30*J881l:7qS:#cd8@tKR1iY5.7"+iTDW4_\nXf^_3htr5oM]he*bY*t8q^[gi-@_V.\T3?oMbiZP$,3GeH)CJ
%70Ps-Pt3PVe*W#GFM&@*GC9OIUVf"S,*U_uMai93W@9I#YQ;hQ'degDdT19n:4T?,$rIen6]ShJT(l@H0EPe$AfXqcWH;\1(jK#i
%7FEd,3E2YtkFAlHBj`?N$G$T]LCtZM^Rn4_Zi`E;b=_U.g/MlW7`Gck>EY`,/c;IjrlgMi7l`Rc5SGI5EGhdr.dZn5$>D2!LD:@7
%$a`$K8)eG_A:mdse.4Y?ja2QNlkqrlrh`@k$2YL*$q:"ab;J)U84]^Re3\9c/&B+,3nD:gD!\C5mcbO;-;A!FD)e5]\UP%>R``S;
%nY^(46!Wi^FD[`E>]?fUs/f"BBTF8s[96:<MEdTi;C2>5RNW9BYU"M#DA)r]<r9dh_k//C8Noqch&jIQaoe,&>)bbk0h?3J>^n>"
%0KRMr+-]]Pr^hK&#&/P#j>W/e/X3o6GZ/[_6,0FPrR:*&nV:WFFe.g0q#NK]LR@6K/auaHSh*)#;-[d&W_W4)i!b-6rhbTO%H[!^
%kICiBPVVpu>I]@<&-'pP\X$EK$sNB!<sM?k=/skT9s+]e_3&nW6q]:^.%*%E.tnDOBdUa+9jgKNBM">-\oQCOPc?,EG]5&E1!C23
%*4[Pae:l,26sn3D67`kQ>%!Q]b7=+T0no?X7CoSB\ScpqZL52R`6QY6So)qlVV2`0BcOPRhRF`i,dY8"-c<Qn(eB$KVe2?e,cjt+
%c1/*aIR7L]G%,=HH$E]Zjglj+O%h<$W=qXJHVGOi&sX6q7#@3\MWRk)#q*B>'<Q=O&HKS1Uu]-n*q1VaDhMULs4J/S-iZZ2au8UV
%1i8.IfFb:'+>aSf2V!%)Mqc9&Tr''*h<BtK,8i?A#Y9^;RQRkKm299rnj)&1,)*<SID,;\+.D5$S,GM9%riN7j1d.^O#id\'Lc4T
%\i0f,-358<$"4nZP2Lt.(<YCVQ.hmqLG[dWGkXI0'gE"H_s_a]jkS+'Y=YqTiB,4^6(=SJc`)d$CLKNC'j(^u9!HomPGGjS]T(,7
%i]PhLgT;%XrCqY8&qq39-m?trX%\gkpiV\FK)auts(P4'rdAn(-8;68-%soP/HiV'8tl*7U]>k04b2U&lecdaW!\ik*9]GamFu[^
%4#7kGK-]`KWsa665SRXAi;@Q(_ZpA&en.)(7or`."&;G<JOd[)MpNG_!A1uG8a$TpkY%ZI6c9BS3[&UE5aI3_V<8ffZYW!)rObM*
%:``\^\ODh16tj0s't?_BY2E!WrE[85'SpIBXjeW/BtNi<#df#*,<nRtoCr+g:g/VGn&cE&69'.rB+l0dIDlZr*Z:L5OD5iT!c(9#
%LJ[nlg`8bC/LnXg`Ec2B%<RV5LDpD(m7;=q`QE/Jb:,@XYj]bb<kmAqOJTld-uiT"EatS-b/SJ'I@i%7WGS#[!>d5T4f6g&*Y3>Q
%=RePlJB8O7FhS_BP05OY'_9U#0,j8RI>'5tbiUK6gO[9)(e!$+<%>.\-XK4rDC[QicqsY9k\q2g=/rW^i^!B<h&01#Cs]oEB80-"
%-jX.E@K^AXmjN6UOZo^_E!72&hU^S$A_j]s\g(EZ>W\r$=1+H@Ea;56NZkk\am!ho&XI4mFFt'$iE1i_A2Nh\G.O9RL0I+2%Z@!G
%(JXIph**s?&)(UJ8Zff\:"4ST>DNQoE.0\<0iX37'ob;0BD<=fIPcaGGZ/Dt/6&/$7>mg1<*\#^dR(tn$rq214:b.^l#@$L0ibm/
%;lJ!]+R33\.[ufiN0M'Y/r--,_04>51\!mYG-$4C\bCEuXf,Nl)$fmZpH2e96b)s$iC/ZQGW%cTI/u456#]4]5VD<+Z+TPnfBU$+
%;ULT0.+@9/^k]:H>tm27l[H+<]Q$p"R&guU,rA"L/lCZ4+tX4hs&a6U79<)5?jU*(LOa.#D\\gLL9]2VVFfr48p.Q?;V37Zl6-a:
%%Jl(q!tnDZ6_s8K;KIMl.Xfka?f-'Lj_]7iAfokYn:iX9#m<bjE$j2I_'U=_#k]Z&N.]`7h*^?APPZ"#&b9:2>qS\pQLkM;#mSp;
%N1d'H&qs":p5>J`<tgYB#c]-TEoMsmYd#TR1i\u[9?8cam*28d)Di=kJ#h0?YS"J^XR0.tQ,KdL;Xs*W,LMnBPa6LJ<M\PBfSoEe
%EXo/gZis<<Jl\.TTWpJnq$j7JL="0S-!7%mrm*1mU<u4'":ISq>3,8MHA)9!5g,1I+pSWL:>\;mfdioO9;pZTi^;-T<)T!R,l4i!
%f.1$$Qp)rX`%^"\_!!5es$a1]kJdZ%lVLu"8+\?f/2lo35sKo^0laEAK8IXHL[\Z8dVLi.ekVN=$Q"i[4h1q-7"mijMb(V<5V23H
%<R),o.ZfU\A)S9XL&i=!:lX#m:ar722dO.=aS1:>TmfIRk7>i5ZHYU]8'<I,nQJ1'%&k\&4e%*mcut]A>mk624t^oJSKMj#mKD.T
%`.PRB9`j++_#_/a=G$-`9oK/+QEk_Dn?n@J9.("+"0*!n-K?3[KdNUl*(fheTnJ<$Y%C,dla(B^e44VSU.4KBJf=B#Gb#,#\ppaA
%Fo[A72W*&a!#I@fF4W&Pp@\Lun-.P\;4Dmk'#V=W4o4_?l\bsqg#sO7X('tq?N=**H?Iq;;4^FKMWP)'pj1J9ROC[cM]2$;5,TNl
%X\X699*:C[[-_0&1EdC_bEh[^hu*<mMQ*nu?(Lp]$uGA;!]I1*PFV"L"IqN3L.rThOYc7.AA\B^D^2`FRUYV)6HH,1?poi#CWI2f
%Xr9$]IFn/I)t)l3,e-X2s/krd.^Vi_B`kbcK'ikkOQuI%Yjht[@Pt@dMh-Xb\AGJp>9K8.Xu"`9"*1ltnM=!p\tV/bhOi9p6T+GW
%p0E]epf+[@-i#P-oMo\g)aC8Iokm'a=WrPj_dg<.q!a&!98=6keU%Me\qnYjZ:Rl[-"/Np)9O(+IoART`K0k+O]GbNp0gpVTud!l
%[YJ>bn%Ik2?DG,;#%]"2RL)]ePgtmqQ1Em?.+S.*CEH!Vg]9Idlk1$q+@tpuV;,$C_=43L46>Xi"u6nc0&%(h=JE@+*sCX&Ms,VJ
%niU!+'JYD&d0D1F_P6d_=J#IP*1fiZK=i7M%:V1mUSg+a2J4qf/UTcuEfX/O;UQ6!3R-N\jo5rJ)poQ5\BW,<c90Y'\mGinEsf/.
%(k2KSBE%`d,Y"%?AH&%<TE[SM%*sSP.q%&,<O+YgQ=:/S?\sUd4uu#C87=9t(e^M'Ib4.\5^E@7[S`g7SrNNVDQDWq7oUs2C.&d<
%l_P&d_mXmhS%&>0:%T2.0]K<&iY!Z#MopBJLc]E@$YRDj)j:InA#+%")XQt^(+D6iF#f*8ed.ka=W!J#.3WF(4W1!fKrR+.QDUEH
%3^h[WM"=[N)BeftU<Ydeg2Nb`,4$7D0W/R/3ZI:*QZqB@WOe",V=D/Wm'8$i&cq@*#p_n185'ApN(tlb>]elRHe:5,Nt=1MTlc]p
%P!qP]SGjS=[h?+M(f_i/j1.V92#I#f*:J_3WDlVa1TI"W@#@GGj-_.XMMRPME,\p.&T*2RT$T*#i3'g;4hRsI>pNJ&2+\J,cS_F)
%![I9M#pNXss+I4AfnG-gCGE^bN<78I6NamJ>t#p(1cW-o&8j6S-A`C?3b?0LlW(kCF"Io@5O<a(nCOh.5!5D5Wjm5R4g`)M4H[]]
%SDL(20Vq+fPbbL1boaNp[%kp7DdD&>B*c9T9m&='WU1P\$+UI8eccP9\dCnG[M]l=?.!`k"j3Lnl$WtCmW?Q4pd;i7>jH4J4\-Oo
%bTX>dHO9HIK5B7rYaHc`msB3&'DV2ScSrBs>4_e!I1X_L19<'(+4iPgUh$,/S@Fj:pd$o>?EODI`"M#sd<@^j1d9:k/XS1F9jb25
%rp<eMn)\/N#Ac\jl3W3+)gnrWg:ePOMP64F>U97T^lE2.[,K-r$\?[j`Er<'^Rs*79*>,hh)6h?=dg92=VVH"a_`>N\Xfi!B,d<o
%(6Y&-=Kk?YBmJ1N_4cmoLr`EU1DUI^;8-_<FMh@=W1_Df/d]H48K6T1W'kq;js/qfc&iMlR1ZeJ8b#YUa_S<UUG"jm]63bt=XO*n
%'*8,q9^1;lqtb4mXqQVRmFoEe((9aa[In=k(VbWt="7Nrae.L(E]A&A8\h8``4H9pJ@^HuT.5b$b!3k<5Y4\RQLBCqAt8fQkd1"X
%7'T.$hS@Ap?`=B9>'#o?Hj9fmKquq`T>fn]Ofjqi[LP3JU_mW>f!_<`!\/4_cP#]Io]St08cU7G6F2,qr0O9"V,hEh-!BkoJWRYi
%ZRZQ*1@2',j)9/D<Q]('eFK)_n?jG\fA;aph&h?/-Lf99UI4B%=m0,9!ZW"FWRS@^LeL^"[m9&&N#KNeXY!m.d32p4f$hfTIbTn?
%g[Z/,\c;9@e2sRX;VJh+n(jT7$jo%`6Rrn]1g3NC7,tAGn[?^"G#jQUXYbCF+76'S'>.=rGEd5AVlOTP-91#$VaQp1f5J@]pK.cP
%\jQ2C=u]/T:6E(]558pGAh0"lgYGR:KR+QdbNH)gGQ6\FruQ*c+/1QOqQ<u9ei7?2_R;(@LCf01cU<Vo%&r.`St3>+*kcCA3e>+r
%<n7?G9eYc"nU*RsQ@1iH9"<h!VK>N!NI1KYJ).ff%md%?YfG?A%?+^S#&N!p*!)*I>G1HL8((P&'X_k,*ujV?OOr=\QQ=:S\$.*P
%aC^^1E7\VC?,?SRUV"hK<9,Z`+$%mqZl1>>U%k=BIGBq-X]Wn=Q>4V:M4l_L=^6Y6:GG%u'ce;p)3J[XntG*:f1;2&*7,[,aX`B(
%)!,'T;%mS,T.P_["b@&$3l+!,fN=/N0kiCZ)qdPW;]m`X&1e-0VXjBa-(ItJ&MPiTSj5hP0?C/.P$q2>fiqZ`!%t4ELm3VF??UJ6
%V+0u=>U>@t\ruiMSto&R7cTH0ZNQW-=M_-H!em<u'qSY*F_?(]*+_d8Y\Jqj;!"a;P,H'SYV#7=pa'1rgBM\*)!5f4)P[DZ*<p9<
%LKl/dD3S))Zc!O'0$*c:Ufrh3R/rg1"YCH4qeTc1S54rO/m<mheT>J'FZEP.oYjp%MW7o%8K*7dU$U?i6F?6O6u&sU>g@[*'66\M
%3.&,/gW'jcBN/ZG/Vs8F_K^<=S_&krdG;_HR`<++!8'L#jUn6La/Hg6>(CA"LMW6+35es2h*X(nKl\RgBk>tKgJO9fK=D.aWYf].
%"5s=IdB367fga.]P:41`QLdsO>W0G<WCtl"-CK]R0_QA<nH9)W/>OHm."Q>A2bNaT7.EHZOX1q*f5H*5=?.S1bEpZ\=B5r+e_N2<
%g[N+-$//I?1JgcoEnN4F#FjL&dC2b?AnG0SFqskq!-rs(=&+U3pO)-bW/(Tn#i@Y;h?Xf4R<Dr$*3Um;4>@\d"Mpb2:u>h=rdsDJ
%VUoCHGrolQWK[5?[kA^9"nRVH\N7k5/l=8pr3""HJUYQS1kQ5dF,^*96MWCVW&</4a"!-Eo==reI_FJ:d(iX6.unA=-0ifG/6Pkk
%Z@FsRd\a'<EaB>-,9/n+5=sp)YtW]-OYH;t\H5J1hnZ="Bm*JNO]t::0ij_u,&=Sp3s]=onL_k!1mYL.-diQS)g8(>-O5*p,UX_B
%QoX%mR9&mZ$*Ap_RMt$,jm?]IlNH@HR.@uU*.6Xm$P=kgEfs@V%\$%9(qtrL@9m?87lJjN^=,%W>,.N%'B;n)CK,A-.3uQHIbF]R
%]BR5rC8)-A\BfN#)Ii>rHAo.S_I4n4Q5X_:hN$>FY85ng!]I\6/4nM=nm+N+'M3)Zpp(?nnPd(ii!7sgdFurB/u'DN:CEp)EBup1
%N9BXE!18J$T\C<')Cd%\k9Pln)]OIKHIWWnR0FKDM`4N&&uIn5([9'HWB4>&l-Q[)b6gdr6-2Kf*Dg4m,qBN>X[h#%;&>bYX;Q/\
%GZ^+68_t.N/De;@;ie'\ZBIJ$(o36&\&(E%0]88eCr9Yo-ETo\GHg/i*HP64p3I^*hlDRSL4A455f?WB:28i^O7[UXPVK]^Yb(@0
%3t,=6<tQ?>O['Y,lc(i2@l_Vr$HqRq%EnN7Wi(8LNu9q:n-8=7-k6S^Po_ur!d8a_:ZWbeC#o#eY'.ctVG6jm34h.a*%qK=eWY%C
%+j%9nj*9[47V,F'B7:dInBf*,45pd_qYthZGBZ^=JV8RNorDr?./FoQ\4bYg+=O*kd>Up8#cdbi7An^PC:uS.aJ-Z2`EqRRKJ\*e
%\eg96)X(NrAZ:`o;-cm.)iLk0,Z7mro,/o0E.u3]+Q[6f<0^3Sd=(@`YbJ?s@"qdTU]F8nAPu'=&Y\^S0>Gk4c,)l]l)s^7f-uOm
%mP*m"_6Z,@.+#'4Q#b\p4]$]:U6u2UP7csc$`W$=7Xil&T:S&"q"d,T>$7g`;*Q4T%KM]=_NatS)]mIlc@e=`X/*quZ;sIp".smH
%[`5bPVW$Vn3_i-(dFps1N!bfh$>Z'(8J!;^3L7bSkXsheT6t/C78dSn]RE@\Mc/X'pO2lZItku?s8A(D]m+LL>8/'1P4l(f'mPI8
%"6)gKO-0$'75ou]:::qIapbbQ\LDt3TbXeDGe,RDX1ZOrT<]^O@k8;KL2M_18uuN*]OalNbUR$56\/od9Pim5:-Z5M,sk%D/]9>2
%k-2dP`k'`?.$U/:;j&=SN]rlh6*qqk10<%Lh5kb!\@?.\g;BX"W]74%/1rW_:p?U!)n%=MIT==]he:qDIhX1+`U))=#*8Z7Kk?3h
%Y/:fprQfbgJjRZ.)PY*%fN9a$a:31hNk@]HLGg'J'V4)]%p#o;MaPs3J)q4$X#/WiPLG"`<L0sG.qm*5bOelVRs2DGb(_Zt.Q'4c
%AcsCoQ(BRpb=XNN&Shp>b;9r^$9<C<BFZ$gJ_c^N9Mu`)SF![e@$rU?Q;)NNc!,LL/Z-=d)+6SbEE*4B*7:q>G+@`f<Ugdq1&f)^
%60+hh";fV+V:Wh#79mZZ<O3&,E<6NAE4DqpN\U?Ko%[,]S+Pa%oitjVQ[5c)[.D^%mft?iT3=Ws4[rQ!Xn$MIpssK/Z"D?8DLrH=
%TkgWqe'V*ZWC4N>l%aF7N3%H,O[,8<.@<Ffb2J1LN$Xlar2RQh&R963"i7WVBF:^$_i(sBN==q55pmB^8p\>1nj<e451VPt[EEAr
%]eR36dm);umg3\%HmE-&U)_Ks.g#UEE:eXC/BU0),m4K(5meQ-,h2S>II!@r_.bC7[UZ8M/):E95lisE+f#2&KRt38Q>7ZAF+\G'
%-%"^;jp.C8%j;!!YoIa.f(7Z0nVA+%+kUha7HZB?G`14-Xel/qe9A$!&#Vuu8"s'.m*YpVLfcH:j8)R3+FZY6k\A`""V^0pm/i!V
%2Wf6OK'VA5egNK.an,ma:,KW`Y,iYX7oDIl274Yl6_:!VbPHG1Isu^m_&jbH<?:ar=9r-:r.NKib-hD-Wd?];Q-:q\>$*<'BgjUo
%MBm@$*4+rHAQ3Ja(%6]OA^uL&5dX$Nneqtor]4f[M2?VI>S"uK#TQIl?%h&k\RG;;s-;foU:n<FLq2*CBjqZ/)hC;JQsp7]h4c*#
%.tfq\`T`XFP/a#sh!KVWRY\6RU\^Y18VbK7aSu$X@J8G6r9jQU9:I"Gr:N?n:c\aHqR;\5:dE9Q>+sFI)YmI,Rdr/k'7<$]7o<;C
%K6M*`I>tnQN_F&>)A0Us\M\T0\E\9.]Vj'@cDT35P4Yqal$GGTWu&c?kq`2S5)R\2,pX8Na/LI+UoL.!gDi4BA&]*UP$j2H^i+*W
%EJ@$fChKS(k'or@;^%(b.;J-,^[e#JVEa#'Irh#F3@os"`,K%)a3(=L<]pn>4F!=.3Z+]`6ZJU)U8TJsoV=t>UgE3j/+m2uMb5fr
%RWqpQ@[T1LG@RZHa<A%q5CbZ%P2cH:g9IAD#:(]PCK9#W>^d/L_F^Ss%Nt"T'IjI\jWjqOcjT!qd!lS6L1q^#h]6)HfqaW^e*h+?
%#X$#1MQK,]Rb-s'LSuO8mAlTQ8X>N`k#G`q;;_XHo5)jqV7<7Q;fj2,?$1Jci3T7fU9.Qg+R%h/SDBkZ\<1;NpQ4skXo$&CB+6`Q
%N+CX\EP,.3W)[NBdo8ENFd@4;e68!$1_ki*brEfVrj+d-L%RI=-8T^@'HoU1S+$=HZPSMnBD?[IAKqUk6<Yah">Mo;-*#)nSJYqs
%29$XDde&B(Lg\V#Db!2mT5C]WhIhpT2<X>Q:priD>FITQo^\6TjkqUX0djBHF)8'k^Rd"L"6i_IrIdhQV3F'X<;M`4C#nb-_fUoN
%oi`',F'\`.-=2\m*)isqP^[W_-42J@*'k^i4-V)Hj]+seC=80h;g/$Ojr5CShf]YQU2X9.05JL-Cr0^0,G4LP@`j["?Fe("$qOZ7
%$BYom"c8%ln,0*aj_9qm0TNG>";ND$$D22&WJ2V=jZ@)54k>aE]%ici"Gd3i<.M=D`+^8;*]TTc'fh"POYi9i<,oYgq-#"cW`&W`
%]ktgJlbQ5l%k'I\&VD/'<Em.Oe=Vk(/F.u*6jS+o'[+UR;1[cgBF.,rOjTZ!*J3G(l5`Q9/_GrAP.drB*q&%obg3pgI&-2thq7h)
%]%;4_oZJ)l8C`s!r8rqSg")*5Jj@C$>:ubDAEB=^4b.:p,g"=ON;/W$ie\oQcsKueYZ!$5N[Z6*A^138[>`RuHhJ7moqkH5#/8+:
%8#d%,n3*K/@_%H%$=K'=4Y9J>'<@-a__fWbq\0m:G*ntM2o212ALe\6GRL8*C'S0i12s)YZ^kfQ%F!+d27TU(?&\e%Y;32*-;-FZ
%fPT\tn1p_P;96=:p,/'*Sak9g-=SH=`$fK@CBU^.-E7i;n.jM^<`UfCgL]cC?T$BW-N3^7'AqG+^0gPq!3<m/=CoXO*)j;FX<)Zt
%4]p`eFpRaDE^o=9.W7g^=9so/j@CZA8F$*-gMSkLYnq@fDDM?eFg#D@QT7aW5%i!HrY*=hj\^0Z@E2\^Y][suq:]I:]*VM:=BVn?
%'O<,,PdiCW7;W5lp)`IIAOB$'!o=8+j87&VhA+B\<\HW,(jY1i(R(5*RtVWfMTUPK\/-asZAUnq'Ms&,O(qE"`+k&'TXP0,U+WF#
%i(dEi;,sU9]d8Ye`qQPpiZY'1MZkk>Ele"IXb!/IR1WN^K<8oT^_DWfVC"Hh"k>`u1'rMHdAGdH]b./L`POp.*->?UEcVOol:9N8
%jD\8na^NpB$d6!$a=;qTb'B"ISMpj_(*Np<EEA,*0W(5M6oZ0QaEMu';=2Qs`^e*r'q!`hdP^WBeaTbgki9-XTjpE29Stl<D6;u$
%A<c0@4K"6;\dp'@'4P]<AlXH2X7UbCq!;a=#W2s.BK^5Qae-,a^:.3[?#h^Eb9]8bQ(t#Q9*qJ39hFR]V>/kpAFZl6AY"$q>U=[T
%(`NaQ*2YpG0q)kB1TH\+&]OT=7qAX'*3ZZ.M6Zp!pSO$=`EE@kPKoO3K8uI\=ekd<1Na>llcc*NQ/EtmhV,$-J(6tP"j@rYXV7UI
%*]-[$Jf/I+Ti0kkMX84b1A@9U&D*kAF3W?#+)H7N0?7,l7N,oJ)69AhB_SXgoH$1X]m?)2j@YP*hrR^_a9`G2KI*WL[25k7:Gh&n
%nXlm<6*Hn@BMl/11TY*Oo_Ms:%3U:lh5(]$;[FT9(n8siN0)@g@C;!rk_UKO#PB6Z''(JFDuKmk+2A_3K36ls&P^Q+QQP_1b#[s2
%Bte"P]*4sZ+'PkH<,o]rRK\C)_,q3B!M20dNA@UrU4o.T:.`H73J(g[.An@mrH)&<W<j%DN5,t*W``)J_:+(c4=<e\I)TYH1Ycrr
%]e`)B\E</+b;$+=E#S[lhgG@q8Zk@BC7LaY8P+PUZfk+crUq#V>s?O!)ah(AOcR;6XeW$(C[BKkAojo@2G$M:$^7W9FLDUB1:8%o
%[AF+'V(L)c`gk*gHK!XCf9&OZHs'37Q:+ucg12X0Z1"s!!3C/Y=]Tdh>!!eTKYPd_P3dVam/o!^APXWg8:i&QfaBPb=>9j,8a=kH
%9rCppJ)G"*M`3,7[VW""8I2)j^NW<GZ.\%.cUSKHbMYN4oJSA#2\_bDp/VgGFf<>lJJ&&Tj2afO5^BQ.),)fi,4NVMXmr&^+<$sb
%DGdTKNj0me>`%>i7.`n7[fmT^[D4UddFo)f+lHi9,Ve""`s;G\>rDdbN^]cnigKLX8R<k,>:+eu";24Qi#F$oFc2Si"Zj5(H(]/]
%$Lo,rVk8WodUQ[i_okAP,#fPgd.%%IaJc/AOu+Rbo<IbpJR<T<8,%([6u'(?7..s8b#l\9=XP_sCOqO+8Y*mY:4OW,o0LL`)+Gn9
%lA#;>DaTcR)?BWa1aA_A-H3LdlM;a3I8.h$c0,g?,>[%Pb%_.td]0@,Yb"on%D"241Ii]?6$S"'"\K+jPoBCge=6VDf.EAMUtmo&
%HW`+8VedXejao'jE:jt/TM";`?X^B=[2mJN1'R*?]:qANGGd9XFgsllC!aKF?hMa;)?NJRG08>o!,nPtJ..'qdC:RP>)DEo=HVYk
%j&ld^N/N81*nbriRMcimp";7U0WskRR@Xq>KJ'gaQ`,U5%E`q.#em:R<=i5[l>=JN04GDTYkN6Y"6J7jYC#3"F1NH#q.c6p;lM'K
%lV*(Z_D]'oqSWc2pf+eWV`,^j-^lgQatms6LQo33fZn-<DhPNZ0cmE%6?VJ.`le,*FB#FcX\k,Rppg"p\92.9+7;"[otuL6RKYGU
%:76N%p[MeMQHL5P\m@`I2qEp?L#8-T6FQS?;YV,2aeO]>4YE!]KkNdhp3:-P7Cj8XYghLh:1u%JW'<ud'AZ9@j]1?SC?7\HXS6tM
%>+fd"Nq^%B#b'*.6I:,N?#/?=TRNJCYpCQLQD3am*Q-CaD;B^9P?OC#YTnqeG<&IMq;^"\r;3Afj(77@C"/RqR"lEtZ+%_eeCE<A
%!hQ:oP,OuKmV?f\Y_@a]i#&5b)&jY$gatau0b30()2Knp+U"4)Bo9..TIsu-"a&tE0V7a]Nn#&acss[oOT(-8O>D?#!5e"M;)`L;
%F`ohmo([R`=&AQ1##77HTa/XHAM'YqYJ]/kH'.K"^ErQA@B-$leCoeR`<>ee&W-n<FVNg'HA&N*\]s$7WFtX6HYB?)q%A&`[CBF,
%+lM\TG-nVq4`q,q=5lA([ucb90?T3dmb3`q6s:rg?VM[oBK:^COfK^nf<(!QNDN6WYGL7Tlio`J2f8en`_!cSCUcF(;')h0[r^6k
%>h4UG&?Wo`@r@CC.f9OAN*%,s)t;_B/2kF!YBq3mQssT*kniq*1-uf7!qG9erG/_YY]F0ke*pXEcn#[f#hh]-qr'V^R(UPHK6*A>
%_-S'CndV3;T%-F]p.,7;Qe5bDKKk33Wo(SAP(1O`pd6ks1egh2$/^Wek#WMX?:Of@]>+R;Jr"5[=]qk67+IW\!`aFjV'@2.6R_@`
%]NnkL@V>POBskJ%kq<No@U7Vq)WKVL)Im%K<mRt<B+[`U5l[Ikp!S?2;Zm+qrX$+*GJg$/Ialt'ME1ts7FFM)'Ohe,Z[)rND)%&Q
%?;uV-ZGu/5X\l;TRFS-Ip3q>Bg7S@2C]C^MqlW5e`FbSkTFp&2;FI$2A3^bg+g#V8a2:I)g2ER1Ao*a\+0-uhYi\mu8)=p&Z\WsW
%&`LJZf1k7=Wlh5GRPdd6<4,2+gsWn$j:L.h^pP,?Z'%VNqJ)I[[ct"o6V6\A]I#87I7+.>8^pRI':k36;1''m1KeJJ[.r6kCFUjm
%MqVAofdiChnSSd!18bnTV?0RLZM6g-Z/7J"GGq![g1Y`_**\P1"U3E#P`F-gTju$h[H:+DDcF3u9W(;&3Gj`;^o.4*Ng<+Y?Z8L\
%l1Lu8XN3?3;uQ@_:b2\]/lIOuA*^CW%DO2*$ID\,\odMf=K3*"QF.se^GW70@#X>`/1Pf]gXR,XY&WPYrRU=Z2[fM9X?hn9Pak%"
%#,3$G)<!\b[a*&cr,Ai*E3/-X]UUGD&ta^>d':]cWX0R6Ls^]'-1CGj>MQnj-+`o"k"I8r'O_7h-(R2'C1?3FLD!l:Kr2DCEOlKU
%Z9im8iHQ2Mf9o-@g;bsRc))O2b=[br>=8_V0\osA1e:PQ+ES.5Wej0O._*be<Y]F&#ZD,Q-4L"#h1s!qd=NIs7B.,q/dS)u_Gfh"
%X-E<oCuY@gQ5pg\aI6f;6T@DTlJ^a+*'t2Drj,sWfVqpMg@2<t_9TX/qjrCf`q)2M:h,6VNp1T[:;s:ckM^!_:_og]'-ml`V.+F]
%;Pu3&*p&(V9/7h\B8t;5$f7k\d5Ph%mmK"o"&\*n/?Y)@"(<#]ho6P0Lf.=I?D;:KOX9H;NS;]a\V?3`S@TuJcu"RcIbbZef[oSn
%VoBZ_]*9uXM)bm7<A41$Lh2B2PXZO!1$4:PDhb3!XL3c]"%DmgoT0U21u^^h&hl4O;u#@#=Iq[7"uUS!._/"ohU&(<Z=,"Va/0IC
%<QMbR.oN_b@i7S/TkH&;)Z@HJaq!TD%#Ub:X2`Rl]YafeXERc(p_f#ndOmOI@mLE)?@AkZ&(6N@ELH2C&!]5ImrLr*gQJ00A:;.-
%iKkSTl$F/an*9<R$rp7&d9iXtn2S=]L<s@`^N4DDGX/SrY$+S%O*t\W8AO2/-IqukeC*WFV23=\ZAc2dl,?0GJn\`kZ4Q,2YsW\d
%-GG0*h%tFB=Z)+"S`$e)k"^H(X8!.42b4Omp[``O,9D%%:l<jKXe[R:=u(e6ff["T+E_tGQ_G(XH>%b>f&+"C?.4@=H3AE[*#fHT
%L9;_4cRo(I#s[Hh^?tiulH<s&7^l)/ALSdWf%"&mF0gM#.>Rg_`c7G#;^s#i=h&@>;4s_jBJ65J$Mh\;^<tYL;EOK<01X;q:aIeX
%ZuQW8N/i4M#$[8Y%dBr+.On<-KFq'4[@t8`.3fO2au2=S->OLjoaHXZ7_D0H4W@_ZfgcI,f1kk2"[B_^G#W\V$cB(7(iqkodNTk^
%&;p\VoT_ZAP>;7T)VrSbZ$A%sXA>^KH&3[ZLmQ41/G=]nN;^OI/C.8]jd]%lm1hdg*I14<'YYA0qm+;8Up4^G?Xr9GY#?`1?Gl(e
%T.k<`kXt1:e)*('c^5>jeC`SuDJ/(3>)>:^AMl^JQs<?87gegrE()T60RAdGVg3Q/8iqVkSQZo?m:aE7pR9q7@gV#&#Zl07EHC8;
%rSO1!-l\\jG>L*pWt,gQ+-#W%Z=!Pq+65IBU1*)OJD.25Y]Gu1#[NaRNN_*u44R4nId28u#GR>5c8a>7I)(@jYiU#^'T_h5gEB=5
%LIr4PL7Z^di]S8+$#OgsHkN6b]pEl.%#Bc9pnY93oi6tbMIMf"nt/`Hak<K<AXOk+"DrC+D)^+o!L1cs+q.;!jZe*ak@>J`knJUk
%k5d97Rcl6GjCCkV7!#rX$/tFnesX@&Y/:gA7a/F1,LgB:aS4A9elW@Cpd+@IC(Jn3,=M4O_CrLZcV2h1:/k');%K:9;UW2EIM)th
%U-(;AG#*pDI3Ssqj^%*[L"fs(i*"Td[]M72UZ@XZO`/t5?bc0(8m_M]A=/+0r(43UO>+Upn1!B7jiRnc#o%X.n>d@8&PG96X*mo]
%mZ&A3ne27Jm0P/;'8CMP4h<:5`3gV@H1)@!1;tn#7e8KKgogCulA5rn/Oimoi7)NtNSm?snHK>KkfD8*Y)0VQ`E&*2*MQ(O"4`T(
%0hhrn(tahQBbpqC!d6qNJntI/0BnRK/X,/%g;\uQ-/UO]6hE;L!<KE+oi&e^Z;gZuc]@`^c*U^5%Fc"rUWn?B.$Q?s/n+A!mlB^,
%!PJa96lWWkZHrLF]%d8/oNOH\CJoR%_'TI96?4A!1dGE"ch./)cg-f's1AuJAOM-P2X2$AGSS&JCnr`,'@Y&Ps4YFGSIm@92S`oR
%N+GbH5HR<&!6bo8cRO@$_GlR\$%>MWG=J1,Ef??rZfb?M*'$PCjK'hR6u^9a>q))='H.abG+9!%FAcnQK.uBp#E[+c]G%sRfY=24
%?T6NeG;Rk#]O[dUe!)Jt.5L1=Ym1ijHMmYu[<TlI8V'J5/Pbdi,#s%CdceVS[u@r^)9)8?kMXfTf8K>7$R#Vg0cBu0hZ@ZnGj709
%B.AB)'E<"+?!<493?R"_.Z^pE=3*Pu'//<A!&qrD0CK.RJtI<,7hpcnYAWOQ=O*!^*JbtRDq!2^rRKfcr`eQB0dBb(bPtZ!\[6U%
%-!,IY0]/Q_>0>Xp@qgiU(^fV`1!IcG\JZ?tB8jjOoXB&DcAA#j?.C06\uRu-+]Tr^T:,Ek2r_b9`3J0TXO_k/!?beVs,Ak/P`'>@
%k_)N@Wr)7^^[mZ(\`M1Ue=tbeaqElUP]\(?!e[=qnt6CF?&KG,@o*.(^"(H_H-k*0dX=@KT(\q.>^YEJ#3!+E['o/Jh*M-ea<aYN
%C8Iqgp-+4H<EI?AmM^!bbf9'*:lFChEfZIYjlcO^,\GA8`G6P%,fkeZ?D2%F]6u>$^I"m^gBno8IOoMLj@<`X38c0b327HAj$XG^
%_T&\6'ne_HfakqtMF?O[!e(lfmbOe4qm.n6(maKI^(aTH74C,05nGKD,+^^0f[UG];^"*_APJQ+h:6(D5;%20NR"0>H++6i%tB3,
%Ru,5gad#sSQR)q5I]p_?W=2hfS;b[EN4J0/*-Df'*rat96Le@4PqQMA(DLc8od9:\'lH2sF0%A1;RMB[0-@1]d6/NUN-<(k:4Df?
%!3*"NA5R32Bc`Dm7P+CN9=VL7[KHfGgjp0\>i$,2E)f?-]sAA(^]s,YdG?t=qo,W7c("EJ#5500=17\73`_tu;5O.g<A'c!`&=sm
%CmARgW]mPNiW7ACdtHllA5"P1[=ICQ;Mgs.&7MC<TpfS$M<pggcHE&8'Q-W?lng,Tg`N>a.+rk<@rKs3/at83E93%2lXCUWY2_'k
%;5%_9e1G<Y/Og%B*XmVZRoN^mo4ZO@`jqsY:.C>kWa4Vi"\l?]<TU)b7``NLrI]kYIDQ'<R;2YdD>CLEjKCNg4qBqtHJ8cHN9m2\
%oP8cL$0/Vq8r?q7Lp%F;.C*4%i7YjKMlD4W.Bn;`&\:uq;QK*,(6'n0PP.I4>b"`sBYF;Z5M#G1;0?[t6q0<T2GH$^`U8_^Xs$I`
%E3^<3a[c76);CHf'?jF/RlD%]4<9=i;2bS@!FSd(A,tPekOF>Y.KI-R_4S0]ZUT?84WAM6Njld9WZuRlgp4sk"0(8]b9/f$J\B&L
%NH0/#XG``+Anl+l:\?&L0l*Q8(46&_54b=V=1'#G`PPLB6+/(a!6.IqI;q7'0e!dPji^OI,G8b^6H!"FVsso[@rl.ohglIi5;"g,
%/2W3<fF"3kI5Di-#93R)!2U+/jO-50RqGIjg7<mLp9]H>MJ/uQW;@r?qIgSHJ6kr\h;(`#Gg0e[Mj+o0D,Xh9_QG]_bL9@m?.TcM
%LKLF'Yc,!-^LFR[<a\6N/ccV=`H<Ep@4f(cB4Zc`Hje1dN!djIELqqsn3jE&$R*]rXub.f:C*$5;#"NnO=Mjs6kA3dM7F@`'ST"<
%X0*k9FCWbH9i4Q4^/NsHJ?Ok/eI9,3Z#N\qW4fKj_m=UNT=4<sc?SaEeh/@6+FW@W/f3(b7*BGd1emXsM9(DsPlqn&HVC&C@!]rX
%o.(Qa>OsQ:]M@%8!u."ZajQ09fqLc<V]i5MI.d-]g)pc*X?BA$T6t\.U.`L07=Qcr]3HK(fA[n'3rmIZdtQQonoh8t6VH3<14fSe
%h04iEQL"2Y=XlBg7bMqPfD,Xmp9i2-ik,AIQ3u,!VHA7#<R#p!:8DOpHgP]h_EjQ03mDn.p9S(Nm>b8(ZgP/b=FbsHhs%+;<'0,B
%pjNt3SLpe[XFmG7?KC1=$8",P)4F;N"Kuq^.up)jB>Vj5F9U-bOl!,fj=.<DH+I*;I(A]N]SCK#$_5gcIu$5UjYehqK]g4HaCKDh
%??)B*s"u"G<Vl=2bA2$UYH..R`3\AS6@L/Yoo_4XN?%_:r4O7hNDlZo8$DlM?UE+V4Dj!mrU:PJH:t4M7o=@8mq!1XrG<4AQ99iM
%*1RY";\+f5Ol*,iX@-)h<87VEUAMnYL/Dd_bYD#G<fQjJh\Z1t6f`r$G1hai#u:_*\S`353sEQL`d+&G2T%W$hh4\de^EP:X5YA#
%ZX'Ff&uhN"$7EBjIq1!t`N>n(C_NRl%^cQ.WL-T/+#hTRL4&Zs!l_JD!21[pbN?s@gIU"'eP(RX*u#4djfu[snu(q-HS=^q9t);8
%H'#:ej@K5>XUg6W\t\dq=MAk'JRPOqO`:Q:kNPi,Z8<#8DBh!]M^f8+T@PMh5aG0+'VF@Y*Dka,E=0WDQ"-VH`o#M>kG(DMD',Vi
%\&?g>[+B3_j0ncn"i&'3=^kN(d^Ab8:(j8\oX)GuD2H(K$TYhklsku.OeAJgVY<#9.Rb%uoWA=nFC53;_;W/2po)meKRpfi>V!rR
%<rEEH5Gd[@K1lrj:F]jt\8'X6esVU,23kaOlNsCMk<u.[H"Gi`'*!.t[t*+a?Wa(/IN^K?jX8-qS7J8p*+3JU/&0]&\i#NX?Vasb
%,uIc1]1=`3Q$N[)no<#t=M_6Rc.[s_Z@]@8_P5(.AaXX"5-B=bl;Btc866BW`j6@f\5%(tO`IJSPen`&+OWrNrKgjl4RqN1^d^Hb
%;hWkkU@MO"N?sPAob_dTJHgR\ebRo=;r2N=]o1/44BBE0GMRI[eY`F6#OOl;,"i@eSg(;BO7?D#H*:nte&j??ir:5L4eW)Q*WR,/
%8K4nLk?+l(Udut`jtC&+SB)4b4>k_+PGD:Y2Qg6<<q%Dt.5+/^.lhjIBj9,Zb^KnV#l\?gD*!LRbY/BC%+feXE$pu*7Sm.FhaJ+d
%kPF.;eF@2u'nUmD:4D\)]Bf_X15:r_@c5neb>K;gFs;L6['7HDq/XaTn>S>Cfh/0gf#ZrlQ<GPhe8k"H(/RGaGT4V;JF?82qJu9F
%()%$_)-12+n6H`\/!S[!DWSMo:>?eV^.!cOK<e>NiQD!C3Kdt6A;IFQHH.f1)b%Q8Qf=I4;HH8#7p<nBXo+1HGFt,&kZB5TWpH5J
%'TX\W?=O*`^-uYkC`.>W2"3@$aN`4WS4r0r-t]+<18S<p,![JMS&j0bLg\TY3`j'tPUo`*?M`-JJ(Y^CMhLSQMA'o@6G8^?p[lr@
%b$M#S=`F*H!"ui<:=R`E!BORC#8h7J'YZUi2EFhG0W>f!AR^NOb"9=YCWm1&c6$T`28t#&.GlNI,<f*Y@agl"oFeD[aBO-j6oRa)
%=^Y*#_P3f^jrNEPGujGZ&l/nr!:C^T5-l(2-sk\+T7d])(u5dgdlbr[nRm4594hh^pD@m)^'s7$oEB>EhM1aG<$8V?<E$.kQE_%I
%$U_7/e7/d+,A?rOdnRCZ%q.!/2R3s_OZ77lR`8`5":W+N9.I=*[]1mVeYt:1CdYseGFc3lr:l&n/,]C*7NZoH]WR?u,)CcY1>W2I
%p6u)Dd@JFp%[;UmARsqIco/\f&2ms=h@,+EO5X7ZL.FrJFMYp26dt9"$a,oN[g7*tOTunc<VdQ'!+3clQ7i<USIPo,"p?D3np*Uo
%,R>W99\0Y]B_<48CLFrb1GH9-#34e7W=A*d]nh%s&@h&RJAK\DE%r_2^L7BLT'N-"@*iLj#/J@$0EU!*T"lL-(Zg1;@CXl,pbX1k
%%T]U%]>b:RWB=sdiS@J;%dV+C`5=%/n)Nh6d]1npNucdBln0lJAL0J`(/+cR8t9D'`d8N#mG)j_H_@(?%PkgbnUX6c4LXRX)&\JG
%(Q'H.M,ak]lE3XU:6jZs_m8+):PNLlpXf1aT-6#>2c+EQ5U+VF/Eu($m7dn;;m++?$_]?mNn%/V1]r,#S_nr<i[=@MiV;Z4cVDf(
%7CUM1['#Z9(b=02W9t>fo&5j0Tu2cDD]J+IVMl[W]HUk8_!uUPdn\,(!WW1V2f=@Cq<W)Q5b/b)[#T-Te*]8QG2`N$1/W!pN8aSr
%It\\`rQ;,A<,k/A/,Jj@EU[S4r5Z1FDR-&=g+M1/i,S/dR#d'h-CgW%NCaau)a<e6DRW97Z`'qABBmY=M<8An7h7e2l7p&VIUB+$
%!fL@P87.>+<XSb0>0QkG*l#&"<KF3VA$ZO00TB]53utg5C_rd:g_WDM/YEl96mCMcgYOjYFFCCaPK17j8@&4iWB(<sEG[\Mp\4BU
%9MQarXI,(tQlQ!UUT^2#94pSH3ZoVLH-f@"r@cZkVfhBC?Nbn)<ER6g53mW!;\!SQ<DhLD8cmHCH]RD0_E-*tTVj_5:Nka#!:>BR
%MU9'J$]X_up#]i'J+qPPr85#@^L4^,b+Hsj&2#B];jdi6FID^r1;u%LRR8%Db?1PF<\?E-C>D1I>`;A]()9)u:&`12Q<dDV/lbh3
%p(>rD$@urY?p]^t4"4&)i!",tL^'P*g>&d"UI7@7)UP``=RA@>rh:-.R!Tj3Tm^i`X+/BSb^hZlY)-eeefo@lLt?_RBERI\;9%,/
%&9uWk<@XD0#AlZoC78_P`ZX+9M0AiORfBQL9Km)-H6#lG:qfrB_!`3mH*!AWr?Fr&4kt"e``:,+Ug<ci(=BG07Y%J"FYRh8*c1dY
%Xc[-q7JV/a_cn*.V:8__e8b,)a9.EaPr1*jBb;X0*"TZ[1,Yju@<KV'YZ@Y[&<QX:18T%T"C:l/;$'_FqfruABh-)%o!n&SEZ3mt
%L$D<36lqsWe[%/^mH?KG;A=`71$e13P\,q'7Tm$Z&\P<]QG%VedkoX1Y8,HDURpuC5M/"p$ZJV`iinK*[W6(m:bfLE_E#*`7)UR(
%AOAY:Xtt'jYT'.`=L(@W/ulnD$4VW.P+=/T0a`ZEd1a3Yb9uaFJQ\Wj)Cm=.4BH'ki>Xt(LgWT;H5>/rUW3//9jbTci6WN&+sUlm
%AYmQtY5O3bMci,N$Ob5nd0pA+@0f3#LKMj%Q%F!Pd>2.=pn8o_I-VF(6Om&"87H34Ws;'JMQ$"WH09eeahc-/<uo=lM@Q_/S.JI^
%mg<"Z#BrKO=Jd:V@tf>gE=#aR@)"gJ5ohUWcZe`!qHgL43^4_)MNX!gEGm!+c=`[>^3E5L^=TA*QlbMhlCf2^kYK`HPsi(=?ctVt
%O7Nr58rSt(CLS%*as-h#^i44VNOQW(1-*<9ScP=s>]_6\9G_".q6B/N(W57_8"M\9;@J*s\p`Qic%bY>'iU]:XK3<KSS=\P\QKbL
%nM]E6ie1FB#,?e;XQ0.777q]Ea\Memi%qQ%FGj;591Q[NWGq^\^:I)n*`a/kl0CD4/CGq2lK03N3$KJ:1<%Egk?NM@e*SujqAXSX
%0&4aRnJ,G@jKGJ&eHh]NXDQa6B^;t*U#K+8_+YL\`#tegMs*etBGrp#h^/8L"*d6'8t;ZrO4P<"YU$\RZX8@;\(7k2U]=1a>PdEa
%f*FX3aDA7%WY\5IMim`$`Oi=G%>raZG<t?QXe38XHX$)*5(]m(m?<@,WC0,(&jAWciEo9#(C[*Fd\RUeDQh`RScH]rC'r2#osXI6
%Tp<0YYHRB46)_T/"T/?2L`.`?Z-k`Z8"Q8i"gTWSh-'mhS625&<?:%<$<)'7/Udo7S*\aJWLgh4KukRJ=p(q!=*>%HRpc#VQSU6\
%RV%U_PA[<ZCDl<lSkblaamGraqC3Spqhks\3bqNJr[I5n!HOa;4L&W]Z4hhH;I,^532Z8VJ0_FBZ:\^oMbiUCJhYMs[*eu=,SMY@
%_F3<MRB#MH2q)F[ciee*""j1uSJeh[Pr_Em/4#[@OF8/EN1`/!cdaBM;C9M`"P7U%Wl;VIi^:FM>6mfg&c!Kn,&sb_li0gd4_rR!
%pK$jEo3h*(_>5Z=o6t/6l*eO%gf',tCMhS]E1#<^'7ij^P:7=GXbmYNci[./'Jo2d2<P.f-h$N?f%oZV98Ckb_W66p`/\&XKa'qW
%<sR1hLDoEIn#eI7?)KfZNs`B59WQ-BHZq>Y(G,B@;_%VA1(:(gcKplnP`Nl^[&ooWlKcbTl4BHlBB_,uXYqB@@nC29j7e5P4\Waj
%8^T6<)V2b,bP0:#H*]n%dKb8?PKZmh!(JabEZXVfC:3G9]J^SH3Dfn`b4_0^gc30uWb<ZkHQ#Zq@#]a3cLJE5ltVWLF1e`p4"@&V
%*>j8"EH>+._S,hW,Q3eBm2)DK5IW_@R8jt()>gp]6qI"b,Md(AX(hftBi@tI?lJ"7EFa6C)X-#J]hLV+Qm?)adoc-nl]AR$]krg\
%Zn-e_)FgiaBlF4%bN0c[2U]>7_69AmO)*8cAND"0*5TtC_MR_$7!FJh`lTmS3tTV8'<.e;:b6aXDK`,c!\3S2FGnE.8=3mPQVu++
%05$mp%0"3k;UK`,dM,Qj9G-%J:um#Pnh5=QCLpRHp/iN]Y*-QomZ].=e=m,/Sq"s%E8Kfu]ocP<#,7W@aHJF^LrFd<`6ia%m8bgG
%rJ?;ZXeZ&`!9%bC))XM\NRf,6^>\q+4OA,=ks2!B'Yu:)N&e&Wn4<QC*4e\/3YNdUotZfE,mdYqFa?@n&FYM/k9I]K<ZP:_PaVn=
%cn*E=M&61L:%X.9msIXjY/&Ad;2S3_OG.20n*"^mKnF==e7*_fRJNI0DJ9:"VsZMmPucqsLn!/>*e@qN;K//mWG)[Yj`ml3hGf30
%D;*,Jag<6IJCS94mU^[mdF^WM/Z''E@aDOb7apu`=I3!'YmRu#87WWIU.X`C`"KQmj=V%M%$3Ss==)PgUQo+6^sK-W`$N#hOb;hU
%TE5MaBrT9QSVkqLYJ$G(AcMZXpl>?!<+2F'k"l&1C@TJGTpo%LmQuY<(!'"]YdAOD@:1RZ/WuddZpp1?<qn%??GtA.L.[#VU=Jh'
%1I=otEb)#X/(o<R@'ml43-a^3Opm[b'=2#KU5XW*+r%&(-h<HIXME8"S`_O2c4_JK2,IGX=MosY0"]k?+&s-\a/VZEM!%/Qjs$[<
%aIR[9WBmf#h@"I\`;IG.ptlj'd.atp@M-P2MfGKL"'Rc9?O>ls^5K&ps5!6!]BIj4JA,:%U]Mld+FncLV;3XIYT]/0[,m9\0LEI+
%*kK(."kKE8kKef%@6b6q[_q3XiECO-']a=.i6,i?g!54b;r8J,;FjTA@AH51(,j5`hRn*pJ,;nKLVLj"d`;^).1u2cDo$ajd@XT"
%WnMkEb8-u)H>&f5CiW"@,*:6r@i)H8BV6!SeudGKb*7akWng3_=<;[4oKCj<p'BJPM%%c`QCX4r"$<A)g.B8pMmoo#,*]B*`mLZ'
%,ZJj>^:/dlWm4>:'DkXE<O(G6XeT+])gZg[8e6od-Z/OX;.'3"_annfL"+]$M0pDrOC&GI-7e`0<7Os7WLc%DU`9!?4XtugR$L2u
%5-_Vmet.d8'4KgpC5<:&Q,O0RdX#4_QDPG&3%7pm-Iaj*#XRC-CF2#G5$)#rB_T]cs4Kcj?);cV[a&2DI[Lp7]qj[#\Ai(<Qn8$<
%f4T!/N&Fn8<[VE6/@YJ_Z(AAgX*:)P9\`Zfk?2[1CJB.>Z&1dieY>nugQ]gZ&Xeg\";9(APp&&oE7\Vu.S0DGpc.&u;ueA<[!_9f
%W["XKbGo#.&\0==QZ[26hT8s0`Z"E5B=j[2VN+ZS,_8AG%!f9s<LbsMqA.%.-j&Gc\`77Se^l,rAmE"kQum2<@apS*]Q'#%"\*Lp
%$dEY)@A/c890V5dXk!4!)63s,q.oR5-\X7e+1;!P%XRe&:^Ogq,8\tU%"Qn(U"bIHXQqX8m>NL=&]<U!mQt?(4ZDHh&u@e_&ET!G
%"-8]U;b59Xj:Yt(TrW7Ql@]K<g.0>=6,R6A<(o<SGco]>@LS'<g%V*.,>keF:S;+9!GJPXPrp:8!JJc9PK[1C:OVZk&/]#j^pmCb
%i8MB*;Hm*G)?ek*2-5[t9Z'8<JhaDJnpU==GZ=(&[/70>qAS\8g(ldR,<>U'#PpK5m`KrlBs8qUBNfHJ&@HBqEZA"r-Q8mZrroZ5
%]OYLE[d?tDQnBO#+.6DcImUCW+K;p:1t=oHS-X[HJptn#K3qs8VJQ5$bM?s=H^;\flq6n4KQ3%IPaUQLf>6@hn;3HVr<Z#_PFaJH
%W;5;YOfZ5e#cr<c[%ts<2aO!)-7.^F$-@Qp]!i]>mL<k0+fqC1>PR!MgJ(pgq/)^#%F;Bbn86B^kLX7@<YU`*s7L/3e$MT@]4@V5
%Tc1MoNY""^/.OFiEqOCj[%CUT@k53*QId5NW]lR1,NmYoK3fh2m>4h.in<A/ZF%c8gSs1S[`2J!a0qR"eba1BC`D?Y7?RdP<D>WR
%[*-.6?-?Me:Tnn!Ybo*EWD`>IcG6-ThX*Pl<pBeZIQW78S4k)dg7:=EjP7J\U;kT;?S(AO`:qP.=C[!h)Uh<q[`=BaZ-I,4?K%.:
%VWU-L=Bnm^.J4<#kujT&lEWfqZ#G:gH'W(ps/_,bJ+c%*o!3>grpe,/[]8K2qZ\3'JAO4P0\+o,fXDCJXH2eAdlrTs*uFdaC3Z.]
%Ck"\h/6==%G;.FmaDu,gD^*sLK<M^#I*g*6H4,\s?L_Ks%O0NI4A/19o]0jDeoV*U!E;kLkagl#H$jn[6<ZI31jQ6-.;A*@_3t/P
%E%bGj[6%6uXSHf>m%):-^CKbcZ&510a?^AVHNtq2'8P!j^?$9q:6Bj&3Kc@3fAVud,[\Ki50Di+fLIlnSGI5.oiMp/K&g=JC7=+;
%V5J1;g(,>5=.C_Y5=M,7I*4Z\Em'=R80jHSmC3htqAm>+$<.\,pYkY)$l5_IH^Fr\Mhac54JDT$rF&D=->GPMlY9n.PK:,n9p&Z7
%?H3t!'X]"GI!kpOmWnaC!/nYo$Kf(FOnl6)H<X7gg:IR1:kq'!,!S5/`Y:ud"uSkk8lUZZ1P44NfgnUY\,sJE*\iTfdQ4O/CDII0
%]gMmi(.N'HlmS-!r:Gr\j@!W9E)%b31P7t3h;^KAJ)Z0<=7/'YO\3\L6JDu-*T[i%Z<g*F0lJ+@hR<V`QU$/6W75JnJTNGY1(G3_
%p%q\"()0nUgtReS^)R#^msIlp<KkE&;'NT!C$7`_^%o*/$I*SSRLCjB4-u0`>i8a\*tNYqXoh+SLr6rP/laG@,+)Z[pT>qsj4rCU
%Eidc^%c;"A(2X(_M"Dm&`^P<1$rV`+A`%mLbW#ptaAe)(BPe;"db!LU;T@"q@p2o)PtNBWiR\U!@Ss[rV6;'j=1Tj,I^&*==.BY6
%-S/lCYS9;l'%Q^`LB;2TN&>GX4<=r3[Q(DJXYQU3C%dnlo9[)bi?*OGRrA<*TDH>&mZ7D<nGS-O5CWLsAbbCp^Al+*J,Sp7s*FG5
%a5?mY%tFTXVmgTYs5P3Cj1bK\l[QVD_iJa9r',]-na2f1s6$$R(CN1X2gk5An,E,)J,>`8""[gk'E~>
%AI9_PrivateDataEnd
